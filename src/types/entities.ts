/**
 * Core Entity Type Definitions
 * 
 * This file contains all TypeScript type definitions for entities in the
 * inventory management system. These types are used throughout the application
 * for strong type safety.
 * 
 * @module contracts/entities
 */

// ============================================================================
// Base Types
// ============================================================================

/**
 * ISO 8601 timestamp string
 * @example "2025-10-18T14:30:00Z"
 */
export type ISOTimestamp = string

/**
 * ISO 8601 date string
 * @example "2025-10-18"
 */
export type ISODate = string

/**
 * UUID string
 * @example "550e8400-e29b-41d4-a716-446655440000"
 */
export type UUID = string

// ============================================================================
// Schema Versioning
// ============================================================================

export interface SchemaVersion {
  version: string
  status: 'pending' | 'success' | 'failed'
  appliedAt: ISOTimestamp
  completedAt?: ISOTimestamp
  errorMessage?: string
  rolledBackAt?: ISOTimestamp
}

// ============================================================================
// Asset Category
// ============================================================================

export interface AssetCategory {
  id: UUID
  name: string
  icon?: string
  /**
   * Optional template that defines how asset names are autogenerated for this category.
   * Example: "%Manufacturer% %Model% %Asset Number%"
   */
  assetNameTemplate?: string
  customFields: CustomFieldDefinition[]
  createdBy: string
  createdByName: string
  createdAt: ISOTimestamp
  lastModifiedBy: string
  lastModifiedByName: string
  lastModifiedAt: ISOTimestamp
  schemaVersion?: string
}

export type CategoryCreate = Omit<
  AssetCategory,
  'id' | 'createdBy' | 'createdByName' | 'createdAt' | 'lastModifiedBy' | 'lastModifiedByName' | 'lastModifiedAt'
>

export type CategoryUpdate = Partial<Omit<AssetCategory, 'id' | 'createdBy' | 'createdByName' | 'createdAt'>>

export interface CustomFieldDefinition {
  id: UUID
  name: string
  type: CustomFieldType
  required: boolean
  options?: string[]
  validation?: {
    min?: number
    max?: number
    pattern?: string
    minLength?: number
    maxLength?: number
  }
  helpText?: string
}

export type CustomFieldType =
  | 'text'
  | 'number'
  | 'select'
  | 'multi-select'
  | 'date'
  | 'checkbox'
  | 'long-text'
  | 'url'
  | 'person-reference'

export type CustomFieldValue = string | number | boolean | string[]

// ============================================================================
// Asset
// ============================================================================

/**
 * Barcode history entry for tracking barcode regeneration
 * @enhancement E2 - Asset Barcode Regeneration
 */
export interface BarcodeHistoryEntry {
  barcode: string
  generatedAt: ISOTimestamp
  generatedBy: string
  generatedByName: string
  reason?: string
}

export interface Asset {
  id: UUID
  assetNumber: string
  name: string
  manufacturer?: string
  model?: string
  description?: string
  category: {
    id: UUID
    name: string
    icon?: string
  }
  status: AssetStatus
  location?: string
  inUseBy?: {
    personId: string
    personName: string
    since: ISOTimestamp
  }
  // FR-017: Control booking eligibility
  bookable: boolean
  // FR-048-051: Asset images
  photos?: Array<{
    id: UUID
    url: string
    thumbnailUrl?: string
    isMain: boolean
    uploadedAt: ISOTimestamp
    uploadedBy: string
  }>
  isParent: boolean
  parentAssetId?: UUID
  childAssetIds?: UUID[]
  barcode: string
  qrCode: string
  barcodeHistory?: BarcodeHistoryEntry[]
  customFieldValues: Record<string, CustomFieldValue>
  createdBy: string
  createdByName: string
  createdAt: ISOTimestamp
  lastModifiedBy: string
  lastModifiedByName: string
  lastModifiedAt: ISOTimestamp
  schemaVersion?: string
  // Computed properties (not stored)
  isAvailable?: boolean
  currentBooking?: UUID
  nextMaintenance?: ISODate
}

export type AssetStatus =
  | 'available'
  | 'in-use'
  | 'broken'
  | 'in-repair'
  | 'installed'
  | 'sold'
  | 'destroyed'
  | 'deleted'

export type AssetCreate = Omit<
  Asset,
  | 'id'
  | 'assetNumber'
  | 'barcode'
  | 'qrCode'
  | 'createdBy'
  | 'createdByName'
  | 'createdAt'
  | 'lastModifiedBy'
  | 'lastModifiedByName'
  | 'lastModifiedAt'
  | 'isAvailable'
  | 'currentBooking'
  | 'nextMaintenance'
> & {
  assetNumber?: string  // Optional: will be generated if not provided
  prefix?: string       // Optional: prefix for asset number generation (legacy)
  prefixId?: string     // T272: ID of the AssetPrefix to use for numbering
}

export type AssetUpdate = Partial<Omit<Asset, 'id' | 'assetNumber' | 'createdBy' | 'createdByName' | 'createdAt'>>

export interface AssetFilters {
  categoryId?: UUID
  status?: AssetStatus | AssetStatus[]
  location?: string
  parentAssetId?: UUID
  isParent?: boolean
  search?: string
  customFields?: Record<string, unknown>
}

// ============================================================================
// Booking
// ============================================================================

export interface Booking {
  id: UUID
  asset?: {
    id: UUID
    assetNumber: string
    name: string
  }
  kit?: {
    id: UUID
    name: string
  }
  quantity?: number
  allocatedChildAssets?: Array<{
    id: UUID
    assetNumber: string
    name: string
  }>
  // FR-010: Book on behalf of others
  bookedById: string              // Person who created the booking (ChurchTools person ID)
  bookedByName?: string           // Cache of person name
  bookingForId: string            // Person using the asset (can be same or different)
  bookingForName?: string         // Cache of person name
  // FR-012-014: Smart date and time booking
  bookingMode: 'single-day' | 'date-range'
  date?: ISODate                  // Single date (if bookingMode = 'single-day')
  startTime?: string              // Start time "HH:mm" (if bookingMode = 'single-day')
  endTime?: string                // End time "HH:mm" (if bookingMode = 'single-day')
  startDate: ISODate              // Start date (always set, also used for date-range)
  endDate: ISODate                // End date (always set, same as startDate for single-day)
  purpose: string
  notes?: string
  status: BookingStatus
  requestedBy: string             // Deprecated: use bookedById
  requestedByName: string         // Deprecated: use bookedByName
  approvedBy?: string
  approvedByName?: string
  checkedOutAt?: ISOTimestamp
  checkedOutBy?: string
  checkedOutByName?: string
  checkedInAt?: ISOTimestamp
  checkedInBy?: string
  checkedInByName?: string
  conditionOnCheckOut?: ConditionAssessment
  conditionOnCheckIn?: ConditionAssessment
  damageReported?: boolean
  damageNotes?: string
  createdAt: ISOTimestamp
  lastModifiedAt: ISOTimestamp
  schemaVersion?: string
}

export type BookingStatus =
  | 'pending'
  | 'approved'
  | 'declined'      // FR-018: When approver rejects booking
  | 'active'
  | 'completed'
  | 'overdue'
  | 'cancelled'     // FR-019: When requester cancels own booking
  | 'maintenance-hold'

export interface ConditionAssessment {
  rating: 'excellent' | 'good' | 'fair' | 'poor' | 'damaged'
  notes?: string
  photos?: string[]
}

export type BookingCreate = Omit<
  Booking,
  | 'id'
  | 'status'
  | 'approvedBy'
  | 'approvedByName'
  | 'checkedOutAt'
  | 'checkedOutBy'
  | 'checkedOutByName'
  | 'checkedInAt'
  | 'checkedInBy'
  | 'checkedInByName'
  | 'createdAt'
  | 'lastModifiedAt'
> & {
  status?: BookingStatus
}
export type BookingUpdate = Partial<Omit<Booking, 'id' | 'createdAt'>>

export interface BookingFilters {
  assetId?: UUID
  kitId?: UUID
  status?: BookingStatus | BookingStatus[]
  requestedBy?: string
  bookingForId?: string  // Filter by who the booking is for
  bookedById?: string    // Filter by who created the booking
  dateRange?: {
    start: ISODate
    end: ISODate
  }
}

// ============================================================================
// Equipment Kit
// ============================================================================

export interface Kit {
  id: UUID
  name: string
  description?: string
  type: KitType
  boundAssets?: {
    assetId: UUID
    assetNumber: string
    name: string
  }[]
  poolRequirements?: {
    categoryId: UUID
    categoryName: string
    quantity: number
    filters?: Record<string, unknown>
  }[]
  createdBy: string
  createdByName: string
  createdAt: ISOTimestamp
  lastModifiedBy: string
  lastModifiedByName: string
  lastModifiedAt: ISOTimestamp
  schemaVersion?: string
}

export type KitType = 'fixed' | 'flexible'

export type KitCreate = Pick<
  Kit,
  'name' | 'description' | 'type' | 'boundAssets' | 'poolRequirements'
>

export type KitUpdate = Partial<KitCreate>

export interface MaintenanceRecord {
  id: UUID
  asset: {
    id: UUID
    assetNumber: string
    name: string
  }
  bookingId?: UUID
  type: MaintenanceType
  date: ISODate
  performedBy: string
  performedByName: string
  description: string
  notes?: string
  cost?: number
  photos?: string[]
  documents?: string[]
  nextDueDate?: ISODate
  createdAt: ISOTimestamp
  lastModifiedAt: ISOTimestamp
  schemaVersion?: string
}

export type MaintenanceType =
  | 'inspection'
  | 'cleaning'
  | 'repair'
  | 'calibration'
  | 'testing'
  | 'compliance'
  | 'other'

export type MaintenanceRecordCreate = Omit<
  MaintenanceRecord,
  'id' | 'createdAt' | 'lastModifiedAt'
>

export interface MaintenanceSchedule {
  id: UUID
  assetId: UUID
  scheduleType: ScheduleType
  intervalDays?: number
  intervalMonths?: number
  intervalYears?: number
  intervalHours?: number
  intervalBookings?: number
  fixedDate?: ISODate
  reminderDaysBefore: number
  lastPerformed?: ISODate
  nextDue?: ISODate
  isOverdue?: boolean
  createdAt: ISOTimestamp
  lastModifiedAt: ISOTimestamp
  schemaVersion?: string
}

export type ScheduleType =
  | 'time-based'
  | 'usage-based'
  | 'event-based'
  | 'fixed-date'

export type MaintenanceScheduleCreate = Omit<
  MaintenanceSchedule,
  'id' | 'lastPerformed' | 'nextDue' | 'isOverdue' | 'createdAt' | 'lastModifiedAt'
>

// ============================================================================
// Maintenance Plans & Companies
// ============================================================================

export type MaintenancePlanStage = 'draft' | 'planned' | 'completed'

export type MaintenancePlanAssetStatus = 'pending' | 'completed' | 'skipped'

export interface MaintenancePlanAsset {
  assetId: UUID
  assetNumber: string
  assetName: string
  status: MaintenancePlanAssetStatus
  notes?: string
  holdId?: UUID | null
  completedAt?: ISOTimestamp
  completedBy?: string
  completedByName?: string
}

export interface MaintenancePlanSchedule {
  startDate?: ISODate
  endDate?: ISODate
  holdColor?: string
}

export interface MaintenancePlan {
  id: UUID
  name: string
  description?: string
  stage: MaintenancePlanStage
  assets: MaintenancePlanAsset[]
  maintenanceCompanyId?: string
  maintenanceCompanyName?: string
  intervalRule?: string
  schedule: MaintenancePlanSchedule
  notes?: string
  createdBy: string
  createdByName: string
  createdAt: ISOTimestamp
  lastModifiedBy: string
  lastModifiedByName: string
  lastModifiedAt: ISOTimestamp
  schemaVersion?: string
}

export type MaintenancePlanCreate = Omit<
  MaintenancePlan,
  'id' | 'createdAt' | 'createdBy' | 'createdByName' | 'lastModifiedAt' | 'lastModifiedBy' | 'lastModifiedByName'
>

export type MaintenancePlanUpdate = Partial<Omit<MaintenancePlan, 'id' | 'createdAt' | 'createdBy' | 'createdByName'>>

export interface MaintenanceCompany {
  id: UUID
  name: string
  contactName?: string
  email?: string
  phone?: string
  notes?: string
  createdAt: ISOTimestamp
  createdBy: string
  createdByName: string
  lastModifiedAt: ISOTimestamp
  lastModifiedBy: string
  lastModifiedByName: string
}

export interface MaintenanceCalendarHold {
  id: UUID
  planId: UUID
  assetId: UUID
  startDate: ISODate
  endDate: ISODate
  bookingId?: UUID
  holdColor?: string
  status: 'active' | 'released'
  createdAt: ISOTimestamp
  releasedAt?: ISOTimestamp
}

// ============================================================================
// Stock Take
// ============================================================================

export interface StockTakeSession {
  id: UUID
  startDate: ISOTimestamp
  completedDate?: ISOTimestamp
  status: StockTakeStatus
  scope: {
    type: 'all' | 'category' | 'location' | 'custom'
    categoryIds?: UUID[]
    locations?: string[]
    assetIds?: UUID[]
  }
  expectedAssets: {
    assetId: UUID
    assetNumber: string
    name: string
    location?: string
  }[]
  scannedAssets: {
    assetId: UUID
    assetNumber: string
    scannedAt: ISOTimestamp
    scannedBy: string
    scannedByName: string
    location?: string
    condition?: string
  }[]
  missingAssets?: {
    assetId: UUID
    assetNumber: string
    name: string
    lastKnownLocation?: string
  }[]
  unexpectedAssets?: {
    assetId: UUID
    assetNumber: string
    name: string
  }[]
  conductedBy: string
  conductedByName: string
  nameReason?: string
  createdAt: ISOTimestamp
  lastModifiedAt: ISOTimestamp
  schemaVersion?: string
}

export type StockTakeStatus =
  | 'active'
  | 'completed'
  | 'cancelled'

export type StockTakeSessionCreate = Omit<
  StockTakeSession,
  | 'id'
  | 'expectedAssets'
  | 'scannedAssets'
  | 'missingAssets'
  | 'unexpectedAssets'
  | 'createdAt'
  | 'lastModifiedAt'
>

// ============================================================================
// Change History / Audit Trail
// ============================================================================

/**
 * Individual field change for granular change history
 * @enhancement E3 - Human-Readable Change History
 */
export interface FieldChange {
  field: string
  oldValue: string
  newValue: string
}

export interface ChangeHistoryEntry {
  id: UUID
  entityType: 'asset' | 'category' | 'booking' | 'kit' | 'maintenance' | 'stocktake' | 'asset-prefix'
  entityId: UUID
  entityName?: string
  action: ChangeAction
  /** @deprecated Use changes array instead for better readability */
  fieldName?: string
  /** @deprecated Use changes array instead for better readability */
  oldValue?: string
  /** @deprecated Use changes array instead for better readability */
  newValue?: string
  /** Granular field changes for human-readable history (E3) */
  changes?: FieldChange[]
  changedBy: string
  changedByName: string
  changedAt: ISOTimestamp
  ipAddress?: string
  userAgent?: string
}

export type ChangeAction =
  | 'created'
  | 'updated'
  | 'deleted'
  | 'status-changed'
  | 'booked'
  | 'checked-out'
  | 'checked-in'
  | 'maintenance-performed'
  | 'scanned'

// ============================================================================
// Saved Views
// ============================================================================

export interface SavedView {
  id: UUID
  name: string
  ownerId: string
  ownerName: string
  isPublic: boolean
  viewMode: ViewMode
  filters: ViewFilter[]
  sortBy?: string
  sortDirection?: 'asc' | 'desc'
  groupBy?: string
  visibleColumns?: string[]
  createdAt: ISOTimestamp
  lastModifiedAt: ISOTimestamp
}

export type ViewMode =
  | 'table'
  | 'gallery'
  | 'calendar'
  | 'kanban'
  | 'list'

export interface ViewFilter {
  field: string
  operator: FilterOperator
  value: unknown
  logic?: 'AND' | 'OR'
}

export type FilterOperator =
  | 'equals'
  | 'not-equals'
  | 'contains'
  | 'not-contains'
  | 'starts-with'
  | 'ends-with'
  | 'greater-than'
  | 'less-than'
  | 'is-empty'
  | 'is-not-empty'
  | 'in'
  | 'not-in'

export type SavedViewCreate = Omit<
  SavedView,
  'id' | 'createdAt' | 'lastModifiedAt'
>

// ============================================================================
// Person/User Information
// ============================================================================

export interface PersonInfo {
  id: string
  firstName: string
  lastName: string
  name: string
  email?: string
  avatarUrl?: string
  phoneNumber?: string
}

// ============================================================================
// ChurchTools API Types
// ============================================================================

/**
 * ChurchTools Person entity from /whoami or /persons/{id}
 */
export interface Person {
  id: number
  firstName: string
  lastName: string
  email?: string
  imageUrl?: string
  phoneNumber?: string
  // ... other fields from ChurchTools API
}

/**
 * ChurchTools Custom Module entity
 */
export interface CustomModule {
  id: number
  key: string
  name: string
  description?: string
  // ... other fields
}

/**
 * ChurchTools Custom Data Category entity
 */
export interface CustomDataCategory {
  id: number
  name: string
  moduleId: number
  // ... other fields
}

/**
 * ChurchTools Custom Data Value entity
 */
export interface CustomDataValue {
  id: number
  categoryId: number
  [key: string]: unknown  // Dynamic properties based on category
}

// ============================================================================
// Scanner Configuration
// ============================================================================

/**
 * Represents a barcode function that can be configured on a scanner
 * Each function has a name, description, and configuration barcode
 */
export interface ScannerFunction {
  id: UUID
  name: string
  description: string
  configBarcode: string // The barcode to scan to enable this function
  category: 'prefix' | 'suffix' | 'formatting' | 'behavior' | 'other'
}

/**
 * Represents a barcode scanner model with its supported functions
 * Stores configuration image and available setup functions
 */
export interface ScannerModel {
  id: UUID
  manufacturer: string
  modelName: string
  modelNumber?: string
  description?: string
  imageBase64?: string // Base64 encoded image of the scanner
  supportedFunctions: ScannerFunction[]
  createdAt: ISOTimestamp
  lastModifiedAt: ISOTimestamp
}

export type ScannerModelCreate = Omit<
  ScannerModel,
  'id' | 'createdAt' | 'lastModifiedAt'
>

export type ScannerModelUpdate = Partial<ScannerModelCreate>

// ============================================================================
// Asset Prefix (E5 - Multiple Asset Prefixes)
// ============================================================================

/**
 * Asset prefix configuration for organizing assets by type
 * Allows multiple independent numbering sequences
 */
export interface AssetPrefix {
  id: UUID
  prefix: string // e.g., "CAM", "AUD", "MIC"
  description: string // e.g., "Camera Equipment"
  color: string // Hex color for visual distinction, e.g., "#3B82F6"
  sequence: number // Current sequence number (e.g., 42 for CAM-042)
  createdBy: string
  createdByName: string
  createdAt: ISOTimestamp
  lastModifiedBy: string
  lastModifiedByName: string
  lastModifiedAt: ISOTimestamp
}

export type AssetPrefixCreate = Omit<
  AssetPrefix,
  | 'id'
  | 'sequence'
  | 'createdBy'
  | 'createdByName'
  | 'createdAt'
  | 'lastModifiedBy'
  | 'lastModifiedByName'
  | 'lastModifiedAt'
>

export type AssetPrefixUpdate = Partial<AssetPrefixCreate> & {
  sequence?: number // Allow updating sequence internally
}

export interface PersonPrefixPreference {
  personId: string
  prefixId: string | null
  updatedAt: ISOTimestamp
}

// ============================================================================
// API Response Types
// ============================================================================

export interface APIResponse<T> {
  data: T
  meta?: {
    count?: number
    pagination?: {
      current: number
      total: number
      limit: number
    }
  }
}

export interface APIError {
  message: string
  code?: string
  status?: number
  details?: unknown
}

// ============================================================================
// Utility Types
// ============================================================================

/**
 * Pagination parameters for list queries
 */
export interface PaginationParams {
  page?: number
  limit?: number
  offset?: number
}

/**
 * Sort parameters for list queries
 */
export interface SortParams {
  sortBy?: string
  sortDirection?: 'asc' | 'desc'
}

/**
 * Combined query parameters
 */
export interface QueryParams extends PaginationParams, SortParams {
  search?: string
  filters?: Record<string, unknown>
}
