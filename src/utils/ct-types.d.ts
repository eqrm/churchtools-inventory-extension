// This file is auto-generated by @hey-api/openapi-ts created at 2025-09-02

/**
 * Absence
 * Absence for a person, like vacation or sickness.
 */
export type Absence = {
    absenceReason: AbsenceReason;
    /**
     * Name, description for absence
     */
    comment: string | null;
    /**
     * When this absence ends.
     */
    endDate: DateString;
    /**
     * When this absence ends. Is null if absence is all-day.
     */
    endTime: ZuluDateNullable;
    /**
     * ID of Record
     */
    id: number;
    meta: MetaDataEntityId;
    person: DomainObjectPerson;
    /**
     * When this absence begins.
     */
    startDate: DateString;
    /**
     * When this absence begins. Is null if absence is all-day.
     */
    startTime: ZuluDateNullable;
};

export type AbsenceReason = {
    id: number;
    name: string;
    nameTranslated: string;
    sortKey: number;
};

export type Account = {
    accountGroupId: number;
    accountingPeriodId: number;
    annotation: string | null;
    /**
     * Current balance of account in cent.
     */
    balance: number;
    /**
     * Budget of account in cent.
     */
    budget: number | null;
    /**
     * Current budget balance of account in cent.
     */
    budgetBalance: number;
    /**
     * Budget balance of matching account from last period in euro cent.
     */
    budgetBalanceLastPeriod: number;
    /**
     * Budget of matching account from last period in euro cent.
     */
    budgetLastPeriod: number | null;
    id: number;
    identifier: string;
    isDonationAccount: boolean;
    isOpeningBalanceAccount: boolean;
    meta: MetaDataEntityId;
    name: string;
    number: string;
    permissions: {
        /**
         * Flag, if user can use this account to post a transaction.
         */
        allowPosting: boolean;
    };
    taxRateId: number | null;
};

export type AccountClass = {
    accountTypeId: number;
    id: number;
    /**
     * If true, an additional row is added to that class in the report, which lists the profit-loss sum.
     */
    includeProfitLoss: boolean;
    meta: MetaDataEntityId;
    name: string;
    sortKey: number;
};

export type AccountClassNew = {
    accountTypeId: number;
    includeProfitLoss?: boolean;
    name: string;
    sortKey?: number;
};

export type AccountGroup = {
    accountClassId: number;
    id: number;
    isCashAssetAccount: boolean;
    meta: MetaDataEntityId;
    name: string;
    sortKey: number;
};

export type AccountGroupNew = {
    accountClassId: number;
    isCashAssetAccount: boolean;
    name: string;
    sortKey?: number;
};

export type AccountNew = {
    accountGroupId: number;
    accountingPeriodId: number;
    budget?: number;
    identifier?: string;
    isDonationAccount?: boolean;
    isOpeningBalanceAccount?: boolean;
    name: string;
    number: string;
};

export type AccountStatement = {
    duplicates: number;
    /**
     * amount in cents
     */
    endAmount: number;
    endDate: DateString;
    id: number;
    identifier: string;
    name: string;
    /**
     * amount in cents
     */
    startAmount: number;
    startDate: DateString;
    statistics: StatementStatistics;
};

export type AccountType = {
    balanceType: 'assets' | 'liabilities' | null;
    id: number;
    /**
     * @deprecated
     */
    isBalanceAccount: boolean;
    meta: MetaDataEntityId;
    name: string;
    sortKey: number;
};

export type AccountTypeNew = {
    balanceType: 'assets' | 'liabilities' | null;
    name: string;
    sortKey?: number;
};

export type AccountUpdate = {
    accountGroupId: number;
    budget?: number;
    identifier?: string;
    isDonationAccount?: boolean;
    isOpeningBalanceAccount?: boolean;
    name: string;
    number: string;
};

export type AccountingPeriod = AccountingPeriodBase & {
    donationReceiptsCreated: string;
    id: number;
    meta: MetaDataEntityId;
    permissions: {
        /**
         * Flag if current user can make changes in this accounting periods, like filing new transactions and expert mode is enabled.
         */
        canUseExpertMode: boolean;
        /**
         * Flag if current user can edit this accounting period, like changing the name.
         */
        'edit accounting period': boolean;
    };
};

export type AccountingPeriodBase = {
    clientId: number;
    endDate: string;
    incrementDocumentNumber: boolean;
    isClosed: boolean;
    startDate: string;
};

export type AccountingPeriodCreate = AccountingPeriodBase & {
    balances?: {
        from?: Array<number>;
        openingBalanceAccount?: number;
    };
    /**
     * Copy all master data from previous accounting period.
     */
    copyMasterData?: boolean;
};

export type AccountingPeriodUpdate = AccountingPeriodBase & {
    id: number;
    setImmutability?: boolean;
};

export type Action = {
    actionMetaData: ActionMetaData;
    color?: CtColor;
    description?: string;
    domainType: DomainType;
    group: ActionGroup | null;
    icon?: string;
    key:
        | 'add-member-to-group'
        | 'edit-group-membership'
        | 'change-member-status-requested-waiting'
        | 'change-member-status-requested-active'
        | 'change-member-status-requested-to_delete'
        | 'change-member-status-active-requested'
        | 'change-member-status-active-waiting'
        | 'change-member-status-active-to_delete'
        | 'change-member-status-to_delete-requested'
        | 'change-member-status-to_delete-waiting'
        | 'change-member-status-to_delete-active'
        | 'change-member-status-waiting-active'
        | 'change-member-status-waiting-to_delete'
        | 'send-member-email'
        | 'create-follow-up'
        | 'special:wait'
        | 'special:repeat';
    name?: string;
};

export type ActionGroup = {
    key: string;
    name: string;
};

export type ActionMetaData = {
    color: CtColor;
    description: string;
    icon: string;
    name: string;
};

export type Address = AddressUpdate & {
    /**
     * @deprecated
     */
    geoLat: string | null;
    /**
     * @deprecated
     */
    geoLng: string | null;
    latitudeLoose: string | null;
    longitudeLoose: string | null;
    /**
     * @deprecated
     */
    markerColor: string | null;
    /**
     * @deprecated
     */
    markerIcon: string | null;
    /**
     * @deprecated
     */
    markerUrl: string | null;
    /**
     * @deprecated
     */
    meetingAt: string | null;
    /**
     * @deprecated
     */
    postalcode: string | null;
};

/**
 * Special color values used for groups
 */
export type AddressColor = 'default' | 'parent';

export type AddressCreate = {
    addition: string | null;
    city: string | null;
    color: CtColor | AddressColor | null;
    /**
     * A country's ISO-code
     */
    country: string | null;
    district: string | null;
    domainIdentifier: string;
    domainType: string;
    icon: string | null;
    latitude: string | null;
    longitude: string | null;
    name: string | null;
    street: string | null;
    zip: string | null;
};

export type AddressInterface = {
    city: string | null;
    country: string | null;
    district: string | null;
    latitude: string | null;
    longitude: string | null;
    name: string | null;
    street: string | null;
    zip: string | null;
};

export type AddressSearchResult = {
    address: AddressInterface;
    domainObject: DomainObjectOsmAddress | DomainObjectPerson;
};

export type AddressUpdate = AddressCreate & {
    id: number;
};

export type AgeGroup = AgeGroupUpdate & {
    nameTranslated: string;
};

export type AgeGroupCreate = {
    end: number;
    name: string;
    sortKey: number;
    start: number;
};

export type AgeGroupUpdate = AgeGroupCreate & {
    id: number;
};

export type Agenda = {
    calendarId: number;
    id: number;
    isFinal: boolean;
    items: Array<AgendaItem>;
    meta: MetaModified;
    name: string;
    series: string;
    /**
     * Total of agenda items (without headers)
     */
    total: number;
};

export type AgendaItem = AgendaItemNormal | AgendaItemSong | AgendaItemHeader;

/**
 * Agenda Item
 */
export type AgendaItemBase = {
    /**
     * Duration of agenda item in seconds.
     */
    duration: number;
    id: number;
    isBeforeEvent: boolean;
    meta: MetaModified;
    note: string;
    position: number;
    responsible: {
        /**
         * Array of all persons, who could be resolved from the text string. If a service has multiple positions, multiple objects are in the array with the same `service` text string. If a service is not yet set the `person` object will be null.
         */
        persons: Array<{
            /**
             * Flat to indicate if the person has accepted the service or is requested.
             */
            accepted: boolean;
            person: DomainObjectPerson | null;
            /**
             * Name of the service, which is also the placeholder in the raw text string.
             */
            service: string;
        }>;
        /**
         * Raw text string. You need to search-replace the placeholders yourself.
         */
        text: string;
    };
    /**
     * Array of notes per service group. You will only see the service groups, you are allowed to see.
     */
    serviceGroupNotes: Array<{
        note: string;
        serviceGroupId: number;
    }>;
    /**
     * The start time of a position is dynamically calculated based on previous items and the start time of the event.
     */
    start: string;
    /**
     * List of start times if this agenda is shared between multiple events.
     */
    startTimes: {
        [key: string]: string;
    };
    title: string;
};

export type AgendaItemHeader = AgendaItemBase & {
    type: 'header';
};

export type AgendaItemNormal = AgendaItemBase & {
    type: 'normal';
};

export type AgendaItemSong = AgendaItemBase & {
    /**
     * If the type is `song` the song object is added to this item. `normal` and `header` items do not include this object.
     */
    song: {
        arrangement?: string;
        arrangementId?: number;
        bpm?: string;
        category?: string;
        defaultArrangement?: string;
        key?: string;
        songId?: number;
        title?: string;
    };
    type: 'header';
};

export type AppointmentAdditionals = {
    date: DateString;
    id: number;
    isRepeated: boolean;
    meta: MetaModified;
};

export type AppointmentBase = {
    additionals: Array<AppointmentAdditionals>;
    /**
     * Use 'additionals' instead
     * @deprecated
     */
    additions?: Array<AppointmentAdditionals>;
    address: Address;
    allDay: boolean;
    calendar: Calendar;
    /**
     * Use 'title' instead
     * @deprecated
     */
    caption?: string;
    description: string | null;
    endDate: ZuluDate | DateString;
    exceptions: Array<AppointmentExeptions>;
    id: number;
    image: Image | null;
    /**
     * Use 'description' instead
     * @deprecated
     */
    information?: string | null;
    isInternal: boolean;
    link: string | null;
    meta: MetaDataEntityId;
    /**
     * Use 'subtitle' instead
     * @deprecated
     */
    note?: string | null;
    onBehalfOfPid: number | null;
    repeatFrequency: number | null;
    /**
     * ID of the repeat pattern, NONE = 0, DAILY = 1, WEEKLY = 7, MONTHLY_BY_DATE = 31, MONTHLY_BY_WEEKDAY = 32, YEARLY = 365, MANUALLY = 999
     */
    repeatId: 0 | 1 | 7 | 31 | 32 | 365 | 999;
    repeatOption: number | null;
    repeatUntil: DateStringNullable;
    signup: AppointmentSignup | null;
    startDate: ZuluDate | DateString;
    subtitle: string | null;
    title: string;
    version: number;
};

export type AppointmentBooking = {
    id?: number;
    minpost?: string;
    minpre?: string;
    resource_id?: string;
    status_id?: number;
};

export type AppointmentCalculated = {
    base: AppointmentBase;
    calculated: {
        endDate: ZuluDate;
        startDate: ZuluDate;
    };
};

export type AppointmentCalculatedWithIncludes = {
    appointment: {
        base: AppointmentBase;
        calculated: {
            endDate: ZuluDate;
            startDate: ZuluDate;
        };
    };
};

export type AppointmentCreate = AppointmentBase & {
    bookings?: Array<{
        /**
         * Minutes after the appointment, the resource is blocked. Max is one day, 1440 minutes
         */
        afterwardMinutes: number;
        /**
         * Minutes before the appointment, the resource is blocked. Max is two weeks, 20160 minutes
         */
        leadTimeMinutes: number;
        resourceId: number;
        statusId: StatusId;
    }>;
    events?: Array<{
        adminIds?: Array<number>;
        eventTemplateId?: number;
        facts?: Array<unknown>;
        note?: string | null;
        services?: Array<{
            count: number;
            serviceId: number;
        }>;
        startDate?: ZuluDate;
    }>;
    meetingrequests?: Array<{
        inviteeId: number;
    }>;
};

export type AppointmentEvent = Array<{
    eventTemplateId?: string;
}>;

export type AppointmentExeptions = {
    date: string;
    id: number;
    meta: MetaDataEntityId;
};

export type AppointmentSignup = {
    signupDaysArchiveGroupNo: number | null;
    signupGroupTypeId: number | null;
    signupSetCompletionDate: boolean;
    signupTemplateGroupId: number | null;
    singupDaysForwardNo: number | null;
};

export type AppointmentTemplateGet = AppointmentTemplatePost & {
    id: string;
};

export type AppointmentTemplatePost = {
    address?: Address;
    allDay?: boolean;
    bookings?: AppointmentBooking;
    calendarId: number;
    description?: string | null;
    /**
     * Duration in seconds
     */
    duration: string;
    events?: Array<AppointmentEvent>;
    image?: DomainObjectFile;
    isInternal?: boolean;
    link?: string;
    repeatDuration?: number | null;
    repeatFrequence?: number | null;
    repeatId?: number;
    repeatOptionId?: number | null;
    startTime: string;
    subtitle?: string | null;
    title: string;
};

export type Arrangement = ArrangementCreate & {
    /**
     * List of files uploaded to that arrangement
     */
    files: Array<FileOrLink>;
    id: number;
    isDefault: boolean;
    /**
     * Use 'key' instead
     * @deprecated
     */
    keyOfArrangement?: unknown;
    /**
     * List of links "uploaded" to that arrangement
     */
    links: Array<FileOrLink>;
    meta: MetaDataEntityId;
    /**
     * Use 'description' instead
     * @deprecated
     */
    note?: unknown;
    source: SongSource;
};

/**
 * Details about a song's arrangement.
 */
export type ArrangementCreate = {
    beat?: string | null;
    description?: string | null;
    /**
     * Duration in seconds
     */
    duration?: number | null;
    key?: ArrangementKey | null;
    name: string;
    sourceId?: number | null;
    sourceReference?: string | null;
    tempo?: number | null;
};

/**
 * Possible keys that the song is arranged in
 */
export type ArrangementKey =
    | 'A'
    | 'Ab'
    | 'B'
    | 'Bb'
    | 'C'
    | 'D'
    | 'Db'
    | 'E'
    | 'Eb'
    | 'F'
    | 'F#'
    | 'G'
    | 'Gb'
    | 'Am'
    | 'Bm'
    | 'Bbm'
    | 'Cm'
    | 'C#m'
    | 'Dm'
    | 'D#m'
    | 'Em'
    | 'Ebm'
    | 'Fm'
    | 'F#m'
    | 'Gm'
    | 'G#m';

export type Association = {
    abbreviation: string;
    country: string;
    id: number;
    key: string;
    name: string;
};

/**
 * Automatic Email
 */
export type AutomaticEmail = {
    body: string;
    id: number;
    isActive: boolean;
    isForWaitinglist: boolean;
    roleId: number;
    sender: DomainObjectPerson;
    subject: string;
};

export type Bill = {
    accountingPeriodId: number;
    file: File;
    id: number;
    meta: MetaDataEntityId;
    splitTransactionId?: number;
    submittedDate: string;
    submittedPid: number;
    transactionId?: number;
    transactionSuggestionId?: number;
};

export type BillNew = {
    accountingPeriodId: number;
    fileId: number;
    filename?: string;
    splitTransactionId?: number;
    submittedDate: string;
    submittedPid: number;
    transactionId?: number;
    transactionSuggestionId?: number;
};

export type BillUpdate = {
    filename?: string;
    splitTransactionId?: number;
    submittedDate: string;
    submittedPid: number;
    transactionId?: number;
    transactionSuggestionId?: number;
};

export type BlogItem = {
    author?: string;
    content?: string;
    date?: string;
    description?: string;
    image?: string;
    link?: string;
    title?: string;
};

export type BookingBase = {
    additionals: Array<{
        date: DateString;
        id: number;
        isRepeated: boolean;
        meta: MetaModified;
    }>;
    allDay: boolean;
    /**
     * @deprecated
     */
    appointmentId: number | null;
    /**
     * Use 'title' instead
     * @deprecated
     */
    caption?: string | null;
    description: string | null;
    endDate: ZuluDate | DateString;
    exceptions: Array<{
        date: DateString;
        id: number;
        meta: MetaModified;
    }>;
    id: number;
    involvedPersonsDomainObjects?: {
        createdBy?: DomainObjectPerson;
        modifiedBy?: DomainObjectPerson;
        onBehalfOf?: DomainObjectPerson;
    };
    /**
     * Use 'subtitle' instead
     * @deprecated
     */
    location: string | null;
    meta: MetaDataEntityId;
    /**
     * Use 'description' instead
     * @deprecated
     */
    note?: string | null;
    onBehalfOfPid: number | null;
    repeatFrequency: number | null;
    repeatId: number;
    repeatOption: number | null;
    repeatUntil: DateStringNullable;
    /**
     * @deprecated
     */
    resource: Resource;
    resourceId: number;
    showInCal: boolean;
    simpleAppointment: SimpleAppointment | null;
    startDate: ZuluDate | DateString;
    statusId: number;
    subtitle: string | null;
    title: string;
    version: number;
};

export type BookingCalculated = {
    base: BookingBase;
    calculated: {
        endDate: ZuluDate | DateString;
        startDate: ZuluDate | DateString;
    };
};

export type BookingCalculatedWithIncludes = {
    booking: BookingCalculated;
    conflicts?: Array<BookingConflict>;
};

export type BookingConflict = {
    bookingId: number;
    endDate: ZuluDate;
    startDate: ZuluDate;
    statusId: StatusId;
    title: string;
};

export type BookingConflictRequestBody = {
    additionals?: Array<{
        date: DateString;
        isRepeated: boolean;
    }> | null;
    endDate: ZuluDate | DateString;
    exceptions?: Array<{
        date: DateString;
    }> | null;
    repeatFrequency?: number | null;
    repeatId?: number;
    repeatOption?: number | null;
    repeatUntil?: DateStringNullable;
    resourceId: number;
    startDate: ZuluDate | DateString;
};

export type BookingCreate = {
    additionals?: Array<{
        date: DateString;
        isRepeated: boolean;
    }> | null;
    description?: string | null;
    endDate: ZuluDate | DateString;
    exceptions?: Array<{
        date: DateString;
    }> | null;
    onBehalfOfPid?: number | null;
    repeatFrequency?: number | null;
    repeatId?: number;
    repeatOption?: number | null;
    repeatUntil?: DateStringNullable;
    resourceId: number;
    showInCal?: boolean;
    startDate: ZuluDate | DateString;
    statusId: number;
    subtitle?: string | null;
    title: string;
};

/**
 * This is a string that can only be true or false.
 */
export type BooleanString = '0' | '1';

export type BulkInfos = {
    /**
     * The identifiers of the domain objects that are allowed to be processed.
     */
    allowedDomainObjectIdentifiers: Array<string | number>;
};

export type BulkJobRequestBody = {
    domainObjectIdentifiers?: unknown;
    /**
     * The data that should be used for the bulk job. Example for the setMaxMembers Job: {"maxMembers": 10}
     */
    jobData?: unknown;
};

export type BulkResult = {
    guid?: string;
    jobName?: string;
    numberOfQueuedJobs?: number;
};

export type BulkResultNew = {
    jobGroup?: string;
    jobGuid?: string;
    numberOfQueuedJobs?: number;
};

export type Calendar = CalendarCreate & {
    id: number;
    /**
     * @deprecated
     */
    isPrivate?: boolean;
    /**
     * @deprecated
     */
    isPublic?: boolean;
    meta: MetaModified;
    nameTranslated: string;
    randomUrl: string;
};

export type CalendarCreate = CalendarUpdate & {
    type: 'church' | 'group' | 'personal';
};

export type CalendarUpdate = {
    campusId?: number | null;
    /**
     * The color of the calendar in any css3 color format. mostly hex
     */
    color: string;
    evTermineEventTypeId?: number | null;
    eventTemplateId?: number | null;
    iCalSourceUrl?: string | null;
    name: string;
    sortKey: number;
    syncToEvTermine?: boolean;
};

/**
 * Campus with possible address.
 */
export type Campus = {
    address?: Address;
    guid: string;
    id: number;
    meta: MetaDataEntityId;
    name: string;
    nameTranslated: string;
    shortName: string;
    shorty: string;
    sortKey: number;
};

export type CashDiscount = {
    accountId?: number;
    id?: number;
    meta?: MetaDataEntityId;
    note?: string;
    rate?: number;
};

export type CashDiscountNew = {
    accountId: number;
    note: string;
    rate: number;
};

export type Chat = {
    creator: number | null;
    domainId: number;
    guid: string;
    prefix: string;
    roomname: string | null;
    status: ChatStatus;
};

export type ChatNew = {
    domainId: number;
    guid: string;
    prefix: string;
    roomname: string;
};

/**
 * status of chat room
 */
export type ChatStatus = 'NOT_STARTED' | 'STARTING' | 'STARTED' | 'STOPPED';

export type ChatUpdate = {
    creator?: number;
    domainId?: number;
    prefix?: string;
    roomname?: string;
    status?: string;
};

export type Checkin = {
    group?: DomainObjectGroup;
    groupMeeting?: GroupMeeting;
    person?: DomainObjectPerson;
    totalCheckedIn?: number;
};

export type ChurchQuery = {
    description?: string;
    method?: 'ChurchQuery';
    params?: {
        computedFields?: Array<{
            name?: string;
            value?: ChurchQueryDTerm;
        }>;
        description?: string;
        filter?: {
            [key: string]: unknown;
        };
        groupBy?: Array<string>;
        orderBy?: Array<string>;
        outfileNamePart?: string;
        primaryEntityAlias?: string;
        responseFields?: Array<string>;
        title?: string;
    };
};

export type ChurchQueryDTerm = {
    stereotype?: Array<string>;
    title?: string;
};

export type Client = {
    city?: string | null;
    /**
     * the number of the Client (Mandantennummer) in Datev (https://apps.datev.de/help-center/documents/1071263 chapter 2)
     */
    datevClientNumber?: string | null;
    /**
     * the number of the Consultant (Beraternummer) in Datev (https://apps.datev.de/help-center/documents/1071263 chapter 2)
     */
    datevConsultantNumber?: string | null;
    /**
     * true if this client supports export of transactions in Datev format. Defaults to true
     */
    datevSupported?: boolean;
    email?: string | null;
    id: number;
    meta: MetaDataEntityId;
    name: string;
    phone?: string | null;
    postalCode?: string | null;
    sortKey: number;
    street?: string | null;
    treasurer?: DomainObjectPerson | null;
    /**
     * Person ID of treasurer
     */
    treasurerId?: number | null;
};

export type ClientNew = {
    city?: string;
    email?: string;
    name: string;
    phone?: string;
    postalCode?: string;
    sortKey: number;
    street?: string;
    treasurerId?: number;
};

/**
 * Color
 * Value for Tailwind color
 */
export type Color = {
    key: CtColor;
    shade: 50 | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;
};

export type CommentViewer = {
    /**
     * ID of comment viewer group
     */
    id: number;
    /**
     * Name of comment viewer group
     */
    name: string;
    /**
     * Translated name of comment viewer group
     */
    nameTranslated: string;
};

export type Config = {
    _current_config_file?: string;
    accept_datasecurity?: boolean;
    access_control_allow_credentials?: boolean;
    access_control_allow_origins?: string;
    admin_ids?: Array<string>;
    admin_mail?: string;
    admin_message?: string;
    aiAssistantAvailable?: boolean;
    ai_description_available_generation_count?: number;
    ai_description_available_generation_tests?: number;
    ai_description_generation_count?: number;
    ai_description_generation_enabled?: boolean;
    ai_description_total_generation_count?: number;
    allowaiassistant?: boolean;
    allowcheckin?: BooleanString;
    allowedcals?: string;
    allowedclients?: string;
    allowedcwbusers?: string;
    allowedresources?: string;
    allowedservices?: string;
    allowedstations?: string;
    allowedsyncconnections?: string;
    allowedsyncjobs?: string;
    alloweduser?: string;
    allowfinance?: BooleanString;
    allowldap?: BooleanString;
    allowoptigemsync?: BooleanString;
    allowsync?: BooleanString;
    alpha_book_affiliate_id?: string;
    alpha_book_enabled?: boolean;
    app_security_request?: boolean;
    authorized_persons?: string;
    brand: 'ChurchTools' | 'VereinTools';
    build?: string;
    ccli_access_token?: string;
    ccli_auto_reporting_enabled?: boolean;
    ccli_last_token_refresh?: string;
    ccli_refresh_token?: string;
    chatServer: string;
    chrome_active?: BooleanString;
    chrome_binary?: string;
    churchcal_active?: boolean;
    churchcal_css?: string;
    churchcal_entries_last_days?: number;
    churchcal_firstdayinweek?: number;
    churchcal_maincalname?: string;
    churchcal_name?: string;
    churchcal_name_default?: string;
    churchcal_sortcode?: number;
    churchchat_allow_event_chat?: boolean;
    churchchat_allow_group_chat?: boolean;
    churchchat_allow_person_chat?: boolean;
    churchchat_delete_event_chat_after_x_days?: number;
    churchchat_invite_ct_event_chat?: boolean;
    churchchat_invite_ct_group_chat?: boolean;
    churchchat_name?: string;
    churchchat_name_default?: string;
    churchchat_sortcode?: number;
    churchchat_start_event_chat_before_x_days?: number;
    /**
     * A stringified array of calendar ids
     */
    churchchat_start_event_chat_for_calendars?: string;
    churchchat_sync_user_id?: number;
    churchcheckin_active?: boolean;
    churchcheckin_label_child?: string;
    churchcheckin_label_parent?: string;
    churchcheckin_label_standard?: string;
    churchcheckin_name?: string;
    churchcheckin_name_default?: string;
    churchcheckin_sortcode?: number;
    churchcheckin_tags?: string;
    churchcustommodule_active?: BooleanString;
    churchcustommodule_name?: string;
    churchcustommodule_name_default?: string;
    churchdb_active?: boolean;
    churchdb_archivedeletehistory?: boolean;
    churchdb_birthdaylist_station?: string;
    churchdb_birthdaylist_status?: string;
    churchdb_cleverreach_client_id?: string;
    churchdb_cleverreach_client_secret?: string;
    churchdb_cleverreach_connected?: boolean;
    churchdb_emailseparator?: string;
    churchdb_groupnotchoosable?: number;
    churchdb_home_lat?: string;
    churchdb_home_lng?: string;
    churchdb_mailchimp_apikey?: string;
    churchdb_mailchimp_connected?: boolean;
    churchdb_mailjet_apikey?: string;
    churchdb_mailjet_apisecret?: string;
    churchdb_mailjet_connected?: boolean;
    churchdb_memberlist_station?: string;
    churchdb_memberlist_status?: string;
    churchdb_name?: string;
    churchdb_name_default?: string;
    churchdb_sendgroupmails?: boolean;
    churchdb_smscmtelecom_apikey?: string;
    churchdb_smspromote_apikey?: string;
    churchdb_sortcode?: number;
    churchfinance_active?: boolean;
    churchfinance_name?: string;
    churchfinance_name_default?: string;
    churchfinance_sortcode?: number;
    churchgroup_active?: boolean;
    churchgroup_inmenu?: boolean;
    churchgroup_name?: string;
    churchgroup_name_default?: string;
    churchgroup_sortcode?: string;
    churchreport_active?: boolean;
    churchreport_name?: string;
    churchreport_name_default?: string;
    churchreport_sortcode?: number;
    churchresource_active?: boolean;
    churchresource_anonymize_for_public_user?: boolean;
    churchresource_entries_last_days?: number;
    churchresource_name?: string;
    churchresource_name_default?: string;
    churchresource_send_emails?: boolean;
    churchresource_sortcode?: number;
    churchservice_active?: boolean;
    churchservice_agendashowenumeration?: boolean;
    churchservice_ccli_token?: string;
    churchservice_ccli_token_secret?: string;
    churchservice_entries_last_days?: number;
    churchservice_invite_persons?: boolean;
    churchservice_name?: string;
    churchservice_name_default?: string;
    churchservice_openservice_rememberdays?: number;
    churchservice_reminderhours?: number;
    churchservice_songwithcategoryasdir?: boolean;
    churchservice_sortcode?: number;
    churchsync_active?: boolean;
    churchsync_inmenu?: boolean;
    churchsync_name?: string;
    churchsync_name_default?: string;
    churchsync_sortcode?: string;
    churchwiki_active?: boolean;
    churchwiki_name?: string;
    churchwiki_name_default?: string;
    churchwiki_sortcode?: number;
    cron_daily?: ZuluDate;
    cron_hour_8?: ZuluDate;
    cronjob_delay?: number;
    csrf_enabled?: boolean;
    currently_mail_sending?: BooleanString;
    datasecurityPrivacyDeclarationWikiLink?: string;
    datasecurity_banner_enabled?: boolean;
    /**
     * Only in extended config
     */
    datasecurity_privacy_agreement_text?: string;
    /**
     * Only in extended config
     */
    datasecurity_privacy_agreement_text_for_children?: string;
    db_name?: string;
    db_password?: string;
    db_server?: string;
    db_user?: string;
    default_phone_area_code?: string;
    emailServer?: 'own' | 'churchtools';
    encryptionkey?: string;
    env?: string;
    evangelische_termine_api_key?: string;
    evangelische_termine_enabled?: boolean;
    evangelische_termine_name?: string;
    evangelische_termine_url?: string;
    evangelische_termine_vid?: string;
    feature_custommodule?: BooleanString;
    finance_active?: boolean;
    finance_inmenu?: BooleanString;
    finance_name?: string;
    finance_name_default?: string;
    finance_sortcode?: string;
    finderUrl: string;
    first_sync_job?: ZuluDate;
    first_transaction?: ZuluDate;
    hideBetaStates?: boolean;
    hide_all_hints?: boolean;
    hostingservice?: BooleanString;
    https_only?: BooleanString;
    image_extension?: string;
    impressum_external?: boolean;
    impressum_external_link?: string;
    impressum_internal?: boolean;
    imprintWikiLink?: string;
    installation_verification_code?: string;
    invite_email_text?: string;
    isPostsActive: boolean;
    isSamlActive?: boolean;
    is_churchtools_blog_widget_active?: boolean;
    is_churchtools_onboarding_widget_active?: boolean;
    is_pr_widget_active?: boolean;
    is_rss_widget_active?: boolean;
    language?: LanguageCode;
    last_cron?: string;
    last_cron_finished?: string;
    last_import_clear?: string;
    last_translation_update?: string;
    ldap_otp_enabled?: boolean;
    licenseSettings?: {
        hide_licensetab?: '0' | '1';
    };
    log_debug?: BooleanString;
    login_message?: string;
    mail_enabled?: boolean;
    mail_sending_in_background?: BooleanString;
    mail_sending_starttime?: string;
    mail_smtp_args_host?: string;
    mail_smtp_args_password?: string;
    mail_smtp_args_port?: string;
    mail_smtp_args_smtpsecure?: string;
    mail_smtp_args_username?: string;
    max_uploadfile_size_kb?: number;
    memberlist_birthday_full?: BooleanString;
    memberlist_email?: BooleanString;
    memberlist_fax?: BooleanString;
    memberlist_group_couples?: BooleanString;
    memberlist_picture?: BooleanString;
    memberlist_salutation?: BooleanString;
    memberlist_telefongeschaeftlich?: BooleanString;
    memberlist_telefonhandy?: BooleanString;
    memberlist_telefonprivat?: BooleanString;
    onboarding_start?: ZuluDate;
    openstreetmaps_enabled?: boolean;
    orderstatus?: OrderStatus;
    orderstatus_since_date?: ZuluDate;
    package?: string;
    post_active?: boolean;
    post_edit_time_limited?: boolean;
    post_email_summary_default_enabled?: boolean;
    post_featured_groups?: string;
    post_name?: string;
    post_sortcode?: number;
    post_wizard_completed?: boolean;
    post_wizard_groups?: string;
    prevent_change_security_settings?: '0' | '1';
    prevent_export?: boolean;
    prevent_manual_finance_account_creation?: boolean;
    privacy_policy_external?: boolean;
    privacy_policy_external_link?: string;
    privacy_policy_fields_mandatory?: boolean;
    privacy_policy_fields_mandatory_api?: boolean;
    privacy_policy_internal?: boolean;
    privacy_policy_relationships?: string;
    profile?: string;
    public_channel_registry_url?: string;
    rabbitmq_config_host?: string;
    rabbitmq_config_password?: string;
    rabbitmq_config_port?: string;
    rabbitmq_config_user?: string;
    rss_widget_link?: string;
    safe_mode_enable_authorized_persons?: BooleanString;
    safe_mode_enable_chat_sync?: BooleanString;
    safe_mode_enable_consolidation?: BooleanString;
    safe_mode_enable_guid_sync?: BooleanString;
    safe_mode_enable_job_queueing?: BooleanString;
    safe_mode_enable_mail?: BooleanString;
    safe_mode_enable_newsletter?: BooleanString;
    safe_mode_enable_notification?: BooleanString;
    send_data_security_mails?: boolean;
    short_name?: string;
    showAIAssistant?: boolean;
    show_remember_me?: boolean;
    site_language?: string;
    site_licensekey?: string;
    site_logo?: string;
    site_mail?: string;
    site_name?: string;
    site_offline?: boolean;
    site_startpage?: string;
    site_url?: string;
    'support-user-active-since'?: ZuluDate;
    test?: BooleanString;
    timezone?: string;
    verificationStatus: VerificationStatus;
    version?: string;
    webchatLink: string;
    website_order_status?: string;
    website_sync_user_id?: string;
    website_testphase_date?: string;
    website_trial_user_id?: number;
    website_url?: string;
    welcome?: string;
    welcome_subtext?: string;
};

/**
 * Master Data for Contact Labels. Used to label E-Mail Adresses.
 */
export type ContactLabel = {
    /**
     * ID of Record
     */
    id: number;
    /**
     * Indicator if label is the default. Used for new person emails
     */
    isDefault: boolean;
    /**
     * Name of Label
     */
    name: string;
    /**
     * Translated Name of Label
     */
    nameTranslated: string;
    sortKey: number;
};

/**
 * Cost Center
 */
export type CostCenter = {
    accountingPeriodId: number;
    annotation: string | null;
    /**
     * Budget is in cent.
     */
    budget: number;
    /**
     * Remaining amount. (Budget - Cost Center Expenses). Budget balance is in cent.
     */
    budgetBalance: number;
    /**
     * Budget balance of matching cost center from last period in euro cent.
     */
    budgetBalanceLastPeriod: number;
    /**
     * Budget for the cost center with the same number in the previous accounting period.
     */
    budgetLastPeriod: number;
    /**
     * Cost Center Expences. (Outcome - Income). In cent
     */
    budgetSpent: number;
    group?: DomainObjectGroup;
    id: number;
    meta: MetaDataEntityId;
    name: string;
    number: string;
};

/**
 * The details of a country
 */
export type Country = {
    emoji?: string;
    /**
     * ChurchTools ID of country
     */
    id?: number;
    /**
     * two letter iso country code
     */
    iso2?: string;
    /**
     * English name of country
     */
    name?: string;
    /**
     * Translated name of the country
     */
    nameTranslated?: string;
};

/**
 * A color in ChurchTools
 */
export type CtColor =
    | 'accent'
    | 'amber'
    | 'basic'
    | 'blue'
    | 'critical'
    | 'constructive'
    | 'cyan'
    | 'emerald'
    | 'error'
    | 'fuchsia'
    | 'green'
    | 'indigo'
    | 'info'
    | 'lime'
    | 'magic'
    | 'orange'
    | 'pink'
    | 'purple'
    | 'red'
    | 'rose'
    | 'sky'
    | 'success'
    | 'teal'
    | 'violet'
    | 'warning'
    | 'yellow'
    | 'destructive';

export type CtModule =
    | 'churchcal'
    | 'churchcheckin'
    | 'churchdb'
    | 'churchfinance'
    | 'churchgroup'
    | 'churchreport'
    | 'churchresource'
    | 'churchservice'
    | 'churchsync'
    | 'churchwiki'
    | 'finance'
    | 'post';

export type CustomModule = CustomModuleCreate & {
    id: number;
};

export type CustomModuleCreate = {
    description?: string;
    name: string;
    shorty: string;
    sortKey: number;
};

export type CustomModuleDataCategory = CustomModuleDataCategoryCreate & {
    id: number;
};

export type CustomModuleDataCategoryCreate = {
    customModuleId: number;
    description: string;
    name: string;
    schema?: string;
    securityLevelId?: number;
    shorty: string;
};

export type CustomModuleDataValue = CustomModuleDataValueCreate & {
    id: number;
};

export type CustomModuleDataValueCreate = {
    dataCategoryId: number;
    domainId?: number;
    domainType?: string;
    value?: string;
};

/**
 * A permission object for a specific custom module.
 */
export type CustomModulePermission = {
    'create custom category': boolean;
    'create custom data': Array<number>;
    'delete custom category': Array<number>;
    'delete custom data': Array<number>;
    'edit custom category': Array<number>;
    'edit custom data': Array<number>;
    view: boolean;
    'view custom category': Array<number>;
    'view custom data': Array<number>;
};

/**
 * A simple date in ISO format, e.g. '2022-10-19'
 */
export type DateString = string;

/**
 * A simple date in ISO format, e.g. '2022-10-19'
 */
export type DateStringNullable = string | null;

/**
 * A simple timestamp in ISO format, e.g. '2022-10-19 12:00:00'
 */
export type DateTimeString = string;

/**
 * A simple timestamp in ISO format, e.g. '2022-10-19 12:00:00'
 */
export type DateTimeStringNullable = string | null;

export type DbField = DbFieldBase & {
    /**
     * @deprecated
     */
    column: string;
    createdByChurch: boolean;
    fieldCategory: {
        id: number;
        internCode: FieldCategoryCode;
        name: string;
        table: string;
    };
    fieldType: {
        id: number;
        internCode: FieldTypeCode;
        name: string;
        sortKey: number;
    };
    hideInFrontend: boolean;
    id: number;
    isBasicInfo: boolean;
    isNotConfigurable: boolean;
    isNullable: boolean;
    key: string;
    /**
     * @deprecated
     */
    notConfigurable: boolean;
    /**
     * @deprecated
     */
    nullable: boolean;
    options?: Array<DbFieldOption>;
};

export type DbFieldBase = {
    deleteOnArchive: boolean;
    isActive: boolean;
    isNewPersonField: boolean;
    length?: number | null;
    /**
     * @deprecated
     */
    lineEnding: string;
    name: string;
    securityLevel: number;
    shorty?: string;
    sortKey: number;
    useAsPlaceholder: boolean;
};

export type DbFieldCreate = DbFieldBase & {
    fieldCategoryInternCode: FieldCategoryCode;
    fieldTypeInternCode: FieldTypeCode;
};

export type DbFieldOption = DbFieldOptionCreate & {
    id: number | string;
};

export type DbFieldOptionCreate = {
    name: string;
    sortKey?: number;
} & {
    [key: string]: unknown;
};

export type DbFieldUpdate = DbFieldBase & {
    id: number;
};

/**
 * Denomination of a church
 */
export type Denomination = {
    key: string;
    name: string;
    nameTranslated: string;
};

export type Department = {
    id: number;
    name: string;
    nameTranslated: string;
    sortKey: number;
};

/**
 * Device
 * A device can be a smartphone or tablet running the ChurchTools app.
 */
export type Device = {
    /**
     * Used App Version
     */
    appVersion: string | null;
    /**
     * Use meta.createdDate instead
     * @deprecated
     */
    createdAt?: unknown;
    /**
     * Unique ID generated by the App
     */
    deviceId: string;
    /**
     * Use `deviceId` instead
     * @deprecated
     */
    id?: unknown;
    meta: MetaDataEntityId;
    personId: number;
    /**
     * Push ID generated by Firebase
     */
    pushId: string | null;
    /**
     * Time To Live of Device
     */
    ttl: string;
    /**
     * Device Type
     */
    type: 'APN' | 'FCM';
    /**
     * Use meta.modifiedDate instead
     * @deprecated
     */
    updatedAt?: unknown;
    /**
     * Use `appVersion` instead
     * @deprecated
     */
    version?: unknown;
};

export type DomainObject = {
    apiUrl?: string | null;
    color?: Color | null;
    domainIdentifier: string;
    frontendUrl: string | null;
    imageUrl?: string | null;
    infos?: Array<string>;
    initials?: string | null;
    title: string;
};

/**
 * Action as Domain Object
 */
export type DomainObjectAction = {
    apiUrl?: null;
    color?: CtColor | null;
    domainAttributes?: {
        [key: string]: unknown;
    };
    domainIdentifier?: string;
    domainType: '';
    frontendUrl?: string;
    icon: string;
    imageUrl?: null;
    infos?: Array<string>;
    initials?: null;
    title?: string;
};

export type DomainObjectAny =
    | DomainObjectExternalPerson
    | DomainObjectGroup
    | DomainObjectGroupMembership
    | DomainObjectPerson
    | DomainObjectSong
    | DomainObjectWikiPage
    | DomainObjectFile
    | DomainObjectOsmAddress
    | DomainObjectLogo
    | DomainObjectAction
    | DomainObjectFurtherLink;

/**
 * Event as Domain Object
 */
export type DomainObjectEvent = DomainObject & {
    domainAttributes: {
        startDate?: string;
    };
    domainType: 'event';
    icon: 'calendar-day';
};

/**
 * Person as Domain Object
 */
export type DomainObjectExternalPerson = DomainObject & {
    apiUrl: null;
    domainAttributes: {
        email?: string;
    };
    domainType: 'externalPerson';
    icon: 'user';
};

export type DomainObjectFile = DomainObject & {
    domainAttributes: {
        [key: string]: unknown;
    };
    domainType: 'file';
    frontendUrl: string;
    icon: 'file';
};

export type DomainObjectFurtherLink = DomainObject & {
    domainAttributes: {
        [key: string]: unknown;
    };
    domainType: 'furtherLink';
    icon: 'link';
};

export type DomainObjectGroup = DomainObject & {
    apiUrl: string;
    domainAttributes: {
        campusId: number | null;
        groupStatusId: number;
        groupTypeId: number;
        guid: string;
        note: string;
        visibility: 'public' | 'hidden' | 'restricted' | 'intern';
    };
    domainType: 'group';
    frontendUrl: string;
    icon: 'users';
};

/**
 * Person as Domain Object
 */
export type DomainObjectGroupMembership = DomainObject & {
    apiUrl: string;
    domainAttributes: {
        dateOfDeath: DateStringNullable;
        firstName: string;
        groupId: number;
        /**
         * Globally Unique Identifier
         */
        guid: string;
        isArchived: boolean;
        lastName: string;
        personId: number;
        roleId: number;
    };
    domainType: 'group_membership';
    frontendUrl: string;
    icon: 'user';
    infos: Array<string>;
};

export type DomainObjectGrouphomepage = DomainObject & {
    domainAttributes: {
        childGroupIds: Array<number>;
        parentGroupId: number;
    };
    domainType: 'grouphomepage';
    icon: 'globe';
};

export type DomainObjectImage = {
    additionalInfos?: Array<string>;
    apiUrl?: string;
    domainId?: string;
    domainType?: string;
    fileUrl?: string;
    filename?: string;
    frontendUrl?: string;
    imageUrl?: string;
    meta?: MetaDataEntityId;
    name?: string;
    relativeUrl?: string;
    securityLevelId?: string;
    showOnlyWhenEditable?: boolean;
    size?: number | null;
};

export type DomainObjectLogo = DomainObject & {
    domainType: 'logo';
    icon: string;
};

/**
 * Event as Domain Object
 */
export type DomainObjectOsmAddress = DomainObject & {
    domainAttributes: {
        [key: string]: unknown;
    };
    domainType: 'osm-address';
    icon: 'location-dot';
};

export type DomainObjectPayload = {
    domain_identifiers: Array<string>;
    domain_types: Array<string>;
};

/**
 * Person as Domain Object
 */
export type DomainObjectPerson = DomainObject & {
    apiUrl: string;
    domainAttributes: {
        dateOfDeath: DateStringNullable;
        firstName: string;
        /**
         * Globally Unique Identifier
         */
        guid: string;
        isArchived: boolean;
        lastName: string;
    };
    domainType: 'person';
    frontendUrl: string;
    icon: 'user';
    infos: Array<string>;
};

export type DomainObjectPost = DomainObject & {
    domainAttributes: {
        [key: string]: unknown;
    };
    domainType: 'post';
    icon: 'newspaper';
    infos: Array<string>;
};

export type DomainObjectSong = DomainObject & {
    domainAttributes: {
        [key: string]: unknown;
    };
    domainType: 'song';
    icon: 'music';
};

export type DomainObjectWikiPage = DomainObject & {
    domainAttributes: {
        wikiCategoryId: number;
    };
    domainType: 'wiki_page';
    icon: 'file';
};

export type DomainType = string;

export type Donator = {
    /**
     * Total number of donations in the specified accounting period.
     */
    count: number;
    /**
     * Date of the last donation receipt creation.
     */
    donationReceiptCreatedDate: ZuluDateNullable;
    /**
     * Indicator if all necessary data for a donation receipt is available.
     */
    hasAllDonatorData: boolean;
    /**
     * Indicator if a donation receipt is available.
     */
    hasDonationReceipt: boolean;
    hasDonatorData: {
        city: boolean;
        firstName: boolean;
        lastName: boolean;
        street: boolean;
        zip: boolean;
    };
    /**
     * Indicator if the donation receipt is outdated.
     */
    isDonationReceiptOutdated: boolean;
    /**
     * Value of the last donation in cent.
     */
    lastDonationAmount: number;
    lastDonationDate: ZuluDate;
    lastDonationModifiedDate: ZuluDate;
    /**
     * Contains either one element (a single donator) or two elements (donator and their spouse).
     */
    persons: Array<DomainObjectPerson>;
    /**
     * Value is in cent.
     */
    sum: number;
};

export type DynamicGroupProcess = {
    handleMembership?: {
        [key: string]: unknown;
    };
};

export type DynamicGroupProcessSets = {
    groupAndQueryResult?: {
        active?: DynamicGroupProcess;
        none?: DynamicGroupProcess;
        requested?: DynamicGroupProcess;
        to_delete?: DynamicGroupProcess;
        waiting?: DynamicGroupProcess;
    };
    groupOnly?: {
        active?: DynamicGroupProcess;
        none?: DynamicGroupProcess;
        requested?: DynamicGroupProcess;
        to_delete?: DynamicGroupProcess;
        waiting?: DynamicGroupProcess;
    };
    queryResultOnly?: {
        none?: DynamicGroupProcess;
    };
};

export type DynamicGroupRule = {
    description?: string;
    importance?: number;
    personIdFieldName?: string;
    process?: DynamicGroupProcessSets;
    query?: ChurchQuery;
    shorty?: string;
};

/**
 * Status of dynamic group update.
 */
export type DynamicGroupStatus = 'active' | 'inactive' | 'manual' | 'none' | null;

export type Event = {
    adminIds?: Array<number>;
    appointmentId?: number;
    calendar?: Calendar;
    chatStatus?: ChatStatus;
    /**
     * @deprecated
     */
    description?: string;
    endDate?: string;
    /**
     * @deprecated
     */
    eventAdminIds?: Array<number>;
    eventFiles?: Array<DomainObjectFile>;
    /**
     * to include set query-param `include=eventServices`
     */
    eventServices?: Array<EventService>;
    guid?: string;
    id?: number;
    isCanceled?: boolean;
    name?: string;
    note?: string;
    startDate?: ZuluDate;
};

/**
 * EventFact
 * Fact entry for an event
 */
export type EventFact = {
    eventId: number;
    factId: number;
    meta: MetaDataEntityId;
    modifiedDate: ZuluDateDeprecated;
    /**
     * @deprecated
     */
    modifiedPid: number;
    value: number | string;
};

export type EventMasterData = {
    absenceReasons?: Array<AbsenceReason>;
    facts?: Array<Fact>;
    serviceGroups?: Array<ServiceGroup>;
    services?: Array<Service>;
    songCategories?: Array<SongCategory>;
    songSources?: Array<SongSource>;
};

export type EventService = {
    /**
     * @deprecated
     */
    agreed?: boolean;
    allowChat?: boolean;
    comment?: string;
    /**
     * @deprecated
     */
    counter?: number;
    id?: number;
    index?: number | null;
    isAccepted?: boolean;
    isValid?: boolean;
    name?: string;
    permissions?: {
        enterSelfIfFree?: boolean;
    } | null;
    person?: DomainObjectPerson;
    /**
     * @deprecated
     */
    personId?: number;
    requestedDate?: string;
    requesterPerson?: DomainObjectPerson;
    /**
     * @deprecated
     */
    requesterPersonId?: number;
    serviceId?: number;
};

export type ExternalLogin = ExternalLoginCreate & {
    id: number;
};

export type ExternalLoginCreate = {
    /**
     * config options for the external login type
     */
    config?: unknown;
    createNewPerson?: boolean;
    name: string;
    newPersonCampusId: number;
    newPersonDepartmentId: number;
    newPersonStatusId: number;
    type: string;
    updateDataOnLogin?: boolean;
};

/**
 * ExternalSystem
 */
export type ExternalSystem = {
    /**
     * Key Value Pairs that define the access to the external system
     */
    accessHeaderValues: {
        [key: string]: unknown;
    };
    adapter: string;
    /**
     * Not necessary when creating a new external system
     */
    id?: number;
    name: string;
};

/**
 * ExternalSystem
 */
export type ExternalSystemReturn = {
    adapter?: string;
    id?: number;
    jobConfigsCount?: number;
    name?: string;
};

export type Fact = (FactNumber | FactSelect) & unknown;

export type FactBase = {
    id: number;
    name: string;
    nameTranslated: string;
    sortKey: number;
};

export type FactNumber = FactBase & {
    type: 'number';
    unit?: string;
};

export type FactSelect = FactBase & {
    options: Array<string>;
    type: 'select';
};

export type FeatureUsage = {
    /**
     * Value to decrement the metric by
     */
    delta?: number;
    /**
     * Feature, tour or event name.
     */
    name: string;
    type: 'feature' | 'tour' | 'event';
};

/**
 * The intern code of the field category the field belongs to. This is used to define the category of the field.
 */
export type FieldCategoryCode =
    | 'f_group'
    | 'f_address'
    | 'f_church'
    | 'f_category'
    | 'f_dep'
    | 'f_growpath'
    | 'f_datasecurity';

/**
 * Field Mapping
 */
export type FieldMapping = {
    domainType: string;
    entries: {
        propertyMappingsESToMaster: FieldMappingEntry;
        propertyMappingsMasterToES: FieldMappingEntry;
    };
    externalSystem: ExternalSystem;
    id: number;
};

/**
 * Field Mapping Entry
 */
export type FieldMappingEntry = {
    from: string;
    fromFilter?: string;
    id: number;
    others?: Array<unknown>;
    system: 'master' | 'externalSystem';
    to: string;
    toFilter?: string;
    valueMapping?: Array<unknown>;
};

export type FieldOption = {
    id?: string;
    name?: string;
};

/**
 * The intern code of the field type the field belongs to. This is used to define the type of the field.
 */
export type FieldTypeCode =
    | 'select'
    | 'text'
    | 'date'
    | 'datetime'
    | 'textarea'
    | 'checkbox'
    | 'number'
    | 'multiselect'
    | 'api'
    | 'radioselect';

export type File = {
    additionalInfos: Array<string>;
    domainId: string;
    domainType: string;
    fileUrl: string;
    filename: string;
    id: number;
    imageOption: {
        crop?: {
            bottom: number;
            left: number;
            right: number;
            top: number;
        };
        focus?: {
            x: number;
            y: number;
        };
    } | null;
    imageUrl: string | null;
    meta: {
        createdDate: ZuluDate;
        createdPerson?: DomainObjectPerson;
        modifiedDate: ZuluDate;
        modifiedPerson?: DomainObjectPerson;
    };
    name: string;
    relativeUrl: string;
    securityLevelId: number;
    showOnlyWhenEditable: boolean;
    /**
     * The file size in byte
     */
    size: number | null;
    type: 'file' | 'link';
};

/**
 * File or Link
 * File or Link for a specific domain type. E.g. uploaded music file for songs or avatar of a person.
 */
export type FileOrLink = {
    domainId?: string;
    /**
     * ChurchTools Domain Type. Where does this file belong to?
     */
    domainType?: string;
    /**
     * Link to external website or link to file in ChurchTools
     */
    fileUrl?: string;
    /**
     * Filename of uploaded file or name of the link
     */
    filename?: string;
    meta?: MetaModified;
    /**
     * Name of that file, when it's been uploaded
     */
    name?: string;
};

export type FinanceMasterData = {
    accountClasses: Array<AccountClass>;
    accountGroups: Array<AccountGroup>;
    accountTypes: Array<AccountType>;
    accountingPeriods: Array<AccountingPeriod>;
    accounts: Array<Account>;
    cashDiscounts: Array<CashDiscount>;
    clients: Array<Client>;
    costCenters: Array<CostCenter>;
    taxRates: Array<TaxRate>;
    taxTypes: Array<TaxType>;
    transactionPurposes: Array<TransactionPurpose>;
};

export type FinancePermissions = {
    canViewBudgets?: boolean;
    canViewDonators?: boolean;
    canViewReports?: boolean;
    canViewTransactions?: boolean;
    editMasterData?: boolean;
};

export type FinanceTemplate = {
    counts?: {
        accountClasses?: number;
        accountGroups?: number;
        accountTypes?: number;
        accounts?: number;
        costCenters?: number;
        taxRates?: number;
        taxTypes?: number;
    };
    domainIdentifier: string;
    domainType: string;
    filename: string;
    id: number;
    name: string;
    relativeUrl: string;
    securityLevelId?: number;
    size?: number;
    url: string;
};

export type FollowUp = {
    commentViewerId?: number;
    id: number;
    name: string;
    nameTranslated: string;
};

export type FollowUp2 = FollowUpCreate & {
    doneDate: DateStringNullable;
    effectiveDueDate: DateStringNullable;
    groupId: number | null;
    id: number;
    membershipId: number | null;
    meta: MetaDataEntityId;
    origin: 'default' | 'routine' | 'bulk-job' | 'migration';
    personId: number;
};

export type FollowUpCreate = {
    color?: CtColor;
    description?: string | null;
    dueDate?: DateStringNullable;
    icon?: string;
    ownerId?: number | null;
    successGroupId?: number | null;
    successGroupMemberStatus?: MemberStatus | null;
    successGroupOfGroupTypeId?: number | null;
    successRoleId?: number | null;
    title: string;
};

export type FollowUpFilter = 'due-today' | 'due-after-today' | 'due-before-today' | 'due-unspecified' | 'done';

export type FollowUpInterval = {
    count: number;
    daysDiff: number;
    followUpId: number;
    id: number;
    info?: string;
};

export type FollowUpStatistics = {
    /**
     * Number of follow-ups already completed
     */
    countDone: number;
    /**
     * Number of pending follow-ups due after today
     */
    countDueAfterToday: number;
    /**
     * Number of pending follow-ups due before today (aka 'overdue')
     */
    countDueBeforeToday: number;
    /**
     * Number of pending follow-ups due today
     */
    countDueToday: number;
    /**
     * Number of pending follow-ups without due date
     */
    countDueUnspecified: number;
};

export type FurtherLink = FurtherLinkCreate & {
    id: number;
};

export type FurtherLinkCreate = {
    description: string | null;
    imageUrl: string | null;
    name: string;
    sortKey: number;
    url: string;
};

export type GetAllGroupMembersQueryParams = {
    allowed_chat_users_only?: boolean;
    allowed_chat_writers_only?: boolean;
    comment?: string;
    group_member_statuses?: Array<MemberStatus>;
    include?: Array<'tags' | 'aggregations'>;
    limit?: number;
    /**
     * A simple date in ISO format, e.g. '2022-10-19'
     */
    member_start_date_after?: string;
    /**
     * A simple date in ISO format, e.g. '2022-10-19'
     */
    member_start_date_before?: string;
    orderDirections?: Array<'ASC' | 'DESC'>;
    orderFields?: Array<string>;
    page?: number;
    personFields?: Array<string>;
    person_id?: Array<number>;
    query?: string;
    role_ids?: Array<number>;
};

/**
 * Permissions grouped by known modules and user-defined modules.
 */
export type GlobalPermissions = {
    churchcal?: {
        'admin church category': boolean;
        'admin group category': boolean;
        'admin personal category': boolean;
        'assistance mode': boolean;
        'create group category': boolean;
        'create personal category': boolean;
        'edit calendar entry template': Array<number>;
        'edit category': Array<number>;
        view: boolean;
        'view category': Array<number>;
    };
    churchcheckin?: {
        'create person': boolean;
        'edit masterdata': boolean;
        view: boolean;
    };
    churchcore?: {
        'administer church html templates': boolean;
        'administer custom modules'?: boolean;
        'administer persons': boolean;
        'administer settings': boolean;
        'edit languages': Array<number>;
        'edit public profiles': boolean;
        'edit translations masterdata': boolean;
        'edit website releases': boolean;
        'edit website staff': boolean;
        'invite persons': boolean;
        'login to external system': Array<number>;
        'simulate persons': boolean;
        'use church html templates': Array<number>;
        'use churchquery'?: boolean;
        'view logfile': boolean;
        'view website': boolean;
    };
    churchdb?: {
        'administer global filters': boolean;
        /**
         * @deprecated
         */
        'administer groups': boolean;
        'complex filter': boolean;
        /**
         * @deprecated
         */
        'create groups of grouptype': Array<number>;
        'create person': boolean;
        'create print labels': boolean;
        /**
         * @deprecated
         */
        'delete group': Array<number>;
        /**
         * @deprecated
         */
        'delete groups of grouptype': Array<number>;
        'delete persons': boolean;
        'edit bulkletter': boolean;
        /**
         * @deprecated
         */
        'edit group': Array<number>;
        'edit group memberships': boolean;
        /**
         * @deprecated
         */
        'edit group memberships of group': Array<number>;
        /**
         * @deprecated
         */
        'edit group memberships of grouptype': Array<number>;
        /**
         * @deprecated
         */
        'edit groups of grouptype': Array<number>;
        'edit masterdata': boolean;
        'edit relations': boolean;
        'export data': boolean;
        'push/pull archive': boolean;
        'security level edit own data': Array<number>;
        /**
         * @deprecated
         */
        'security level group': Array<number>;
        'security level person': Array<number>;
        'security level view own data': Array<number>;
        'send sms': boolean;
        view: boolean;
        'view alldata': Array<number>;
        'view archive': boolean;
        'view birthdaylist': boolean;
        'view comments': Array<number>;
        /**
         * @deprecated
         */
        'view group': Array<number>;
        /**
         * @deprecated
         */
        'view groups of grouptype': Array<number>;
        'view memberliste': boolean;
        'view person history': boolean;
        'view person tags': boolean;
        'view station': Array<number>;
        'view statistics': boolean;
        /**
         * @deprecated
         */
        'view tags': boolean;
        'write access': boolean;
    };
    churchgroup?: {
        'administer global views': boolean;
        'administer groups': boolean;
        'create groups of grouptype': Array<number>;
        'delete group': Array<number>;
        'delete groups of grouptype': Array<number>;
        'edit group': Array<number>;
        'edit group memberships of group': Array<number>;
        'edit group memberships of grouptype': Array<number>;
        'edit groups of grouptype': Array<number>;
        'edit masterdata': boolean;
        'security level group': Array<number>;
        view: boolean;
        'view group': Array<number>;
        'view group history': boolean;
        'view group tags': boolean;
        'view groups of grouptype': Array<number>;
    };
    churchreport?: {
        'edit masterdata': boolean;
        view: boolean;
        'view query': Array<number>;
    };
    churchresource?: {
        'administer bookings': Array<number>;
        'assistance mode': boolean;
        'create bookings': Array<number>;
        'create virtual bookings': boolean;
        'edit masterdata': boolean;
        view: boolean;
        'view resource': Array<number>;
    };
    churchservice?: {
        'edit agenda': Array<number>;
        'edit agenda templates': Array<number>;
        'edit events': Array<number>;
        'edit fact': Array<number>;
        'edit masterdata': boolean;
        'edit servicegroup': Array<number>;
        'edit songcategory': Array<number>;
        'edit template': boolean;
        'export facts': boolean;
        'manage absent': boolean;
        'use ccli': boolean;
        view: boolean;
        'view agenda': Array<number>;
        'view events': Array<number>;
        'view fact': Array<number>;
        'view history': boolean;
        'view servicegroup': Array<number>;
        'view song statistics': boolean;
        'view songcategory': Array<number>;
    };
    churchsync?: {
        view: boolean;
    };
    churchwiki?: {
        'edit category': Array<number>;
        'edit masterdata': boolean;
        view: boolean;
        'view category': Array<number>;
    };
    finance?: {
        'edit accounting period': Array<number>;
        'edit masterdata': boolean;
        view: boolean;
        'view accounting period': Array<number>;
    };
    post?: {
        'moderate posts': boolean;
    };
    [key: string]:
        | CustomModulePermission
        | {
              'admin church category': boolean;
              'admin group category': boolean;
              'admin personal category': boolean;
              'assistance mode': boolean;
              'create group category': boolean;
              'create personal category': boolean;
              'edit calendar entry template': Array<number>;
              'edit category': Array<number>;
              view: boolean;
              'view category': Array<number>;
          }
        | {
              'create person': boolean;
              'edit masterdata': boolean;
              view: boolean;
          }
        | {
              'administer church html templates': boolean;
              'administer custom modules'?: boolean;
              'administer persons': boolean;
              'administer settings': boolean;
              'edit languages': Array<number>;
              'edit public profiles': boolean;
              'edit translations masterdata': boolean;
              'edit website releases': boolean;
              'edit website staff': boolean;
              'invite persons': boolean;
              'login to external system': Array<number>;
              'simulate persons': boolean;
              'use church html templates': Array<number>;
              'use churchquery'?: boolean;
              'view logfile': boolean;
              'view website': boolean;
          }
        | {
              'administer global filters': boolean;
              /**
               * @deprecated
               */
              'administer groups': boolean;
              'complex filter': boolean;
              /**
               * @deprecated
               */
              'create groups of grouptype': Array<number>;
              'create person': boolean;
              'create print labels': boolean;
              /**
               * @deprecated
               */
              'delete group': Array<number>;
              /**
               * @deprecated
               */
              'delete groups of grouptype': Array<number>;
              'delete persons': boolean;
              'edit bulkletter': boolean;
              /**
               * @deprecated
               */
              'edit group': Array<number>;
              'edit group memberships': boolean;
              /**
               * @deprecated
               */
              'edit group memberships of group': Array<number>;
              /**
               * @deprecated
               */
              'edit group memberships of grouptype': Array<number>;
              /**
               * @deprecated
               */
              'edit groups of grouptype': Array<number>;
              'edit masterdata': boolean;
              'edit relations': boolean;
              'export data': boolean;
              'push/pull archive': boolean;
              'security level edit own data': Array<number>;
              /**
               * @deprecated
               */
              'security level group': Array<number>;
              'security level person': Array<number>;
              'security level view own data': Array<number>;
              'send sms': boolean;
              view: boolean;
              'view alldata': Array<number>;
              'view archive': boolean;
              'view birthdaylist': boolean;
              'view comments': Array<number>;
              /**
               * @deprecated
               */
              'view group': Array<number>;
              /**
               * @deprecated
               */
              'view groups of grouptype': Array<number>;
              'view memberliste': boolean;
              'view person history': boolean;
              'view person tags': boolean;
              'view station': Array<number>;
              'view statistics': boolean;
              /**
               * @deprecated
               */
              'view tags': boolean;
              'write access': boolean;
          }
        | {
              'administer global views': boolean;
              'administer groups': boolean;
              'create groups of grouptype': Array<number>;
              'delete group': Array<number>;
              'delete groups of grouptype': Array<number>;
              'edit group': Array<number>;
              'edit group memberships of group': Array<number>;
              'edit group memberships of grouptype': Array<number>;
              'edit groups of grouptype': Array<number>;
              'edit masterdata': boolean;
              'security level group': Array<number>;
              view: boolean;
              'view group': Array<number>;
              'view group history': boolean;
              'view group tags': boolean;
              'view groups of grouptype': Array<number>;
          }
        | {
              'edit masterdata': boolean;
              view: boolean;
              'view query': Array<number>;
          }
        | {
              'administer bookings': Array<number>;
              'assistance mode': boolean;
              'create bookings': Array<number>;
              'create virtual bookings': boolean;
              'edit masterdata': boolean;
              view: boolean;
              'view resource': Array<number>;
          }
        | {
              'edit agenda': Array<number>;
              'edit agenda templates': Array<number>;
              'edit events': Array<number>;
              'edit fact': Array<number>;
              'edit masterdata': boolean;
              'edit servicegroup': Array<number>;
              'edit songcategory': Array<number>;
              'edit template': boolean;
              'export facts': boolean;
              'manage absent': boolean;
              'use ccli': boolean;
              view: boolean;
              'view agenda': Array<number>;
              'view events': Array<number>;
              'view fact': Array<number>;
              'view history': boolean;
              'view servicegroup': Array<number>;
              'view song statistics': boolean;
              'view songcategory': Array<number>;
          }
        | {
              view: boolean;
          }
        | {
              'edit category': Array<number>;
              'edit masterdata': boolean;
              view: boolean;
              'view category': Array<number>;
          }
        | {
              'edit accounting period': Array<number>;
              'edit masterdata': boolean;
              view: boolean;
              'view accounting period': Array<number>;
          }
        | {
              'moderate posts': boolean;
          }
        | undefined;
};

/**
 * The group model structures all information in different objects: `information`, `settings`, `followUp`, and `roles`. Custom group fields are added to the root level of this model.
 */
export type Group = {
    followUp: {
        sendReminderMails?: boolean;
        targetGroupMemberStatusId?: number | null;
        targetObjectId?: number | null;
        targetTypeId?: number;
        typeId?: number | null;
    };
    guid: string;
    hasPermissions?: boolean;
    id: number;
    information: {
        ageGroupIds: Array<number>;
        campusId: number | null;
        chatStatus: ChatStatus;
        color: CtColor;
        dateOfFoundation: DateStringNullable;
        endDate: DateStringNullable;
        groupCategoryId: number | null;
        groupHomepageUrl: string | null;
        groupStatusId: number;
        groupTypeId: number;
        imageUrl: string | null;
        /**
         * Allowed maximal members
         */
        maxMembers: number | null;
        meetingTime: string | null;
        note: string;
        signUpOverrideRoleId: number | null;
        targetGroupId: number | null;
        /**
         * The number of the weekday. Starting with 0 = Sunday, 1 = Monday, ...
         */
        weekday: number | null;
    };
    memberStatistics?: {
        active: number;
        leaders: number;
        participants: number;
        requested: number;
        seatsTaken: number;
        to_delete: number;
        waiting: number;
    };
    meta: MetaDataEntityId;
    /**
     * @deprecated
     */
    modifiedDate?: string;
    /**
     * @deprecated
     */
    modifiedPerson?: {
        id: number;
    };
    name: string;
    permissions: {
        /**
         * Current user can start chat.
         */
        startChat: boolean;
        /**
         * Current user can use the chat.
         */
        useChat: boolean;
    };
    places?: Array<Address>;
    publicPostsStatistic?: {
        count: number;
        lastPostDate: ZuluDateNullable;
    };
    roles?: Array<GroupRole>;
    /**
     * You can see group fields up to this security level.
     */
    securityLevelForGroup: number;
    settings: {
        /**
         * Own children are listed as option during group sign up.
         */
        allowChildRegistration: boolean;
        /**
         * It is allowed to sign up other people uring group sign up.
         */
        allowOtherRegistration: boolean;
        /**
         * People with same eMail address are listed as option during group sign up.
         */
        allowSameEmailRegistration: boolean;
        /**
         * Spouse is listed as option during group sign up.
         */
        allowSpouseRegistration: boolean;
        /**
         * Waiting list is in-/active for this group.
         */
        allowWaitinglist: boolean;
        /**
         * If set (together with appointmentStartDate), the group is a signup group for the specified appointment
         */
        appointmentId: number | null;
        /**
         * If set (together with appointmentId), the group is a signup group for the specified appointment
         */
        appointmentStartDate: ZuluDateNullable;
        /**
         * Indicator if applications are accepted automatically.
         */
        autoAccept: boolean;
        /**
         * In combination with waiting list: People automatically move up in waiting list.
         */
        automaticMoveUp: boolean;
        /**
         * Default value for whether posts can be commented on.
         */
        defaultPostCommentsActive: boolean;
        defaultPostNotificationScope: PostNotificationScope;
        /**
         * Default placeholder text for entering post content.
         */
        defaultPostPlaceholderText: string | null;
        defaultPostVisibility: PostVisibility;
        /**
         * Rule set for dynamic group update.
         */
        dynamicGroupRuleSet: Array<DynamicGroupRule> | null;
        dynamicGroupStatus: DynamicGroupStatus;
        dynamicGroupUpdateFinished: ZuluDateNullable;
        dynamicGroupUpdateStarted: ZuluDateNullable;
        /**
         * Indicator if posts of this groups are featured to subscribe
         */
        externalPostSubscriptionsEnabled: boolean;
        groupMeeting: {
            /**
             * Automatically create group meetings.
             */
            autoCreate: boolean;
            /**
             * Template for group meetings.
             */
            templateId: number | null;
        };
        inStatistic: boolean;
        /**
         * Inform leader via e-mail about changes.
         */
        informLeader: boolean;
        isHidden: boolean;
        /**
         * Indicator if people can sign up for group membership.
         */
        isOpenForMembers: boolean;
        isPublic: boolean;
        /**
         * Campus, status, and department for newly created persons.
         */
        newMember: {
            campusId: number | null;
            departmentId: number | null;
            statusId: number | null;
        };
        postsEnabled: boolean;
        /**
         * QR Codes are sent to participants, which can be used during check-in
         */
        qrCodeCheckin: boolean;
        /**
         * QR Codes are not automatically sent via email
         */
        qrCodeCheckinAutomaticEmail: boolean;
        showStreet: boolean;
        signUpClosingDate: ZuluDateNullable;
        /**
         * Headline for group sign up.
         */
        signUpHeadline: string | null;
        signUpNotificationSentDate: ZuluDateNullable;
        signUpOpeningDate: ZuluDateNullable;
        visibility: GroupVisibility;
        /**
         * Maximum number of persons on waiting list.
         */
        waitinglistMaxPersons: number | null;
    };
    signupConditions?: {
        canContactLeader: boolean;
        canSignUp: boolean;
        canSignUpAsNewPerson: boolean;
        defaultRoleSetInGroup: boolean;
        endDateNotPassed: boolean;
        groupAllowsWaitinglist: boolean;
        groupHasLeader: boolean;
        groupHasSpaceForRequests: boolean;
        groupHasSpaceOnWaitinglist: boolean;
        groupIsActive: boolean;
        groupIsNotFull: boolean;
        groupIsNotHidden: boolean;
        groupIsOpenForMembers: boolean;
        groupIsPublic: boolean;
        groupVisibility: GroupVisibility;
        newPersonDepartmentIsSet: boolean;
        newPersonStationIsSet: boolean;
        newPersonStatusIsSet: boolean;
        signUpRoleSetInGroup: boolean;
    };
    tags?: Array<Tag>;
};

export type GroupCategory = GroupCategoryUpdate & {
    nameTranslated: string;
};

export type GroupCategoryCreate = {
    color: CtColor;
    description?: string | null;
    name: string;
    sortKey: number;
};

export type GroupCategoryUpdate = GroupCategoryCreate & {
    id: number;
};

/**
 * GroupHierarchy
 * The hierarchy of one group
 */
export type GroupHierarchy = {
    children: Array<number>;
    group: DomainObjectGroup;
    groupId: number;
    parents: Array<number>;
};

/**
 * GroupHomepage
 * The hierarchy of one group
 */
export type GroupHomepage = {
    /**
     * Type how groups are listed on the page.
     */
    defaultView?: 'tile' | 'minitile' | 'list';
    /**
     * The depth of the group hierarchy that should be displayed on the group homepage.
     */
    depth?: number;
    /**
     * @deprecated
     */
    filter?: unknown;
    /**
     * Specifies all filters that can be applied for this group homepage.
     */
    filters: Array<{
        show: boolean;
        type: 'weekday' | 'targetgroups' | 'agegroups' | 'groupcategory' | 'campus';
    }>;
    /**
     * Array of groups to be displayed on the group homepage.
     */
    groups: Array<PublicGroup>;
    /**
     * Group Homepage ID
     */
    id: number;
    /**
     * Wheather the group homepage is enabled. Clients should not display the group homepage if it is not enabled.
     */
    isEnabled: boolean;
    /**
     * Entity meta data
     */
    meta: {
        [key: string]: unknown;
    };
    /**
     * Group field to sort groups by.
     */
    orderBy?: 'name' | 'dateOfFoundation';
    /**
     * Direction if groups are sorted ascending or descending.
     */
    orderDirection?: 'ASC' | 'DESC';
    /**
     * ID of the parent group of all groups that should be displayed in the group homepage
     */
    parentGroup: number;
    /**
     * The group homepage identifier (same as provided as hash request parameter).
     */
    randomUrl: string;
    /**
     * @deprecated
     */
    showFilter?: unknown;
    /**
     * If true, selected filters are displayed.
     */
    showFilters: boolean;
    /**
     * If true, the group homepage is set to display group images.
     */
    showGroupImages: boolean;
    /**
     * @deprecated
     */
    showLeader?: unknown;
    /**
     * If true, the group homepage is set to display the leaders of each group.
     */
    showLeaders: boolean;
    /**
     * If true, the group homepage is set to display an overview map of all groups.
     */
    showMap: boolean;
    /**
     * Use 'orderBy' instead.
     * @deprecated
     */
    sortBy?: unknown;
};

export type GroupMeeting = {
    /**
     * Map of person IDs to attendance status
     */
    attendances?: {
        [key: string]: GroupMeetingAttendance;
    };
    comment?: string | null;
    /**
     * @deprecated
     */
    dateFrom?: ZuluDate;
    /**
     * @deprecated
     */
    dateTo?: ZuluDate;
    /**
     * End of the group meeting
     */
    endDate: ZuluDate;
    groupId: number;
    hasEditingStarted?: boolean;
    id: number;
    isCanceled?: boolean;
    isCompleted?: boolean;
    meta: MetaDataModifiedId;
    numGuests?: number | null;
    pollResult?: Array<MeetingTemplateField> | null;
    /**
     * Start of the group meeting
     */
    startDate: ZuluDate;
    statistics: {
        absent?: number;
        'not-in-group'?: number;
        present?: number;
        unsure?: number;
    };
};

export type GroupMeetingAttendance = 'absent' | 'not-in-group' | 'present' | 'unsure';

export type GroupMeetingMember = {
    isCheckedIn: boolean;
    member: GroupMember | null;
    personId: number;
    status: GroupMeetingAttendance;
};

export type GroupMeetingsStatistics = {
    canceled: number;
    completed: number;
    completedAndNotCanceled: number;
    notCanceled: number;
    notCompleted: number;
    notCompletedAndNotCanceledAndInFuture: number;
    notCompletedAndNotCanceledAndInPast: number;
    total: number;
};

export type GroupMember = {
    comment?: string | null;
    fields?: Array<{
        [key: string]: unknown;
    }>;
    followUpDiffDays: number | null;
    followUpStep: number | null;
    followUpUnsuccessfulBackGroupId: number | null;
    group: DomainObjectGroup;
    groupMemberStatus: MemberStatus;
    groupTypeRoleId: number;
    memberEndDate?: DateStringNullable;
    memberStartDate: ZuluDateNullable;
    person: DomainObjectPerson;
    personFields?: Array<{
        [key: string]: unknown;
    }>;
    /**
     * use person.domainIdentifier (type: string) instead.
     * @deprecated
     */
    personId: number;
    registeredBy: number | null;
    tags?: Array<Tag>;
    waitinglistPosition: number | null;
};

export type GroupMemberAggregations = {
    [key: string]: {
        average: number;
        max: number;
        min: number;
        sum: number;
    };
};

export type GroupMemberExportConfig = {
    pinned: Array<{
        key: string;
    }>;
    unpinned: Array<{
        key: string;
    }>;
    version: 10;
};

export type GroupMemberField =
    | {
          field: GroupMemberFieldPerson;
          type: 'person';
      }
    | {
          field: GroupMemberFieldGroup;
          type: 'group';
      };

export type GroupMemberFieldGroup = GroupMemberFieldGroupCreate & {
    groupId: number;
    id: number;
};

/**
 * GroupMemberField
 */
export type GroupMemberFieldGroupCreate = {
    defaultValue: string;
    /**
     * @deprecated
     */
    fieldName: string;
    fieldTypeCode: FieldTypeCode;
    fieldTypeId: number;
    maxLength: number;
    name: string;
    nameInSignupForm: string | null;
    note: string | null;
    noteInSignupForm: string | null;
    options: Array<{
        id: string;
        name: string;
    }>;
    referenceName: string;
    requiredInRegistrationForm: boolean;
    securityLevel: number;
    sortKey: number;
    useInRegistrationForm: boolean;
};

export type GroupMemberFieldPerson = GroupMemberFieldPersonCreate & {
    groupId: number;
    id: number;
};

export type GroupMemberFieldPersonCreate = {
    dbField: DbField;
    requiredInRegistrationForm: boolean;
    sortKey: number;
};

export type GroupMemberHistoryEntry = {
    current: {
        comment?: string;
        endDate?: DateString;
        fields?: {
            [key: string]: unknown;
        };
        memberRoleId: number;
        membershipStatus?: MemberStatus;
        startDate?: DateString;
    };
    groupId: number;
    id: number;
    memberId: number;
    meta: MetaDataCreatedId;
    origin?:
        | 'automatic'
        | 'bulk-job'
        | 'check-in'
        | 'cron'
        | 'default'
        | 'duplicate-group'
        | 'follow-up'
        | 'group-creation'
        | 'person-deletion'
        | 'routine'
        | 'self-registration'
        | 'sign-up'
        | 'waitinglist';
    previous: {
        comment?: string;
        endDate?: DateString;
        fields?: {
            [key: string]: unknown;
        };
        memberRoleId: number;
        membershipStatus?: MemberStatus;
        startDate?: DateString;
    };
};

export type GroupMemberShort = {
    groupId?: number;
    groupMemberStatus?: string;
    groupTypeRoleId?: number;
    lastChange?: string;
    personId?: number;
};

export type GroupMembershipRoutine = {
    groupId: number;
    groupMemberStatus: MemberStatus;
    groupTypeRoleId: number;
    id: number;
    routine: Routine;
};

export type GroupPostStatistics = {
    group_intern: number;
    group_visible: number;
};

export type GroupQrCodeCheckin = {
    domainId: number;
    domainType: 'group';
    downloadedDate: ZuluDateNullable;
    expiryDate: ZuluDateNullable;
    isQueued: boolean;
    personId: number;
    sentDate: ZuluDateNullable;
    token: string;
    usedDate: ZuluDateNullable;
};

export type GroupRole = Role & {
    canReadChat: boolean;
    canWriteChat: boolean;
    countsTowardsSeats: boolean;
    forceTwoFactorAuth: boolean;
    groupTypeRoleId: number;
    htmlTemplateIds?: Array<number> | null;
    isActive: boolean;
    receiveQRCode: boolean;
};

export type GroupRoleUpdate = {
    canReadChat?: boolean;
    canWriteChat?: boolean;
    countsTowardsSeats?: boolean;
    forceTwoFactorAuth?: boolean;
    growPathId?: number | null;
    htmlTemplateIds?: Array<number>;
    isActive?: boolean;
    receiveQRCode?: boolean;
};

/**
 * Calculated facts about one group.
 */
export type GroupStatistics = {
    /**
     * The keys are of format xx:yy where xx is a group type role id and yy is a group member status
     */
    members: {
        [key: string]: {
            count: number;
            key: string;
        };
    };
    unfiltered: {
        /**
         * Count of all members (excluding hidden roles and to delete)
         */
        allPlaces: number;
        /**
         * Count of free places in group
         */
        freePlaces: number | null;
        /**
         * Count of requested places
         */
        requestedPlaces: number;
        /**
         * Count of taken places in group
         */
        takenPlaces: number;
        /**
         * Count of people on waiting list
         */
        waitinglistPlaces: number;
    };
};

export type GroupStatus = {
    id: number;
    name: 'active' | 'pending' | 'archived' | 'finished';
    nameTranslated: string;
    sortKey: number;
};

export type GroupType = GroupTypeUpdate & {
    namePluralTranslated?: string;
    nameTranslated?: string;
};

export type GroupTypeCreate = {
    availableForNewPerson: boolean;
    color: CtColor;
    description?: string;
    isLeaderNecessary: boolean;
    name: string;
    namePlural: string;
    permissionDepth: number;
    postsEnabled: boolean;
    shorty: string;
    sortKey: number;
};

export type GroupTypeUpdate = GroupTypeCreate & {
    id: number;
};

/**
 * The visibility of a group.
 */
export type GroupVisibility = 'hidden' | 'intern' | 'restricted' | 'public';

export type GroupedGroups = {
    groupedBy:
        | 'campus'
        | 'groupCategory'
        | 'groupType'
        | 'groupStatus'
        | 'targetGroup'
        | 'ageGroup'
        | 'visibility'
        | 'isOpenForMembers';
    groupedGroups: {
        [key: string]: {
            all: number;
            groupPreviews: Array<DomainObjectGroup>;
            key: string;
        };
    };
};

export type GrowPath = {
    color: string;
    id: number;
    name: string;
    nameTranslated: string;
    sortKey: number;
};

export type HtmlTemplate = {
    domainType: HtmlTemplateDomainType;
    htmlFileId: number;
    id: number;
    isGlobal: boolean;
    mjmlFileId?: number;
    name: string;
    owner: DomainObjectPerson;
    usedByAutomaticEmails: boolean;
};

export type HtmlTemplateDomainType =
    | 'email'
    | 'bulkletter'
    | 'groupmember-document'
    | 'donation-receipt-letter'
    | 'donation-receipt-attachment';

export type HtmlTemplateInfo = {
    id?: number;
    name?: string;
};

export type Image = {
    additionalInfos: Array<string>;
    domainId: string;
    domainType: string;
    fileUrl: string;
    filename: string;
    id: number;
    imageOption: {
        crop?: {
            bottom?: string;
            left?: string;
            right?: string;
            top?: string;
        };
        focus?: {
            x?: string;
            y?: string;
        };
    };
    imageUrl: string;
    meta: MetaDataEntityId;
    name: string;
    relativeUrl: string;
    securityLevelId: number | null;
    showOnlyWhenEditable: boolean;
    size: number | null;
    type: string;
};

export type InternalGroupPermissions = {
    /**
     * Group Internal Permission, which Affect a Person
     */
    churchdb: {
        '+add person'?: boolean;
        '+admin automatic emails'?: boolean;
        '+admin followup'?: boolean;
        '+admin group chat'?: boolean;
        /**
         * @deprecated
         */
        '+admin group fields'?: boolean;
        '+admin group member fields'?: boolean;
        '+admin meetings'?: boolean;
        '+admin posts'?: boolean;
        '+create group'?: boolean;
        '+create notes'?: boolean;
        '+create post group intern'?: boolean;
        '+create post group visible'?: boolean;
        '+do followup'?: boolean;
        '+do group meeting'?: boolean;
        '+edit basic group memberships'?: boolean;
        '+edit group basic settings'?: boolean;
        '+edit group hierarchy'?: boolean;
        '+edit group infos'?: boolean;
        '+edit group member fields'?: number;
        /**
         * @deprecated
         */
        '+edit group memberships'?: boolean;
        '+edit own group member fields'?: number;
        /**
         * @deprecated
         */
        '+edit own groupmemberfields'?: boolean;
        '+edit person fields of group members'?: number;
        /**
         * @deprecated
         */
        '+edit persons'?: boolean;
        '+export group members'?: boolean;
        '+get emails'?: boolean;
        '+invite person'?: boolean;
        '+mail group members'?: boolean;
        '+remove from group'?: boolean;
        '+see group'?: number;
        '+see group member fields'?: number;
        '+see group tags'?: boolean;
        /**
         * @deprecated
         */
        '+see groupmemberfields'?: number;
        '+see hidden group'?: boolean;
        '+see own group member fields'?: number;
        '+see persons'?: number;
        '+see tags'?: boolean;
        '+view history'?: boolean;
    };
};

export type InvitationStatus = 'not_invited' | 'accepted' | 'pending';

/**
 * Job
 */
export type Job = {
    createdDate?: string;
    domainId?: string;
    domainType?: string;
    identifier?: string;
    modifiedDate?: string;
    name?: string;
    status?: string;
};

/**
 * JobConfiguration
 */
export type JobConfiguration = {
    autoScheduleEnabled: boolean;
    createBehaviorES?: string;
    createBehaviorMaster?: string;
    createDefaultsES?: {
        [key: string]: unknown;
    };
    createDefaultsMaster?: {
        [key: string]: unknown;
    };
    deleteBehaviorES?: string;
    deleteBehaviorMaster?: string;
    domainType: string;
    externalSystemId: number;
    id?: number;
    linkBehavior?: string;
    linkData?: string;
    name: string;
    updateBehavior?: string;
    updateData?: string;
};

/**
 * JobConfigurationReturn
 */
export type JobConfigurationReturn = {
    autoScheduleEnabled: boolean;
    createBehaviorES?: string;
    createBehaviorMaster?: string;
    createDefaultsES?: {
        [key: string]: unknown;
    };
    createDefaultsMaster?: {
        [key: string]: unknown;
    };
    deleteBehaviorES?: string;
    deleteBehaviorMaster?: string;
    domainType: string;
    externalSystem?: ExternalSystemReturn;
    id?: number;
    linkBehavior?: string;
    linkData?: string;
    name: string;
    updateBehavior?: string;
    updateData?: string;
};

export type JobGroupStatus = {
    jobs: {
        /**
         * Number of Buried Jobs
         */
        buried: number;
        /**
         * Number of Deleted Jobs (but still in Queue listed)
         */
        deleted: number;
        /**
         * Number of Pending Jobs
         */
        pending: number;
        /**
         * Number of Running Jobs
         */
        running: number;
    };
    /**
     * Name of Job Group. `__single__` is For Jobs Which don't Belong to a Group
     */
    name: string;
    /**
     * Total Jobs in Queue of This Job Group
     */
    total: number;
};

export type Language = {
    code: LanguageCode;
    id: number;
    isActive: boolean;
    name: string;
    sortKey: number;
};

/**
 * The language code is a two-letter code that represents the language. For example, "en" for English, "de" for German, and "fr" for French.
 */
export type LanguageCode = 'de' | 'en' | 'fr' | 'es' | 'cn' | 'tw' | 'fa' | 'pt' | 'ru' | 'nl' | 'pl' | 'it' | 'fi';

export type Linking = LinkingOpenGraph;

export type LinkingBase = {
    fetchStatus: 'timeout-short' | 'http-error' | 'success';
    url: string;
};

export type LinkingOpenGraph = LinkingBase & {
    data: {
        article?: OpenGraphArticle;
        audios?: Array<OpenGraphAudio>;
        book?: OpenGraphBook;
        /**
         * A brief description of the OpenGraph content.
         */
        description?: string;
        /**
         * The determiner for the noun in the content.
         */
        determiner?: string;
        images?: Array<OpenGraphImage>;
        /**
         * The locale of the OpenGraph object.
         */
        locale?: string;
        /**
         * Alternate locales available.
         */
        localesAlternate?: Array<string>;
        music?: OpenGraphMusic;
        profile?: OpenGraphProfile;
        /**
         * The site name of the OpenGraph object.
         */
        siteName?: string;
        /**
         * The title of the OpenGraph object.
         */
        title?: string;
        /**
         * The type of OpenGraph object.
         */
        type?: string;
        /**
         * The URL of the OpenGraph object.
         */
        url?: string;
        videos?: Array<OpenGraphVideo>;
    } | null;
    linkingType: 'opengraph';
};

/**
 * Log
 * ChurchTools writes log messages for many events and changes. This can be an update for a person or the deletion of an event. You can use the log to debug your system and follow error messages. This is a versitile tool.
 */
export type Log = {
    /**
     * Timestamp of log
     */
    date?: string;
    /**
     * Analog to the domain type, the ID is the explicit resource.
     */
    domainId?: number;
    /**
     * The domain type tells us, where in ChurchTools the action was performed.
     */
    domainType?: string;
    id?: number;
    /**
     * The log level indicates the importance. 1 = Warning, 2 = Notice, 3 = Info.
     */
    level?: number;
    message?: string;
    /**
     * If the person ID is `-1`, that means, no person but the system itself has logged that message.
     */
    personId?: number;
    /**
     * If a person is simulated by an administrator, we log the personId as well. This makes it possible to see if a person did the action or an admin, who simulated that person.
     */
    simultePersonId?: number | null;
};

export type MeetingRequest = {
    accepted?: boolean | null;
    appointment?: AppointmentBase;
    appointmentId?: number;
    eventDate?: ZuluDate;
    id?: number;
    mailSendDate?: ZuluDateNullable;
    meta?: MetaDataEntityId;
    nextEndDate?: ZuluDate;
    nextStartDate?: ZuluDate;
    person?: DomainObjectPerson;
    responseDate?: ZuluDateNullable;
};

export type MeetingTemplate = MeetingTemplateUpdate;

export type MeetingTemplateCreate = {
    name: string;
    template: Array<MeetingTemplateField>;
};

export type MeetingTemplateField = {
    label: string;
    options?: string | Array<string> | null;
    type: 'color' | 'textarea' | 'caption' | 'input' | 'checkbox' | 'select';
    value?: string | null;
};

export type MeetingTemplateUpdate = MeetingTemplateCreate & {
    id: number;
};

export type MemberPreview = {
    members: Array<{
        comment?: string | null;
        followUpDiffDays: number | null;
        followUpStep: number | null;
        followUpUnsuccessfulBackGroupId: number | null;
        group: DomainObjectGroup;
        groupMemberStatus: MemberStatus;
        memberEndDate?: DateStringNullable;
        memberStartDate: DateString;
        person: DomainObjectPerson;
        role: Role;
    }>;
    role: Role;
};

export type MemberStatus = 'active' | 'requested' | 'to_delete' | 'waiting';

export type MembershipNew = {
    comment?: string | null;
    /**
     * Group member fields as key value pairs, where the key is the ID of the field to be set.
     */
    fields?: {
        [key: string]: unknown;
    } | null;
    groupMemberStatus?: 'active' | 'requested' | 'to_delete' | 'waiting';
    groupTypeRoleId?: number | null;
    ignoreGroupFull?: boolean | null;
    informLeader?: boolean | null;
    memberEndDate?: DateStringNullable;
    /**
     * Defaults to the current date for an active membership, `null` otherwise.
     */
    memberStartDate?: DateStringNullable;
    only_add?: boolean | null;
    waitinglistPosition?: number | null;
};

export type MembershipUpdate = {
    comment?: string | null;
    /**
     * Group member fields as key value pairs, where the key is the ID of the field to be set.
     */
    fields?: {
        [key: string]: unknown;
    } | null;
    groupMemberStatus?: 'active' | 'requested' | 'to_delete' | 'waiting';
    groupTypeRoleId?: number;
    informLeader?: boolean;
    memberEndDate?: DateStringNullable;
    /**
     * Must be set for an active membership, optional otherwise.
     */
    memberStartDate?: DateStringNullable;
    waitinglistPosition?: number | null;
};

export type MetaCount = {
    count?: number;
};

export type MetaDataCreatedId = {
    createdDate: ZuluDate;
    createdPerson: {
        id: number;
    };
};

export type MetaDataEntityId = {
    createdDate: ZuluDate;
    createdPerson: {
        id: number;
    };
    modifiedDate?: ZuluDate;
    modifiedPerson?: {
        id: number;
    };
};

export type MetaDataEntityIdNullable = {
    createdDate?: ZuluDate;
    createdPerson?: {
        id?: number;
    };
    modifiedDate?: ZuluDate;
    modifiedPerson?: {
        id?: number;
    };
} | null;

export type MetaDataEntityPerson = {
    createdDate: ZuluDate;
    createdPerson: DomainObjectPerson | null;
    modifiedDate: ZuluDate;
    modifiedPerson: DomainObjectPerson | null;
};

export type MetaDataModifiedId = {
    modifiedDate?: ZuluDate;
    modifiedPerson?: {
        id?: number;
    };
};

export type MetaModified = {
    modifiedDate?: ZuluDate;
    modifiedPid?: number;
};

export type MetaPagination = {
    all?: number;
    count?: number;
    pagination?: {
        current?: number;
        lastPage?: number;
        limit?: number;
        total?: number;
    };
};

export type MovementState = 'open' | 'booked' | 'ignored';

export type MovementSuggestion = {
    bills: Array<unknown>;
    confidence: number;
    id: number;
    name: string;
    reason: string;
    userOverwrite: boolean;
    value: string;
};

export type Note = NoteCreateOrUpdate &
    NoteDomainObjectLink & {
        id: number;
        links: {
            follow_up?: NoteDomainObjectLink;
            group?: NoteDomainObjectLink;
            person?: NoteDomainObjectLink;
            song_arrangement?: NoteDomainObjectLink;
        };
        meta: MetaDataEntityPerson;
        text: string;
    };

export type NoteCreateOrUpdate = {
    commentViewerId?: number | null;
    securityLevelId: number | null;
    text: string;
};

export type NoteDomainObjectLink = {
    commentViewerId: number | null;
    domainId: number;
    domainType: NoteDomainType;
    securityLevelId: number | null;
};

/**
 * Domain types that notes can be used with
 */
export type NoteDomainType = 'follow_up' | 'group' | 'person' | 'song_arrangement';

export type OAuthClient = {
    identifier: string;
    isConfidential: boolean;
    name: string;
    redirectUri: string;
};

export type OpenGraphActor = {
    /**
     * The URL or an identifier for the actor's profile.
     */
    profile?: string;
    /**
     * The role played by the actor.
     */
    role?: string;
};

export type OpenGraphAlbum = {
    disc?: number;
    /**
     * The URL of the album.
     */
    url?: string;
};

export type OpenGraphArticle = {
    /**
     * The authors of the article.
     */
    authors?: Array<string>;
    /**
     * The expiration time of the article.
     */
    expirationTime?: string;
    /**
     * The last modified time of the article.
     */
    modifiedTime?: string;
    /**
     * The publication time of the article.
     */
    publishedTime?: string;
    /**
     * The section of the website where the article is located.
     */
    section?: string;
    /**
     * Tags associated with the article.
     */
    tags?: Array<string>;
};

export type OpenGraphAudio = {
    /**
     * The secure URL of the audio.
     */
    secureUrl?: string;
    /**
     * The MIME type of the audio.
     */
    type?: string;
    /**
     * The URL of the audio.
     */
    url?: string;
};

export type OpenGraphBook = {
    /**
     * The authors of the book.
     */
    authors?: Array<string>;
    /**
     * The International Standard Book Number of the book.
     */
    isbn?: string;
    /**
     * The release date of the book.
     */
    releaseDate?: string;
    /**
     * Tags associated with the book.
     */
    tags?: Array<string>;
};

export type OpenGraphImage = {
    /**
     * The height of the image in pixels.
     */
    height?: number;
    /**
     * The secure URL of the image.
     */
    secureUrl?: string;
    /**
     * The MIME type of the image.
     */
    type?: string;
    /**
     * The URL of the image.
     */
    url?: string;
    /**
     * The width of the image in pixels.
     */
    width?: number;
};

export type OpenGraphMusic = {
    album?: OpenGraphAlbum;
    /**
     * The creators of the music.
     */
    creators?: Array<string>;
    /**
     * The duration of the music in seconds.
     */
    duration?: number;
    /**
     * The musicians involved in the music.
     */
    musicians?: Array<string>;
    /**
     * The release date of the music.
     */
    releaseDate?: string;
    songs?: Array<OpenGraphSong>;
};

export type OpenGraphProfile = {
    /**
     * The first name of the individual.
     */
    firstName?: string;
    /**
     * The gender of the individual.
     */
    gender?: string;
    /**
     * The last name of the individual.
     */
    lastName?: string;
    /**
     * The username of the individual on the platform.
     */
    username?: string;
};

/**
 * A model representing a song in the OpenGraph data structure.
 */
export type OpenGraphSong = {
    /**
     * The disc number on which the song appears, applicable for albums with multiple discs.
     */
    disc?: number;
    /**
     * The track number of the song on its disc.
     */
    track?: number;
    /**
     * The URL where the song can be accessed.
     */
    url?: string;
};

export type OpenGraphVideo = {
    actors?: Array<OpenGraphActor>;
    directors?: Array<string>;
    /**
     * The duration of the video in seconds.
     */
    duration?: number;
    /**
     * The height of the video in pixels.
     */
    height?: number;
    /**
     * The release date of the video.
     */
    releaseDate?: string;
    /**
     * The secure URL of the video.
     */
    secureUrl?: string;
    /**
     * Tags associated with the video.
     */
    tags?: Array<string>;
    /**
     * The MIME type of the video.
     */
    type?: string;
    /**
     * The URL of the video.
     */
    url?: string;
    /**
     * The width of the video in pixels.
     */
    width?: number;
    writers?: Array<string>;
};

export type OrderStatus =
    | 'Auftrag'
    | 'Finder'
    | 'FinderCombo'
    | 'WebsiteCombo'
    | 'Testphase'
    | 'Entscheidung'
    | 'Bedenkzeit'
    | 'Mitarbeiter'
    | 'zu löschen'
    | 'Vorlage/Schulung/Test'
    | 'Unbekannt';

export type Permission = {
    authId?: number;
    dataId?: number | null;
    domainId?: number;
    domainType?: 'status' | 'group_type_role' | 'group_role' | 'person';
    isInherited?: boolean;
    meta?: MetaDataModifiedId;
    reason?: string | null;
    type?: 'grant' | 'revoke';
};

/**
 * A person object includes all fields the logged in user may see depending on the security level. Additional DB fields, created by the admin, are also part of the response. Those fields have the same name as the column name.
 */
export type Person = {
    acceptedsecurity?: DateStringNullable;
    addressAddition?: string;
    /**
     * This computed field contains the age of this person if the date of birth is visible. If this person already dead, the age is calculated until the date of death.
     */
    age?: number;
    baptisedBy?: string;
    birthName?: string;
    birthday?: DateStringNullable;
    birthplace?: string;
    campusId?: number;
    canChat?: boolean;
    chatActive?: boolean;
    city?: string;
    cmsUserId?: string;
    country?: string;
    dateOfBaptism?: DateStringNullable;
    dateOfBelonging?: DateStringNullable;
    dateOfDeath?: DateStringNullable;
    dateOfEntry?: DateTimeStringNullable;
    dateOfResign?: DateTimeStringNullable;
    /**
     * List of department IDs
     */
    departmentIds?: Array<number>;
    /**
     * Edit security level of the current person. The user can edit fields upto this level.
     */
    editSecurityLevelForPerson: number;
    /**
     * Primary email address of the person.
     */
    email?: string;
    emails?: Array<{
        contactLabelId: number;
        email: string;
        isDefault: boolean;
    }>;
    familyImageUrl?: string | null;
    familyStatusId?: number | null;
    fax?: string;
    firstContact?: DateTimeStringNullable;
    firstName?: string;
    growPathId?: number;
    guid: string;
    id: number;
    imageUrl?: string | null;
    invitationStatus?: InvitationStatus | null;
    isArchived?: boolean;
    /**
     * This computed field is true iff a date of death is set for this person.
     */
    isDead?: boolean;
    job?: string;
    lastEditedDate?: ZuluDateNullable;
    lastLogin?: ZuluDateNullable;
    lastName?: string;
    latitude?: number | null;
    latitudeLoose?: number | null;
    longitude?: number | null;
    longitudeLoose?: number | null;
    meta?: MetaDataEntityId;
    mobile?: string;
    nationalityId?: number | null;
    nickname?: string;
    /**
     * String with Optigem ID or empty string if no ID is set.
     */
    optigemId?: string;
    phonePrivate?: string;
    phoneWork?: string;
    placeOfBaptism?: string;
    /**
     * @deprecated
     */
    privacyPolicyAgreement?: {
        date: DateStringNullable;
        typeId: number | null;
        whoId: number | null;
    };
    privacyPolicyAgreementDate?: DateStringNullable;
    privacyPolicyAgreementTypeId?: number | null;
    privacyPolicyAgreementWhoId?: number | null;
    referredBy?: string;
    referredTo?: string;
    /**
     * Security level of the current person. The user sees fields upto this level.
     */
    securityLevelForPerson: number;
    sexId?: number | null;
    statusId?: number;
    street?: string;
    tags?: Array<Tag>;
    title?: string;
    weddingDate?: DateStringNullable;
    zip?: string;
};

export type PersonDuplicate = {
    key: string;
    p1: {
        id: number;
    };
    p2: {
        id: number;
    };
    relationshipId?: string;
};

/**
 * PersonEmail
 */
export type PersonEmail = {
    contactLabelId?: number;
    email?: string;
    /**
     * Marks the default eMail address.
     */
    isDefault?: boolean;
};

export type PersonMasterData = {
    ageGroups?: Array<AgeGroup>;
    campuses?: Array<Campus>;
    commentViewers?: Array<CommentViewer>;
    contactLabels?: Array<ContactLabel>;
    departments?: Array<Department>;
    followUpIntervals?: Array<FollowUpInterval>;
    followUps?: Array<FollowUp>;
    groupCategories?: Array<GroupCategory>;
    groupMeetingTemplates?: Array<MeetingTemplate>;
    groupStatuses?: Array<GroupStatus>;
    groupTypes?: Array<GroupType>;
    growPaths?: Array<GrowPath>;
    relationshipTypes?: Array<RelationshipType>;
    roles?: Array<Role>;
    sexes?: Array<Sex>;
    statuses?: Array<Status>;
    targetGroups?: Array<TargetGroup>;
};

export type PersonPostStatistics = {
    countBanned: number;
    countExpirationFuture: number;
    countExpirationPast: number;
    countPublicationFuture: number;
    countPublished: number;
    /**
     * @deprecated
     */
    total?: number;
};

export type PersonPostsFilterParam =
    | 'publication_future'
    | 'expiration_future'
    | 'expiration_past'
    | 'published'
    | 'banned';

export type PersonPrivacyPolicy = {
    owner: {
        accepted: boolean;
        acceptedDate?: ZuluDate;
        acceptedType: string;
        acceptedWho?: number;
        age: number;
        allowedToAccept: boolean;
        editBirthday: boolean;
        firstName: string;
        id: number;
        imageUrl: string;
        lastName: string;
    };
    relationships: Array<{
        accepted: boolean;
        acceptedDate?: string;
        acceptedType: string;
        acceptedWho?: number;
        age: number;
        allowedToAccept: boolean;
        allowedToDecline: boolean;
        editBirthday: boolean;
        firstName: string;
        guid: string;
        id: number;
        image?: string;
        lastName: string;
        relationshipType?: {
            degreeOfRelationship: string;
            relationshipName: string;
            relationshipTypeId: number;
        };
    }>;
    showBanner: boolean;
    text: string;
    textRelations: string;
    typeId: number;
    whoId: number;
};

export type PersonProperties = {
    canChat: boolean;
    hasEmail: boolean;
    imageUrl: string | null;
    invitationStatus: InvitationStatus;
    isArchived: boolean;
    isDead: boolean;
    isSamlUser: boolean;
};

/**
 * personRelationship
 * Relationship information of a person. Notice, that a relationship has a security level. That means you only see those relationships, you are allowed to see.
 */
export type PersonRelationship = {
    /**
     * Name of type, what this relative is for the user.
     */
    degreeOfRelationship: string;
    /**
     * ID of the relationship
     */
    id: number;
    /**
     * Name of Relationship
     */
    relationshipName: string;
    /**
     * ID of relationship type
     */
    relationshipTypeId: number;
    relative: DomainObjectPerson;
};

/**
 * Piece of meta information about a person, like is this person using two factor authentication or does she want service remind mails.
 */
export type PersonSetting = {
    attribute?: string;
    module?:
        | 'churchcore'
        | 'churchdb'
        | 'finance'
        | 'global'
        | 'churchservice'
        | 'churchreport'
        | 'churchresource'
        | 'churchhome'
        | 'churchcheckin'
        | 'churchcal'
        | 'churchauth'
        | 'churchfinance'
        | 'post';
    /**
     * Mixed content. Each setting has its own type.
     */
    value?:
        | string
        | number
        | Array<unknown>
        | {
              [key: string]: unknown;
          }
        | boolean;
};

/**
 * Fields applicable to upate a person
 */
export type PersonUpdateable = {
    addressAddition?: string;
    age?: number;
    baptisedBy?: string;
    birthName?: string;
    birthday?: string | null;
    birthplace?: string;
    campusId?: number;
    city?: string;
    cmsUserId?: string;
    country?: string;
    dateOfBaptism?: string | null;
    dateOfBelonging?: string | null;
    dateOfDeath?: string | null;
    dateOfEntry?: string | null;
    dateOfResign?: string | null;
    /**
     * Department IDs. At least one department MUST be set for a person. The last department ID cannot be deleted.
     */
    departmentIds?: Array<number>;
    email?: string;
    /**
     * Save many eMail addresses for person. If `emails` is present in request `email` is ignored.
     */
    emails?: Array<PersonEmail>;
    familyStatusId?: number | null;
    fax?: string;
    firstContact?: string | null;
    firstName?: string;
    growPathId?: number;
    job?: string;
    lastName?: string;
    mobile?: string;
    nationalityId?: number | null;
    nickname?: string;
    optigemId?: string;
    phonePrivate?: string;
    phoneWork?: string;
    placeOfBaptism?: string;
    /**
     * This object can be optional or required. Depending on your ChurchTools data security settings.
     */
    privacyPolicyAgreement?: {
        date?: string | null;
        typeId?: number | null;
        whoId?: number | null;
    };
    referredBy?: string;
    referredTo?: string;
    sexId?: number | null;
    statusId?: number;
    street?: string;
    title?: string;
    weddingDate?: string | null;
    zip?: string;
};

/**
 * Place wehre e.g. a group meeting takes place
 */
export type Place = PlaceCreate & {
    id: number;
    meta: MetaDataEntityId;
};

export type PlaceCreate = {
    /**
     * City
     */
    city?: string | null;
    /**
     * Disctrict
     */
    district?: string | null;
    /**
     * Latitude
     */
    geoLat?: string | null;
    /**
     * Longitude
     */
    geoLng?: string | null;
    markerColor?: CtColor | 'parent' | 'default';
    markerIcon?: string;
    /**
     * url for the marker icon
     * @deprecated
     */
    markerUrl?: string | null;
    /**
     * Name of the place or the person living there
     */
    name?: string | null;
    /**
     * Zip code of the place
     */
    postalcode?: string | null;
    /**
     * Street
     */
    street?: string | null;
};

export type PossibleEventPerson = {
    absences: Array<Absence>;
    connectedGroups: Array<DomainObjectGroup>;
    lastService: {
        event: DomainObjectEvent;
        eventService: ServiceOfPerson;
    } | null;
    monthlyUtilization: {
        [key: string]: number;
    };
    nextService: {
        event: DomainObjectEvent;
        eventService: ServiceOfPerson;
    } | null;
    partnerServices: boolean;
    person: DomainObjectPerson;
    score: number;
    scoreHints: Array<{
        reason: string;
        score: number;
    }>;
    serviceGroupPreferences: {
        maxPerMonth: number;
        modifiedDate: ZuluDate;
        modifiedPerson: {
            id: number;
        };
        morningWeight: number;
        personId: number;
        relationWeight: number;
        serviceGroupId: number;
    } | null;
    serviceOnSameDay: boolean;
    servicesOnSameDay: Array<{
        event: DomainObjectEvent;
        eventService: ServiceOfPerson;
    }>;
};

export type PossiblePostGroup = {
    favoriteGroup: boolean;
    featuredGroup: boolean;
    group: DomainObjectGroup;
    roleName: string;
    type: 'postPossible' | 'signupAndPostPossible';
};

export type Post = PostBase & {
    actor: DomainObjectPerson;
    comments?: Array<PostComment>;
    commentsActive: boolean;
    group: DomainObjectGroup;
    groupVisibility: GroupVisibility;
    guid: string;
    id: number;
    images: Array<string>;
    instance?: {
        guid: string;
        siteName: string;
        siteUrl: string;
    };
    isBanned?: boolean;
    lastEditedDate?: ZuluDate;
    linkings?: Array<Linking>;
    meta: MetaDataEntityId;
    publishedDate?: ZuluDate;
    reactions?: Array<PostReaction>;
};

export type PostBase = {
    content: string | null;
    expirationDate?: ZuluDateNullable;
    publicationDate?: ZuluDateNullable;
    title: string;
    visibility: PostVisibility;
};

export type PostComment = {
    content: string;
    id: number;
    meta: MetaDataEntityId;
    parentCommentId: number | null;
    person: DomainObjectPerson;
    postId: number;
};

export type PostCommentCreate = {
    content: string;
    parentCommentId?: number | null;
    postId: number;
};

export type PostCreate = PostBase & {
    commentsActive?: boolean;
    groupId: number;
    imageIds?: Array<number>;
};

export type PostLinking = {
    linkings: Array<Linking>;
    postId: number;
};

/**
 * Default value for post notification scope.
 */
export type PostNotificationScope = 'group_visible' | 'group_intern' | null;

export type PostReaction = {
    emoji: string;
    meta: MetaDataEntityId;
    person: DomainObjectPerson;
    postId: number;
};

export type PostUpdate = {
    commentsActive?: boolean;
    content?: string | null;
    expirationDate?: ZuluDateNullable;
    imageIds?: Array<number>;
    publicationDate?: ZuluDateNullable;
    title?: string;
    visibility?: PostVisibility;
};

export type PostVisibility = 'group_visible' | 'group_intern';

/**
 * Printer
 * A printer designated to print check-in codes
 */
export type Printer = {
    id?: number;
    location?: string;
    meta?: MetaDataEntityId;
    title?: string;
};

export type PrivacyOwner = {
    accepted: boolean;
    acceptedDate: DateStringNullable;
    acceptedType: string | null;
    acceptedWho: number | null;
    age: number;
    allowedToAccept: boolean;
    editBirthday: boolean;
    firstName: string;
    id: number;
    image: string;
    lastName: string;
};

export type PrivacyPolicy = {
    owner: PrivacyOwner;
    relationships: Array<PrivacyRelation>;
    showBanner: boolean;
    text: string;
    textRelations: string;
    typeId: number;
    whoId: number;
};

export type PrivacyRelation = {
    accepted: boolean;
    acceptedDate: DateStringNullable;
    acceptedType: string | null;
    acceptedWho: number | null;
    age: number;
    allowedToAccept: boolean;
    allowedToDecline: boolean;
    editBirthday: boolean;
    firstName: string;
    guid: string;
    id: number;
    image: string | null;
    lastName: string;
    relationshipType: {
        degreeOfRelationship: string;
        id: number | null;
        relationshipName: string;
        relationshipTypeId: number | null;
    };
};

/**
 * Profiles are representing campuses and the church itself.
 */
export type Profile = {
    address: Address;
    /**
     * Will be the same for all profiles.
     */
    association?: Association | null;
    banner: DomainObjectFile | null;
    denomination: Denomination | null;
    description: string | null;
    email: string | null;
    finderUrl: string | null;
    gallery: Array<DomainObjectFile>;
    groups: Array<{
        group: DomainObjectGroup;
        groupHomepageApi: string | null;
        groupHomepageUrl: string | null;
        sortKey: number;
    }>;
    guid: string;
    id: number;
    isPublished: boolean;
    logo: DomainObjectFile | null;
    meta: MetaDataEntityId;
    name: string;
    nameTranslated: string;
    phone: string | null;
    /**
     * church: Church profile for this installation; campus: one specific campus profile
     */
    profileType: 'church' | 'campus';
    serviceBanner_new: DomainObjectFile | null;
    services: Array<{
        day: number;
        note: string;
        repetition: string;
        time: string;
    }> | null;
    shortName: string | null;
    shorty: string;
    signUpGroup?: {
        group: DomainObjectGroup;
        groupHomepageApi: string | null;
        groupHomepageUrl: string | null;
    } | null;
    slug: string | null;
    socialMedia: {
        [key: string]: string;
    };
    sortKey: number;
    tags: Array<{
        key?: string | null;
        name?: string | null;
        nameTranslated?: string | null;
    }>;
    team: Array<{
        note: string;
        person: DomainObjectPerson;
        sortKey: number;
    }>;
    teamTitle: string | null;
    visitors: number;
    website: string | null;
};

export type ProfileUpdate = {
    address: Address;
    associationId: number;
    /**
     * Either exact string or denomination object with name property
     */
    denomination:
        | 'denomination.none'
        | 'denomination.protestant'
        | 'denomination.free.evangelical'
        | 'denomination.catholic'
        | 'denomination.ecumenical'
        | 'denomination.orthodox';
    description: string;
    email: string;
    /**
     * Either array of group IDs or array of objects with group-property, which is a domain object wiht 'domainIdentifier'
     */
    groups: Array<
        (
            | {
                  [key: string]: unknown;
              }
            | number
        ) & {
            group?: {
                domainIdentifier: string;
            };
        }
    >;
    isPublished: boolean;
    name: string;
    phone: string;
    services: Array<{
        day: number;
        note: string;
        repetition: string;
        time: string;
    }>;
    shortName: string;
    shorty: string;
    signUpGroup: (
        | {
              [key: string]: unknown;
          }
        | number
    ) & {
        domainAttributes: {
            note: string;
        };
        domainIdentifier: string;
    };
    slug: string;
    /**
     * Key-Value Pair, where key is the name of the network and value is the absolute link
     */
    socialMedia: {
        socialNetworkName: string;
    };
    sortKey: number;
    /**
     * List of tags.
     */
    tags: Array<string>;
    team: Array<{
        note: string;
        /**
         * DomainObject
         */
        person?: {
            domainIdentifier: string;
        };
        personId?: number;
        sortKey: number;
    }>;
    teamTitle: string;
    /**
     * Single integer, which represents a range.
     */
    visitors: 0 | 1 | 50 | 100 | 250 | 500 | 1000;
    website: string;
};

/**
 * PublicGroup
 * Information about a public group, e.g. to be displayed on a group homepage.
 */
export type PublicGroup = {
    /**
     * If true, group sign is allowed even if group is full.
     */
    allowWaitinglist: boolean;
    /**
     * If true, group sign up requests will be accepted automatically.
     */
    autoAccept: boolean;
    /**
     * Indicates if the current user (either logged in or not) can sign up. This summarizes the information in signUpConditions.
     */
    canSignUp: boolean;
    /**
     * Lists all (direct) child group IDs for the current group.
     */
    children?: Array<number>;
    /**
     * Current number of members in the group.
     */
    currentMemberCount: number;
    /**
     * The public group ID.
     */
    id: number;
    /**
     * General information about the group.
     */
    information: {
        /**
         * List of target age groups for this group.
         */
        ageGroups?: Array<AgeGroup>;
        campus?: Campus;
        dateOfFoundation?: ZuluDate;
        groupCategory?: GroupCategory;
        /**
         * List of the group's meeting places. Only returned if the group homepage is set to display a map.
         */
        groupPlaces?: Array<Place>;
        groupStatusId?: number;
        /**
         * URL to a group image if provided.
         */
        imageUrl?: string;
        /**
         * List of person objects of all group leaders if the group is set to display leaders.
         */
        leader?: Array<DomainObjectPerson>;
        /**
         * Free text field when group meetings take place.
         */
        meetingTime?: string;
        /**
         * The group description.
         */
        note?: string;
        targetGroup?: TargetGroup;
        /**
         * Week day when group meetings take place.
         */
        weekday?: {
            id?: number;
            name?: string;
            nameTranslated?: string;
            sortKey?: number;
        };
    };
    /**
     * Maximum number of members until the group is considered as full.
     */
    maxMemberCount: number;
    /**
     * Name of the group, e.g. to be displayed as title.
     */
    name: string;
    /**
     * Number of member requests
     */
    requestedPlacesCount: number;
    /**
     * Number of member requests with waiting list position
     */
    requestedWaitinglistPlacesCount: number;
    settings: {
        allowChildRegistration?: boolean;
        allowOtherRegistration?: boolean;
        allowSameemailRegistration?: boolean;
        allowSpouseRegistration?: boolean;
        hideContactLeader?: boolean;
        hideLogin?: boolean;
        showStreet?: boolean;
        signUpNotificationSent?: boolean;
    };
    showPublicCannotViewGroup?: boolean;
    /**
     * Specifies conditions required to sign up in this group. Not all conditions apply to any user, e.g. some of the conditions only apply to users that are not logged in.
     */
    signUpConditions: {
        /**
         * If false, none of the group's leaders have an email address set. Only persons already signed in can sign up.
         */
        canContactLeader: boolean;
        defaultRoleSetInGroup?: boolean;
        /**
         * If false, the group's end date has passed and nobody can sign up.
         */
        endDateNotPassed: boolean;
        groupAllowsWaitinglist: boolean;
        /**
         * If false, no leader is set for the group and nobody can sign up.
         */
        groupHasLeader: boolean;
        groupHasSpaceForRequests: boolean;
        groupHasSpaceOnWaitinglist: boolean;
        /**
         * If false, the group is not in active state and nobody can sign up.
         */
        groupIsActive: boolean;
        /**
         * If false, the group's max number of members is reached and nobody can sign up.
         */
        groupIsNotFull: boolean;
        /**
         * If false, the group is set to hidden and nobody can sign up.
         */
        groupIsNotHidden: boolean;
        /**
         * If false, the group is not set to be open for members and nobody can sign up.
         */
        groupIsOpenForMembers: boolean;
        /**
         * If false, the group is not public and only users already signed in are allowed to sign up.
         */
        groupIsPublic: boolean;
        groupVisibility?: GroupVisibility;
        /**
         * If false, the default department for new users is not set. When persons without an account attempt to sign up, no new user accounts will be created but the group leader will be requested by mail.
         */
        newPersonDepartmentIsSet: boolean;
        /**
         * If false, the default station for new users is not set. When persons without an account attempt to sign up, no new user accounts will be created but the group leader will be requested by mail.
         */
        newPersonStationIsSet: boolean;
        /**
         * If false, the default status for new users is not set. When persons without an account attempt to sign up, no new user accounts will be created but the group leader will be requested by mail.
         */
        newPersonStatusIsSet: boolean;
        /**
         * If false, the standard role and requester role are not set for the group and nobody can sign up.
         */
        rolesSetInGroup: boolean;
    };
    /**
     * Text which can be displayed as a headline for the sign up section
     */
    signUpHeadline?: string;
    /**
     * Lists all persons the current user is allowed to sign up for. This includes spouses, children below the age of 16 and all persons with the same email address.
     */
    signUpPersons?: Array<{
        person?: DomainObjectPerson;
        /**
         * Specifies whether this person is already in the group (IN_GROUP), in pending state for the group (REQUESTED), or selected by the user to be added into the group (CLICKED). Otherwise NOT_CLICKED.
         */
        status?: 'IN_GROUP' | 'REQUESTED' | 'NOT_CLICKED';
    }>;
    /**
     * Maximum number of persons on the waiting list.
     */
    waitinglistMaxPersons?: number;
};

export type PublicGroupFormResult = {
    /**
     * If the user is not yet signed in, this specifies the email address the user has provided.
     */
    email?: string;
    /**
     * List of form fields.
     */
    form: Array<{
        /**
         * The default value set when the user does not set this value.
         */
        default?: string;
        fieldTypeCode: FieldTypeCode;
        /**
         * ID of the form field. Only IDs within the same form field type are unique, i.e. a form field is identified by its type and its ID.
         */
        id: number;
        /**
         * A human readable label for the form field.
         */
        label: string;
        /**
         * If this is true, the field is required.
         */
        mandatory: boolean;
        /**
         * The field's internal name. Not intended to be displayed.
         */
        name: string;
        /**
         * Provides the set of allowed options for select fields.
         */
        options?: Array<{
            id?: string;
            name?: string;
        }>;
        /**
         * Form fields should be sorted by this key ascending.
         */
        sortKey: number;
        /**
         * One of: "person" (person fields), "custom" (custom group member fields), "relation" (when new family members should be signed up, can be "spouse" or "child"), "comment" (general comment field), "privacy" (privacy agreement for new users)
         */
        type: string;
    }>;
    group: PublicGroup;
    /**
     * If the user is signed in, this specifies the user ID of the requester.
     */
    requesterId?: number;
    /**
     * Lists all persons the current user is allowed to sign up. This includes spouses, children below the age of 16 and all persons with the same email address.
     */
    signUpPersons?: Array<{
        /**
         * List of form field values
         */
        formData?: Array<{
            name: string;
            value:
                | string
                | number
                | Array<unknown>
                | boolean
                | {
                      [key: string]: unknown;
                  };
        }>;
        hasAcceptedPrivacy?: boolean;
        person: DomainObjectPerson;
        /**
         * Specifies whether this person is already in the group (IN_GROUP), in pending state for the group (REQUESTED), or selected by the user to be added into the group (CLICKED). Otherwise NOT_CLICKED.
         */
        status: string;
    }>;
    /**
     * The sign up token.
     */
    token: string;
};

export type PublicGroupSignoutData = {
    group: DomainObjectGroup;
    groupHasAutoAccept: boolean;
    leaderSignOutPersons: Array<DomainObjectPerson> | null;
    noUserCreated?: boolean;
    requester: DomainObjectPerson | null;
    requesterEmail: string | null;
    selfSignOutPersons: Array<DomainObjectPerson> | null;
    token: string | null;
};

export type PublicRelationGroupHomepage = {
    groupHomepageUrl: string;
    groupId: number;
};

export type PublicRelationTag = {
    key: string;
    name: string;
    nameTranslated: string;
};

export type PublicRelationsMasterData = {
    associations: Array<Association>;
    denominations: Array<Denomination>;
    groupHomepages: Array<PublicRelationGroupHomepage>;
    socialMedia: Array<string>;
    tags: Array<PublicRelationTag>;
};

export type Registration = {
    configId: string;
    email: string;
    firstName: string;
    lastName: string;
    password: string;
    possibleMatches?: Array<{
        domainObject: DomainObjectPerson;
        formData: {
            [key: string]: unknown;
        };
        hasPassword: boolean;
    }>;
};

export type RegistrationConfig = {
    blacklist: Array<string>;
    campuses: Array<{
        campus: Campus;
        campusId: number;
        groupIds: Array<number>;
    }>;
    departmentIds: Array<number>;
    fields: Array<{
        field: DbField;
        fieldId: number;
        isRequired: boolean;
    }>;
    guid: string;
    id: number;
    isActive: boolean;
    /**
     * Indiciates if the registration configuration has all required data and is complete.
     */
    isComplete: boolean;
    meta?: MetaDataEntityId;
    minimumAge: number;
    showButton: boolean;
    statusId: number;
    tagsForExistingPersons: Array<string>;
    tagsForNewPersons: Array<string>;
};

export type RegistrationConfigCreate = {
    blacklist: Array<string>;
    campuses: Array<{
        campusId: number;
        groupIds: Array<number>;
    }>;
    departmentIds: Array<number>;
    fields: Array<{
        fieldId: number;
        isRequired: boolean;
    }>;
    id: number;
    isActive: boolean;
    minimumAge: number;
    showButton: boolean;
    statusId: number;
    tagsForExistingPersons: Array<string>;
    tagsForNewPersons: Array<string>;
};

export type RelationshipType = {
    degreeNameA: string;
    degreeNameB: string;
    exportTitle?: string;
    functionKeys?: Array<'noduplicate' | 'nodelete' | 'openduplicate'>;
    id: number;
    includeInExport: boolean;
    name: string;
    nameTranslated: string;
    securityLevelId: number;
    sortKey: number;
};

export type Report = {
    comment?: string;
    meta: MetaDataEntityId;
    reporter: DomainObjectPerson | DomainObjectExternalPerson;
    status: ReportStatus;
};

export type ReportAnswer = {
    domainId: number;
    domainType: 'post' | 'post_comment';
    response: 'accept' | 'decline';
};

export type ReportCreate = {
    captcha?: string;
    comment?: string;
    domainId: number;
    domainType: 'post' | 'post_comment';
    reporter?: {
        email: string;
        firstName: string;
        lastName: string;
    };
};

export type ReportObject = ReportObjectPost | ReportObjectPostComment;

export type ReportObjectBase = {
    comment?: string;
    domainId: number;
    id: number;
    meta: MetaDataEntityId;
    reports: Array<Report>;
    status: ReportObjectStatus;
};

export type ReportObjectPost = ReportObjectBase & {
    domainObject: Post;
    domainType: 'post';
};

export type ReportObjectPostComment = ReportObjectBase & {
    domainObject: PostComment;
    domainType: 'post_comment';
};

export type ReportObjectStatus = 'pending' | 'pending-again' | 'accepted' | 'declined';

export type ReportStatus = 'pending' | 'accepted' | 'declined';

export type Resource = ResourceTypeCreate & {
    /**
     * use `needsAppointment` instead
     * @deprecated
     */
    doesRequireCalEntry?: boolean;
    id: number;
    nameTranslated: string;
};

export type ResourceCreate = {
    adminIds?: Array<number> | null;
    description?: string | null;
    iCalLocation?: string | null;
    isAutoAccept?: boolean;
    isVirtual?: boolean;
    location?: string | null;
    name: string;
    needsAppointment?: boolean;
    randomString?: string | null;
    resourceTypeId: number;
    sortKey: number;
};

export type ResourceMasterData = {
    resourceTypes?: Array<ResourceType>;
    resources?: Array<Resource>;
};

export type ResourceStatistics = {
    numRequestedBookingsInFuture: number;
};

export type ResourceType = ResourceTypeCreate & {
    id: number;
    namePluralTranslated: string;
    nameTranslated: string;
};

export type ResourceTypeCreate = {
    campusId?: number | null;
    name?: string;
    namePlural?: string;
    sortKey?: number;
};

export type Role = RoleUpdate & {
    nameTranslated: string;
};

export type RoleCreate = {
    groupTypeId: number;
    growPathId: number | null;
    isDefault: boolean;
    isHidden: boolean;
    /**
     * @deprecated
     */
    isLeader?: boolean;
    name: string;
    shorty: string;
    sortKey: number;
    type: RoleType;
};

export type RoleType = 'participant' | 'leader';

export type RoleUpdate = RoleCreate & {
    id: number;
};

export type Routine = {
    description: string | null;
    domainType: 'group_membership';
    id: number;
    isEnabled: boolean;
    name: string;
    priority: number;
    steps: Array<RoutineStep>;
};

export type RoutineCreate = {
    description?: string | null;
    /**
     * Attributes of the context in which this routine is going to be executed.
     */
    domainContext?: {
        groupId: number;
        groupMemberStatus?: MemberStatus;
        groupTypeRoleId: number;
    };
    domainType: 'group_membership';
    isEnabled?: boolean;
    name: string;
    priority?: number;
};

export type RoutineRun = {
    domainId: number;
    domainObject?: DomainObjectGroupMembership;
    domainType: string;
    errorCode: string | null;
    id: number | null;
    meta: MetaDataEntityId;
    routineId: number;
    routineStepId: number | null;
    status: 'failed' | 'finished' | 'not-started' | 'paused' | 'started' | 'waiting';
};

export type RoutineStep = RoutineStepWithoutRepeat | RoutineStepRepeat;

export type RoutineStepCreate = RoutineStepCreateWithoutRepeat | RoutineStepCreateRepeat;

export type RoutineStepCreateAddMemberToGroup = {
    actionData: {
        groupId?: number;
        groupTypeRoleId?: number;
    };
    actionKey: 'add-member-to-group';
    isEnabled: boolean;
};

export type RoutineStepCreateArchiveGroupMember = {
    actionData: null;
    actionKey: 'archive-group-member';
    isEnabled: boolean;
};

export type RoutineStepCreateCreateFollowUp = {
    actionData: {
        color?: CtColor;
        continuationType: 'immediately' | 'when-completed';
        description: string | null;
        dueDate?: DateStringNullable;
        icon?: string;
        /**
         * Either `numDays` or `dueDate` MUST be specified.
         */
        numDays?: number;
        ownerId?: number;
        successGroupId?: number | null;
        successGroupMemberStatus?: MemberStatus | null;
        successGroupOfGroupTypeId?: number | null;
        successRoleId?: number | null;
        title: string;
    };
    actionKey: 'create-follow-up';
    isEnabled: boolean;
};

export type RoutineStepCreateEditGroupMembership = {
    actionData: {
        comment?: string;
        groupId: number;
        informLeader?: boolean;
        memberEndDate?: DateStringNullable;
        memberStartDate?: DateStringNullable;
        roleId?: number;
        waitinglistPosition?: number;
        [key: string]: unknown | string | number | boolean | DateStringNullable | undefined;
    };
    actionKey: 'edit-group-membership';
    isEnabled: boolean;
};

export type RoutineStepCreateRepeat = {
    actionData: {
        count?: number | null;
    };
    actionKey: 'special:repeat';
    children: Array<RoutineStepCreateWithoutRepeat | RoutineStepWithoutRepeat>;
    isEnabled: boolean;
};

export type RoutineStepCreateSendMemberMail = {
    actionData: {
        body: string;
        emailId?: number;
        senderId?: number;
        subject: string;
        templateId?: number;
    };
    actionKey: 'send-member-email';
    isEnabled: boolean;
};

export type RoutineStepCreateStatus = {
    actionData: null;
    actionKey:
        | 'change-member-status-requested-waiting'
        | 'change-member-status-requested-active'
        | 'change-member-status-requested-to_delete'
        | 'change-member-status-active-requested'
        | 'change-member-status-active-waiting'
        | 'change-member-status-active-to_delete'
        | 'change-member-status-to_delete-requested'
        | 'change-member-status-to_delete-waiting'
        | 'change-member-status-to_delete-active'
        | 'change-member-status-waiting-active'
        | 'change-member-status-waiting-to_delete';
    isEnabled: boolean;
};

export type RoutineStepCreateWait = {
    actionData: {
        numDays?: number;
        untilDate?: DateString;
    };
    actionKey: 'special:wait';
    isEnabled: boolean;
};

export type RoutineStepCreateWithoutRepeat =
    | RoutineStepCreateSendMemberMail
    | RoutineStepCreateCreateFollowUp
    | RoutineStepCreateEditGroupMembership
    | RoutineStepCreateAddMemberToGroup
    | RoutineStepCreateWait
    | RoutineStepCreateStatus
    | RoutineStepCreateArchiveGroupMember;

export type RoutineStepPersisted = {
    id: number;
    routineId: number;
};

export type RoutineStepRepeat = RoutineStepPersisted & RoutineStepCreateRepeat;

export type RoutineStepUpdate = RoutineStepUpdateWithoutRepeat | RoutineStepUpdateRepeat;

export type RoutineStepUpdateRepeat = {
    actionData: {
        count?: number | null;
    };
    actionKey: 'special:repeat';
    children: Array<RoutineStepUpdateWithoutRepeat>;
    finish?: Array<number | 'finished' | 'not-started' | 'started'>;
    id?: number;
    isEnabled: boolean;
    reposition?: Array<number | 'not-started' | 'started' | 'finished'>;
    restart?: Array<number | 'finished' | 'not-started' | 'started'>;
};

export type RoutineStepUpdateWithoutRepeat = RoutineStepCreateWithoutRepeat & {
    id?: number;
    reposition?: Array<number | 'not-started' | 'started' | 'finished'>;
};

export type RoutineStepWithoutRepeat = RoutineStepPersisted & RoutineStepCreateWithoutRepeat;

export type RoutineUpdate = {
    description?: string | null;
    finish?: Array<number | 'finished' | 'not-started' | 'started'>;
    isEnabled?: boolean;
    name?: string;
    priority?: number;
    restart?: Array<number | 'finished' | 'not-started' | 'started'>;
    steps?: Array<RoutineStepUpdate>;
};

export type RssFeed = {
    description?: string;
    items: Array<BlogItem>;
    link?: string;
    title: string;
    totalCount?: number;
};

export type SsoLogins = {
    id: number;
    loginLink: string;
    name: string;
    type: string;
};

export type SearchDomainObject =
    | DomainObjectAction
    | DomainObjectGroup
    | DomainObjectPerson
    | DomainObjectSong
    | DomainObjectWikiPage;

/**
 * SearchResult
 */
export type SearchResult = {
    apiUrl?: string;
    domainAttributes?: {
        [key: string]: unknown;
    };
    domainIdentifier?: string;
    domainType?: string;
    frontendUrl?: string;
    imageUrl?: string | null;
    preview?: string | null;
    title?: string;
};

export type Service = {
    allowChat?: boolean;
    allowCommentOnConfirmation?: boolean;
    allowControlLiveAgenda?: boolean;
    allowDecline?: boolean;
    allowExchange?: boolean;
    calTextTemplate?: string;
    comment?: string;
    /**
     * @deprecated
     */
    commentOnConfirmation?: boolean;
    groupIds?: Array<number>;
    hidePersonName?: boolean;
    id?: number;
    name?: string;
    onlyAssignFromGroups?: boolean;
    sendReminderMails?: boolean;
    sendServiceRequestEmails?: boolean;
    serviceGroupId?: number;
    sortKey?: number;
    standard?: boolean;
    tagIds?: Array<number>;
};

export type ServiceExchangeRequest = {
    id?: number;
    isArchived?: boolean;
    meta?: {
        modifiedDate?: string;
    };
    requestedEvent?: {
        id?: number;
        name?: string;
        startDate?: string;
    };
    requestedPerson?: Person;
    requestedServiceId?: number;
    requestingEvent?: {
        id?: number;
        name?: string;
        startDate?: string;
    };
    requestingPerson?: Person;
    requestingServiceId?: number;
    status?: string;
};

export type ServiceGroup = {
    campusId?: number | null;
    id?: number;
    name?: string;
    onlyVisibleInCampusFilter?: boolean;
    sortKey?: number;
    viewAll?: boolean;
};

export type ServiceOfPerson = {
    /**
     * @deprecated
     */
    agreed?: boolean;
    comment: string | null;
    /**
     * @deprecated
     */
    counter?: number;
    id: number;
    index: number | null;
    isAccepted: boolean;
    isValid: boolean;
    name: string | null;
    personId: number | null;
    serviceId: number | null;
    serviceName: string;
};

export type ServiceRequest = {
    /**
     * @deprecated
     */
    agreed?: boolean;
    comment: string | null;
    /**
     * @deprecated
     */
    counter?: number;
    id: number;
    index: number | null;
    isAccepted: boolean;
    isValid: boolean;
    name: string;
    person: DomainObjectPerson;
    /**
     * @deprecated
     */
    personId?: number;
    requestedDate: string;
    requesterPerson: DomainObjectPerson;
    /**
     * @deprecated
     */
    requesterPersonId?: number;
    serviceId: number;
};

export type Sex = {
    /**
     * ID of sex
     */
    id: number;
    /**
     * Name of sex
     */
    name: string;
    /**
     * Translated name of sex
     */
    nameTranslated: string;
    /**
     * Used to sort all sexes
     */
    sortKey: number;
};

export type SimpleAppointment = {
    calendarId: number;
    id: number;
    title: string;
};

/**
 * WikiPage
 */
export type SimpleWikiPage = {
    identifier: string;
    isMarkdown?: boolean;
    meta?: MetaDataEntityPerson;
    onStartpage?: boolean;
    permissions?: {
        canEdit?: boolean;
    };
    redirectTo?: string;
    title?: string;
    version?: number;
    wikiCategory?: WikiCategory;
};

/**
 * Song
 * Song information
 */
export type Song = {
    /**
     * All arrangements for that song
     * @deprecated
     */
    arrangements?: Array<Arrangement>;
    author?: string | null;
    category?: SongCategory;
    ccli?: string | null;
    copyright?: string | null;
    id?: number;
    meta?: MetaDataEntityId;
    name?: string;
    /**
     * @deprecated
     */
    note?: string;
    shouldPractice?: boolean;
};

/**
 * Song Category
 */
export type SongCategory = {
    campusId?: number;
    id?: number;
    name?: string;
    nameTranslated?: string;
    sortKey?: number;
};

/**
 * Song
 * Song information
 */
export type SongCreate = {
    author?: string | null;
    categoryId: number;
    ccli?: string | null;
    copyright?: string | null;
    name: string;
    shouldPractice?: boolean;
};

/**
 * SongSource
 * Source of a song resp. arrangement
 */
export type SongSource = {
    id: number;
    meta: MetaDataEntityId;
    name: string;
    shorty: string;
    sortKey: number;
};

export type SplitTransaction = {
    /**
     * Value is in currency's smallest denomination (e.g. cents).
     */
    amount?: number;
    documentDate?: DateString;
    documentNumber?: string;
    id?: number;
    meta?: MetaCount;
    note?: string;
    splitChildren?: Array<Transaction>;
};

export type StartStopChat = {
    enabled?: boolean;
    triggerChatInviteMail?: boolean;
};

export type StatementMovement = {
    /**
     * amount in cents
     */
    amount: number;
    description: string;
    documentDate: DateString;
    id: number;
    identifier: string;
    isDebit: boolean;
    isDonation: boolean;
    numberInStatement: number;
    personName: string;
    purpose: string;
    state: MovementState;
    suggestions: Array<MovementSuggestion>;
    transactionCode: string;
    transactionId: number | null;
    valuta: DateString;
};

export type StatementStatistics = {
    all: number;
    booked: number;
    ignored: number;
    open: number;
};

export type Status = {
    /**
     * ID of status
     */
    id: number;
    /**
     * Flag if status is member of the church
     */
    isMember: boolean;
    /**
     * Flag if that status is searchable
     */
    isSearchable: boolean;
    /**
     * Status name
     */
    name: string;
    /**
     * Translated status name
     */
    nameTranslated: string;
    /**
     * Only persons with that securitylevel can edit/select/delete that status
     */
    securityLevelId: number;
    /**
     * Abbreviation of name.
     */
    shorty: string;
    /**
     * Used to sort all statuses
     */
    sortKey: number;
};

/**
 * 1 = PENDING, 2 = CONFIRMED, 3 = CANCELED, 99 = DELETED
 */
export type StatusId = 1 | 2 | 3 | 99;

export type StatusNew = {
    isMember: boolean;
    isSearchable?: boolean;
    name: string;
    securityLevelId?: number;
    shorty: string;
    sortKey?: number;
};

export type StatusUpdate = {
    isMember: boolean;
    isSearchable: boolean;
    name: string;
    securityLevelId: number;
    shorty: string;
    sortKey: number;
};

export type Subscription = SubscriptionGroup | SubscriptionPost | SubscriptionPostSummary | SubscriptionPublicChannel;

export type SubscriptionBase = {
    isActive: boolean;
    isExplicit: boolean;
    meta: MetaDataEntityIdNullable;
    origin: 'default' | 'group-settings';
    /**
     * Translation key addressed to end user
     */
    originHint: string | null;
    personId: number;
    subjectIdentifier: string;
};

export type SubscriptionGroup = SubscriptionBase & {
    subject: 'group';
};

export type SubscriptionPost = SubscriptionBase & {
    subject: 'post';
};

export type SubscriptionPostSummary = SubscriptionBase & {
    options: {
        filter: 'all' | 'my_campus' | 'my_groups' | 'featured_groups';
        weekdays: Array<number>;
    };
    subject: 'post_summary';
};

export type SubscriptionPublicChannel = SubscriptionBase & {
    subject: 'public_channel';
};

/**
 * SyncAdapter
 */
export type SyncAdapter = {
    id?: number;
    name?: string;
    token?: string;
    url?: string;
};

/**
 * SyncAdapter
 */
export type SyncAdapterNew = {
    name?: string;
    token?: string;
    url?: string;
};

/**
 * Sync Conflicts
 * A sync conflict object holds information about the type of conflict, the corresponding source and the entity mapping.
 */
export type SyncConflicts = {
    /**
     * Array of relevant meta information
     */
    data?: Array<{
        id?: number;
        key?: string;
        value?: string;
    }>;
    /**
     * Entity Mapping Id
     */
    entityMappingId?: number;
    /**
     * Conflict Id
     */
    id?: number;
    /**
     * Job Id, where conflict appeared
     */
    jobId?: string;
    meta?: MetaCount;
    /**
     * Conflict Type
     */
    type?: 'duplicate in CT' | 'duplicate in source' | 'link and update' | 'update' | 'delete or create' | 'create';
};

/**
 * Sync Entity Mapping
 * Mapping information between a ChurchTools entity and its corresponding entity in a third party system.
 */
export type SyncEntityMapping = {
    /**
     * ChurchTools Internal Domain Identifier
     */
    domainId?: string;
    /**
     * ChurchTools Domain Type
     */
    domainType?: string;
    /**
     * ID of Entity Mapping
     */
    id?: number;
    /**
     * Date of Last Sync
     */
    lastSyncedDate?: string | null;
    meta?: MetaCount;
    /**
     * scope key identifying the context of the entity mapping
     */
    scope?: string | null;
    /**
     * Source Entity's Identifier
     */
    sourceEntityId?: string;
    /**
     * Id of Source System Registered in ChurchTools
     */
    sourceId?: number;
    /**
     * Status of Relationship
     */
    status?: 'synced' | 'conflict' | 'deleted in CT';
};

/**
 * Sync Log Entry
 * Log entry during a sync execution.
 */
export type SyncLog = {
    date: string;
    domainId: string;
    domainType: string;
    id: number;
    isDryRun: boolean;
    job: {
        externalSystem: {
            id: number;
            name: string;
        };
        id: number;
        name: string;
    };
    level: string;
    messageArgs?: {
        [key: string]: unknown;
    };
    messageI18n: string;
    sourceEntityId: string;
    system: string;
    type: string;
};

export type Tag = TagBase & {
    /**
     * @deprecated
     */
    modifiedAt: string;
    /**
     * @deprecated
     */
    modifiedBy: number;
    /**
     * @deprecated
     */
    modifiedDate: string;
    /**
     * @deprecated
     */
    modifiedPid: string;
};

export type TagBase = {
    color: CtColor;
    description: string;
    id: number;
    name: string;
};

export type TagUpdate = {
    color: CtColor;
    description: string | null;
    name: string;
};

export type TagWithCount = TagBase & {
    count: number;
};

export type TargetGroup = TargetGroupUpdate & {
    nameTranslated: string;
};

export type TargetGroupCreate = {
    name: string;
    sortKey: number;
};

export type TargetGroupUpdate = TargetGroupCreate & {
    id: number;
};

export type TaxRate = {
    accountId?: number;
    id: number;
    meta: MetaDataEntityId;
    note?: string;
    rate: number;
    taxTypeId: number;
};

export type TaxRateNew = {
    accountId: number;
    note: string;
    rate: number;
    taxTypeId: number;
};

export type TaxType = {
    id: number;
    meta: MetaDataEntityId;
    name: string;
    sortKey: number;
};

export type TaxTypeNew = {
    name: string;
    sortKey: number;
};

export type Transaction = {
    accountId: number;
    /**
     * Value is in cent.
     */
    amount: number;
    /**
     * Value is in cent.
     */
    cashDiscountAmount?: number;
    cashDiscountId?: number;
    contraAccountId: number;
    costCenterId?: number | null;
    documentDate: string;
    documentNumber: string;
    donator?: DomainObjectPerson;
    donatorSpouse?: DomainObjectPerson;
    id: number;
    /**
     * If a transaction is immutable, no field can be change or deleted.
     */
    isImmutable: boolean;
    /**
     * True, if the transaction has been created through a sync.
     */
    isSynced: boolean;
    isWaiverOfReimbursementOfExpenses: boolean;
    meta?: MetaCount;
    note: string;
    permissions?: {
        /**
         * Flag if user can edit this transaction
         */
        canEdit?: boolean;
    };
    splitTransactionId?: number;
    /**
     * If a tax rate is set for the transaction, the corresponding tax transaction is returned in the field taxTransactionId.
     */
    taxRateId?: number;
    /**
     * Reference to the transaction which is a split booking for taxes.
     */
    taxTransactionId?: number;
};

export type TransactionNew = {
    accountId: number;
    /**
     * Value is in cent.
     */
    amount: number;
    /**
     * Value is in cent.
     */
    cashDiscountAmount?: number;
    cashDiscountId?: number;
    contraAccountId: number;
    costCenterId?: number | null;
    documentDate: string;
    documentNumber: string;
    donatorId?: number;
    donatorSpouseId?: number;
    /**
     * True, if the transaction has been created through a sync.
     */
    isSynced?: boolean;
    isWaiverOfReimbursementOfExpenses?: boolean;
    note: string;
    /**
     * If set, a corresponding tax split booking automatically gets created.
     */
    taxRateId?: number;
};

export type TransactionPurpose = {
    accountIds?: Array<number>;
    costCenterId?: number | null;
    id?: number;
    isIncome?: boolean;
    meta?: MetaDataEntityId;
    name?: string;
    /**
     * This will always be a single account. But it depends on the `isIncome` flag if this is the debit or the credit account.
     */
    purposeAccountId?: number;
    sortKey?: number;
};

export type TransactionPurposeNew = {
    accountIds?: Array<number>;
    costCenterId: number | null;
    isIncome: boolean;
    name: string;
    purposeAccountId: number;
    sortKey: number;
};

export type TransactionStorno = {
    note: string;
};

export type TransactionSummary =
    | TransactionSummaryCostCenter
    | TransactionSummaryCreditDebit
    | TransactionSummaryDonation;

export type TransactionSummaryBase = {
    periods: {
        endDate: {
            lastYear: DateString;
            thisYear: DateString;
        };
        startDate: {
            lastYear: DateString;
            thisYear: DateString;
        };
    };
};

export type TransactionSummaryCostCenter = TransactionSummaryBase & {
    summary: {
        income: {
            lastYear: number;
            thisYear: number;
        };
        outcome: {
            lastYear: number;
            thisYear: number;
        };
        sum: {
            lastYear: number;
            thisYear: number;
        };
    };
    type: 'costcenter-sum';
};

export type TransactionSummaryCreditDebit = TransactionSummaryBase & {
    summary: {
        accounts: Array<{
            balance: {
                lastYear: number;
                thisYear: number;
            };
            credit: {
                lastYear: number;
                thisYear: number;
            };
            debit: {
                lastYear: number;
                thisYear: number;
            };
            id: number;
            name: string;
            number: string;
        }>;
        credit: {
            lastYear: number;
            thisYear: number;
        };
        debit: {
            lastYear: number;
            thisYear: number;
        };
        sum: {
            lastYear: number;
            thisYear: number;
        };
    };
    type: 'credit-debit';
};

export type TransactionSummaryDonation = TransactionSummaryBase & {
    summary: {
        donators: Array<{
            person: DomainObjectPerson;
            sum: {
                lastYear: number;
                thisYear: number;
            };
        }>;
        sum: {
            lastYear: number;
            thisYear: number;
        };
    };
    type: 'donation-sum';
};

export type TransactionUpdate = {
    accountId: number;
    /**
     * Value is in cent.
     */
    amount: number;
    /**
     * Value is in cent.
     */
    cashDiscountAmount?: number;
    cashDiscountId?: number;
    contraAccountId: number;
    costCenterId: number;
    documentDate: string;
    documentNumber: string;
    donatorId?: number;
    /**
     * If `true` this transaction is immutable and cannot be edited or deleted.
     */
    isImmutable?: boolean;
    note: string;
    /**
     * If updated, the corresponding tax split booking automatically gets updated.
     */
    taxRateId?: number;
};

/**
 * Translation
 * Translation object
 */
export type Translation = {
    /**
     * The translation value for the key
     */
    translation?: string;
    /**
     * Last updated
     */
    updated?: string | null;
    /**
     * Determines if the translation was updated or created by the church
     */
    updatedByChurch?: boolean;
};

/**
 * Translation Key
 * Translation key object
 */
export type TranslationKey = {
    id?: number;
    key?: string;
    module?: string;
    translations?: {
        additionalProperties?: Translation;
    };
    /**
     * Last updated
     */
    updated?: string | null;
};

export type VerificationStatus = 'in_progress' | 'verified' | 'not_verified' | 'failed';

export type WebsiteData = WebsiteDataStaff | WebsiteDataCalendar | WebsiteDataPerson | WebsiteDataPostsInGroup;

export type WebsiteDataBase = {
    domainId: number;
    id: number;
};

export type WebsiteDataCalendar = WebsiteDataBase & {
    additionalId: number;
    domainData?: Calendar;
    domainType: 'calendar';
};

export type WebsiteDataCreate = {
    additionalId?: number;
    domainId: number;
    domainType: 'person' | 'staff' | 'calendar' | 'posts-in-group';
};

export type WebsiteDataPerson = WebsiteDataBase & {
    /**
     * The role id
     */
    additionalId: number;
    domainData?: {
        group: DomainObjectGroup;
        members: Array<DomainObjectPerson>;
        role: Role;
    };
    domainType: 'person';
};

export type WebsiteDataPostsInGroup = WebsiteDataBase & {
    additionalId: number;
    domainData?: {
        group: DomainObjectGroup;
        groupVisiblePostCount: number;
    };
    domainType: 'posts-in-group';
};

export type WebsiteDataStaff = WebsiteDataBase & {
    additionalId: number;
    domainData?: DomainObjectPerson;
    domainType: 'staff';
};

export type WebsiteDataWithoutInclude = WebsiteDataBase & {
    additionalId: number | null;
    domainType: 'person' | 'staff' | 'calendar' | 'posts-in-group';
};

export type Weekday = {
    id: number;
    name: string;
    nameTranslated: string;
    sortKey: number;
};

/**
 * Container for the widget-system
 */
export type Widget = WidgetDate | WidgetDetail | WidgetDomainObject | WidgetPost | WidgetCommon;

/**
 * WidgetAction
 */
export type WidgetAction = WidgetActionBase & {
    key?: WidgetActionKey;
};

export type WidgetActionBase = {
    flavor?: WidgetActionFlavor;
    icon?: string;
    key: string;
    label: string;
    type: WidgetActionType;
};

/**
 * Flavor of widget action
 */
export type WidgetActionFlavor = 'accent' | 'basic' | 'constructive' | 'destructive' | 'magic';

export type WidgetActionKey =
    | 'action.groupmeeting.all'
    | 'action.songsToLearn.all'
    | 'action.allBirthdays.all'
    | 'action.service-requests.all'
    | 'action.upcoming-services.all'
    | 'action.exchange-requests.all'
    | 'action.general.url'
    | 'action.posts.all'
    | 'action.appointments.all'
    | 'action.my-groups.all'
    | 'action.favorite-groups.all';

/**
 * Type of widget action
 */
export type WidgetActionType = 'primary' | 'secondary' | 'details' | 'other';

/**
 * Avatar for widget items
 */
export type WidgetAvatar = {
    primaryDomainObject: DomainObjectAny;
    secondaryDomainObject?: DomainObjectAny | null;
};

export type WidgetBase = {
    actions?: Array<WidgetAction>;
    emptyStrategy?: WidgetEmptyStrategy;
    emptyText?: string;
    filter?: {
        options?: Array<{
            id?: string;
            name: string;
        }>;
    } | null;
    helpLink?: string;
    isMandatory?: boolean;
    key: string;
    orientation?: 'horizontal' | 'vertical';
    replacement?: string;
    title: string;
    widgetSettings:
        | WidgetSettingsCommon
        | {
              backgroundColor?: Color;
          };
};

export type WidgetCommon = WidgetBase & {
    groupings: WidgetGroupings;
    items: Array<WidgetCommonItem>;
    widgetType: 'common';
};

/**
 * Common widget item structure
 */
export type WidgetCommonItem = {
    actionData: {
        [key: string]: unknown;
    };
    actions: Array<WidgetItemAction>;
    details: WidgetCommonItemDetails;
    filterKeys: Array<string>;
    groupingKeys?: Array<string> | null;
    infos: Array<{
        text: string;
    }>;
    summaryText: string;
    title: string;
};

/**
 * Details for common widget items
 */
export type WidgetCommonItemDetails = {
    avatar: WidgetAvatar | null;
    count: WidgetCount | null;
    infoLists: Array<WidgetInfoList>;
    initialInfoList: WidgetInfoList | null;
    primaryInfoList: WidgetInfoList | null;
    topLine: WidgetTopLine | null;
};

/**
 * Count display for widgets
 */
export type WidgetCount = {
    color: CtColor;
    text: string;
};

export type WidgetDate = WidgetBase & {
    items: Array<WidgetDateItem>;
    widgetType: 'date';
};

/**
 * Item for widget date lists
 */
export type WidgetDateItem = {
    actionData: {
        appointmentId: number;
        calendarId: number;
        startDate: DateString;
    };
    actions: Array<WidgetItemAction>;
    details: {
        allDay: boolean;
        dateTime: ZuluDate;
        title: string;
    };
    filterKeys?: null;
    infos: Array<{
        text: string;
    }>;
    summaryText?: string;
    title: string;
};

/**
 * Density options for common widgets
 */
export type WidgetDensity = 'default' | 'divided' | 'compact';

export type WidgetDetail = WidgetBase & {
    items: Array<WidgetDetailItem>;
    widgetType: 'detail';
};

/**
 * Item for widget detail lists
 */
export type WidgetDetailItem = {
    actionData: {
        [key: string]: unknown;
    };
    actions: Array<WidgetItemAction>;
    rows: Array<WidgetDetailItemRow>;
    summaryText?: string;
    title?: string;
};

/**
 * Union type for all widget detail item row types
 */
export type WidgetDetailItemRow =
    | WidgetDetailItemRowEntry
    | WidgetDetailRowInfoLine
    | WidgetDetailRowPrimary
    | WidgetDetailRowProperties
    | WidgetDetailRowStatus
    | WidgetDetailRowTopLine
    | WidgetDetailRowDomainObjects;

/**
 * Entry row type for widget detail items
 */
export type WidgetDetailItemRowEntry = {
    color: Color;
    icon: string;
    text: string;
    type: 'entry';
};

/**
 * Domain objects row type for widget detail items
 */
export type WidgetDetailRowDomainObjects = {
    domainObjects: Array<WidgetSupportedDomainObjects>;
    text: string;
    type: 'domainObjects';
};

/**
 * Info line row type for widget detail items
 */
export type WidgetDetailRowInfoLine = {
    infos: Array<{
        text: string;
    }>;
    type: 'info-line';
};

/**
 * Primary row type for widget detail items
 */
export type WidgetDetailRowPrimary = {
    text: string;
    type: 'primary';
};

/**
 * Properties row type for widget detail items
 */
export type WidgetDetailRowProperties = {
    properties: Array<{
        label: string;
        property: Array<string>;
    }>;
    type: 'properties';
};

/**
 * Status row type for widget detail items
 */
export type WidgetDetailRowStatus = {
    status: Array<{
        color: Color;
        icon: string;
        infos: Array<string>;
        status: string;
    }>;
    type: 'status';
};

/**
 * Top line row type for widget detail items
 */
export type WidgetDetailRowTopLine = {
    color: Color;
    infos: Array<{
        text: string;
    }>;
    type: 'top-line';
};

export type WidgetDomainObject = WidgetBase & {
    items: Array<WidgetDomainObjectItem>;
    widgetType: 'domainObject';
};

/**
 * Item for widget domain object lists
 */
export type WidgetDomainObjectItem = {
    actionData: {
        groupId: number;
        personId: number;
    };
    actions: Array<WidgetItemAction>;
    details: {
        domainObject: WidgetSupportedDomainObjects;
    };
    filterKeys?: null;
    infos: Array<{
        text: string;
    }>;
    summaryText?: string;
    title: string;
};

/**
 * Strategy for handling empty widget content
 */
export type WidgetEmptyStrategy = 'SHOW' | 'HIDE';

/**
 * Individual grouping option configuration
 */
export type WidgetGroupingOption = {
    /**
     * Unique key for the grouping option
     */
    key: string;
    /**
     * Display label for the grouping option
     */
    label: string;
    /**
     * Sort order for the grouping option
     */
    sortKey?: number;
};

/**
 * Grouping configuration for widgets
 */
export type WidgetGroupings = {
    [key: string]: WidgetGroupingOption;
};

/**
 * Information item for widget lists
 */
export type WidgetInfoItem = {
    color: CtColor;
    iconBefore: string | null;
    label: string | null;
    subItems: Array<WidgetInfoSubItem>;
    text: string;
};

/**
 * List of information items for widgets
 */
export type WidgetInfoList = {
    direction: WidgetInfoListDirection;
    infoItems: Array<WidgetInfoItem>;
    size: WidgetInfoListSize;
    withLabel: boolean;
};

/**
 * Direction for widget info lists
 */
export type WidgetInfoListDirection = 'horizontal' | 'vertical' | 'wrapped';

/**
 * Size options for widget info lists
 */
export type WidgetInfoListSize = 'small' | 'medium';

/**
 * Sub-item for widget information items
 */
export type WidgetInfoSubItem = {
    color: CtColor;
    iconBefore: string;
    text: string;
};

/**
 * WidgetItemAction
 */
export type WidgetItemAction = WidgetActionBase & {
    key?: WidgetItemActionKey;
};

export type WidgetItemActionKey =
    | 'action.songsToLearn.details'
    | 'action.birthday.details'
    | 'action.event.details'
    | 'action.appointment.details'
    | 'action.general.url'
    | 'action.post.details'
    | 'action.serviceRequests.accept'
    | 'action.serviceRequests.comment'
    | 'action.serviceRequests.undo'
    | 'action.serviceRequests.decline'
    | 'action.serviceRequests.exchange'
    | 'action.serviceRequests.absence'
    | 'action.exchangeRequests.request'
    | 'action.exchangeRequests.cancel'
    | 'action.exchangeRequests.accept'
    | 'action.exchangeRequests.decline'
    | 'action.group.details'
    | 'action.eventfact.details';

export type WidgetItemType =
    | WidgetCommonItem
    | WidgetDateItem
    | WidgetDetailItem
    | WidgetDomainObjectItem
    | WidgetPostItem;

export type WidgetPost = WidgetBase & {
    items: Array<WidgetPostItem>;
    widgetType: 'post';
};

/**
 * Item for widget post lists
 */
export type WidgetPostItem = {
    actionData: {
        groupGuid?: string;
        guid?: string;
        instanceGuid?: string;
        postId?: number;
    };
    actions: Array<WidgetItemAction>;
    details: {
        post: Post;
    };
    filterKeys?: null;
    infos: Array<{
        text: string;
    }>;
    summaryText?: string;
    title: string;
};

/**
 * Settings specific to common widgets
 */
export type WidgetSettingsCommon = {
    density: WidgetDensity;
};

export type WidgetSupportedDomainObjects =
    | DomainObjectExternalPerson
    | DomainObjectGroup
    | DomainObjectPerson
    | DomainObjectSong
    | DomainObjectWikiPage
    | DomainObjectFile
    | DomainObjectFurtherLink;

/**
 * Top line text for widget items
 */
export type WidgetTopLine = {
    text: string;
};

/**
 * WikiCategory
 */
export type WikiCategory = {
    campusId: number | null;
    fileAccessWithoutPermission: boolean;
    id: number;
    inMenu: boolean;
    name: string;
    nameTranslated?: string;
    sortKey: number;
};

/**
 * WikiPage
 */
export type WikiPage = {
    identifier?: string;
    isMarkdown: boolean;
    meta: MetaDataEntityPerson;
    onStartpage: boolean;
    permissions?: {
        canEdit?: boolean;
    };
    redirectTo?: string;
    text: string;
    title: string;
    version: number;
    wikiCategory: WikiCategory;
};

/**
 * A timestamp in Zulu time format, e.g. '2022-10-19T12:00:00Z'
 */
export type ZuluDate = `${number}-${number}-${number}T${number}:${number}:${number}Z`;

/**
 * A timestamp in Zulu time format, e.g. '2022-10-19T12:00:00Z'
 * @deprecated
 */
export type ZuluDateDeprecated = string;

/**
 * A timestamp in Zulu time format, e.g. '2022-10-19T12:00:00Z'
 */
export type ZuluDateNullable = `${number}-${number}-${number}T${number}:${number}:${number}Z` | null;

/**
 * ID of accounting period to get master data for
 */
export type AccountingPeriodId = number;

/**
 * ID of one accounting period or several accounting periods
 */
export type AccountingPeriodIdOrArray = Array<number>;

/**
 * ID of appointment
 */
export type AppointmentId = number;

/**
 * ID of arrangement
 */
export type ArrangementId = number;

/**
 * ID of booking
 */
export type BookingId = number;

/**
 * ID of Calendar
 */
export type CalendarId = number;

/**
 * If set to true, the deletion is simulated but nothing will be deleted.
 */
export type DeleteDryRun = boolean;

/**
 * The direction of the result set
 */
export type DirectionParameter = 'forward' | 'backward';

/**
 * the domain id
 */
export type DomainId = number;

/**
 * the domain identifier
 */
export type DomainIdentifier = string;

/**
 * The domain type. Currently supported are 'avatar', 'groupimage', 'appointment_image', 'logo', 'attachments', 'bulkletter_template', 'service', 'song_arrangement', 'importtable', 'person', 'familyavatar', 'post', 'wiki_.?'.
 */
export type DomainType2 = string;

/**
 * ID of Donator or Couple
 */
export type DonatorCoupleId = string;

/**
 * ID of Event
 */
export type EventId = number;

export type ExternalLoginId = number;

/**
 * ID of Entity
 */
export type FileId = number;

/**
 * ID of Follow-up
 */
export type FollowUpId = number;

/**
 * If set, the response will only include follow ups that have no done_date.
 */
export type FollowUpsOnlyPending = boolean;

/**
 * Force the action, which would otherwise fail.
 */
export type Force = boolean;

/**
 * Return entities starting from this date.
 */
export type From = DateString;

/**
 * GUID for Entity
 */
export type Guid = string;

/**
 * Array of age group ids to filter the groups
 */
export type GroupFilterAgeGroupIds = Array<number>;

/**
 * Only show groups where posting is allowed
 */
export type GroupFilterAllowPosts = boolean;

/**
 * Array of campus ids to filter the groups
 */
export type GroupFilterCampusIds = Array<number>;

/**
 * Array of group category ids to filter the groups
 */
export type GroupFilterGroupCategoryIds = Array<number>;

/**
 * Array of group ids
 */
export type GroupFilterGroupIds = Array<number>;

/**
 * Array of group status ids to filter the groups
 */
export type GroupFilterGroupStatusIds = Array<number>;

/**
 * Array of group tag ids to filter the groups
 */
export type GroupFilterGroupTagIds = Array<number>;

/**
 * Array of group type ids to filter the groups
 */
export type GroupFilterGroupTypeIds = Array<number>;

/**
 * Only show groups with meeting place
 */
export type GroupFilterHasMeetingPlace = boolean;

/**
 * Only show groups which has posts
 */
export type GroupFilterHasPosts = boolean;

/**
 * Filters groups by its open status
 */
export type GroupFilterIsOpenForMembers = boolean;

/**
 * Determines if only groups where I am in should be returned
 */
export type GroupFilterOnlyMyGroups = boolean;

export type GroupFilterQuery = string;

/**
 * Array of target group ids to filter the groups
 */
export type GroupFilterTargetGroupIds = Array<number>;

/**
 * Group visibility
 */
export type GroupFilterVisibility = 'hidden' | 'public' | 'restricted' | 'intern';

/**
 * Array of weekdays to filter the groups. Sunday = 0, Monday = 1 ...
 */
export type GroupFilterWeekdays = Array<number>;

/**
 * Determines if groups should be omitted where I am in
 */
export type GroupFilterWithoutMyGroups = boolean;

/**
 * ID of group
 */
export type GroupId = number;

/**
 * ID or chat GUID of group
 */
export type GroupIdOrGuid = number;

/**
 * Include additional information (currently, 'roles' are included by default but this behaviour is now deprecated)
 */
export type GroupInclude = Array<
    'hasPermissions' | 'roles' | 'tags' | 'memberStatistics' | 'places' | 'publicPostsStatistic' | 'signupConditions'
>;

/**
 * Include additional information
 */
export type GroupMeetingInclude = Array<'attendances'>;

/**
 * If true, return only group members, that are allowed to chat in this group
 */
export type GroupMemberFilterAllowedChatUsersOnly = boolean;

/**
 * If true, return only group members that are allowed to write in the chat.
 */
export type GroupMemberFilterAllowedChatWritersOnly = boolean;

/**
 * Filter by comment
 */
export type GroupMemberFilterComment = string;

/**
 * Array of group member statuses to filter the members
 */
export type GroupMemberFilterGroupMemberStatuses = Array<MemberStatus>;

/**
 * Filter by whether the membership began after the given date.
 */
export type GroupMemberFilterMemberStartDateAfter = DateString;

/**
 * Filter by whether the membership began before the given date.
 */
export type GroupMemberFilterMemberStartDateBefore = DateString;

/**
 * The order directions for the fields. Must be the same length as orderFields. Default is ASC. Possible values are ASC and DESC.
 */
export type GroupMemberFilterOrderDirections = Array<'ASC' | 'DESC'>;

/**
 * The fields to order by. Person fields look like this: person_firstName. Group member fields look like this: member_groupTypeRoleId.
 */
export type GroupMemberFilterOrderFields = Array<string>;

/**
 * Additional person fields that should be returned by this endpoint. A person field is defined by its key. For example: firstName
 */
export type GroupMemberFilterPersonFields = Array<string>;

/**
 * Array of person ids to filter the members
 */
export type GroupMemberFilterPersonIds = Array<number>;

/**
 * searches in first and second name of group member
 */
export type GroupMemberFilterQuery = string;

/**
 * Array of roles to filter the members
 */
export type GroupMemberFilterRoleIds = Array<number>;

/**
 * Include additional information
 */
export type GroupMemberInclude = Array<'tags' | 'aggregations'>;

/**
 * Status of a group membership
 */
export type GroupMemberStatus = 'active' | 'requested' | 'waiting' | 'to_delete';

/**
 * ID of group role. This is not the group type role. The group role has a reference to the group type role and sets specific settings for the role in this group.
 */
export type GroupRoleId = number;

/**
 * ID of an HTML template
 */
export type HtmlTemplateId = number;

/**
 * ID of Entity
 */
export type Id = number;

/**
 * Number of results per page.
 */
export type LimitParameter = number;

/**
 * ID of meeting request
 */
export type MeetingRequestId = number;

/**
 * Domain types that notes can be used with
 */
export type NoteDomainType2 = NoteDomainType;

/**
 * ID of note
 */
export type NoteId = number;

/**
 * Page number to show page in pagination. If empty, start at first page.
 */
export type PageParameter = number;

export type PermissionDomainType = 'status' | 'group_type_role' | 'group_role' | 'person';

/**
 * ID of person
 */
export type PersonId = number;

/**
 * Include additional information
 */
export type PersonInclude = Array<'tags'>;

/**
 * ID of post
 */
export type PostId = number;

export type ResourceId = number;

/**
 * ID of a routine
 */
export type RoutineId = number;

/**
 * ID of a routine run
 */
export type RoutineRunId = number;

/**
 * Include additional information
 */
export type RoutineRunInclude = Array<'domainObject'>;

/**
 * Comment
 */
export type ServiceRequestComment = string;

/**
 * ID of a service request
 */
export type ServiceRequestId = number;

/**
 * Decides in case of changing the visibility of posts in the group whether the current users posts should be skipped. Default: false
 */
export type SkipMyPostsReducingVisibility = boolean;

/**
 * ID of song
 */
export type SongId = number;

/**
 * Include additional information
 */
export type SongInclude = Array<'arrangements' | 'tags'>;

export type SubscriptionSubject = 'post' | 'post_summary' | 'group' | 'public_channel';

/**
 * Domain types that tags can be used with
 */
export type TagDomainType = 'person' | 'group' | 'song';

/**
 * ID of tag
 */
export type TagId = number;

/**
 * Return entities up to this date.
 */
export type To = DateString;

/**
 * ID of WikiCategory
 */
export type WikiCategoryId = number;

/**
 * Can either be the pages identifier or its title
 */
export type WikiPageIdentifier = string;

/**
 * If given fields for privacy policy agreements are not mandotory. Can only be used if setting is allowed in admin settings.
 */
export type WithoutPrivacyPolicyAgreement = boolean;

export type PostActionsData = {
    body: {
        domain_type: Array<string>;
        filter?: {
            [key: string]: unknown;
        };
    };
    path?: never;
    query: {
        /**
         * Types of domain objects to retrieve
         */
        'domain_type[]': Array<string>;
    };
    url: '/actions';
};

export type PostActionsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostActionsError = PostActionsErrors[keyof PostActionsErrors];

export type PostActionsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<Action>;
        meta: MetaCount;
    };
};

export type PostActionsResponse = PostActionsResponses[keyof PostActionsResponses];

export type GetAddressesSearchData = {
    body?: never;
    path?: never;
    query: {
        query: string;
    };
    url: '/addresses/search';
};

export type GetAddressesSearchErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAddressesSearchError = GetAddressesSearchErrors[keyof GetAddressesSearchErrors];

export type GetAddressesSearchResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<AddressSearchResult>;
        meta?: MetaCount;
    };
};

export type GetAddressesSearchResponse = GetAddressesSearchResponses[keyof GetAddressesSearchResponses];

export type GetAddressesDomainTypeDomainIdentifierData = {
    body?: never;
    path: {
        domainType: string;
        domainIdentifier: string;
    };
    query?: never;
    url: '/addresses/{domainType}/{domainIdentifier}';
};

export type GetAddressesDomainTypeDomainIdentifierErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAddressesDomainTypeDomainIdentifierError =
    GetAddressesDomainTypeDomainIdentifierErrors[keyof GetAddressesDomainTypeDomainIdentifierErrors];

export type GetAddressesDomainTypeDomainIdentifierResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Address>;
        meta?: MetaCount;
    };
};

export type GetAddressesDomainTypeDomainIdentifierResponse =
    GetAddressesDomainTypeDomainIdentifierResponses[keyof GetAddressesDomainTypeDomainIdentifierResponses];

export type PostAddressesDomainTypeDomainIdentifierData = {
    body?: AddressCreate;
    path: {
        domainType: string;
        domainIdentifier: string;
    };
    query?: never;
    url: '/addresses/{domainType}/{domainIdentifier}';
};

export type PostAddressesDomainTypeDomainIdentifierErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostAddressesDomainTypeDomainIdentifierError =
    PostAddressesDomainTypeDomainIdentifierErrors[keyof PostAddressesDomainTypeDomainIdentifierErrors];

export type PostAddressesDomainTypeDomainIdentifierResponses = {
    /**
     * OK
     */
    200: {
        data?: Address;
        meta?: MetaCount;
    };
};

export type PostAddressesDomainTypeDomainIdentifierResponse =
    PostAddressesDomainTypeDomainIdentifierResponses[keyof PostAddressesDomainTypeDomainIdentifierResponses];

export type DeleteAddressesDomainTypeDomainIdentifierAddressIdData = {
    body?: never;
    path: {
        domainType: unknown;
        domainIdentifier: string;
        addressId: number;
    };
    query?: never;
    url: '/addresses/{domainType}/{domainIdentifier}/{addressId}';
};

export type DeleteAddressesDomainTypeDomainIdentifierAddressIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteAddressesDomainTypeDomainIdentifierAddressIdError =
    DeleteAddressesDomainTypeDomainIdentifierAddressIdErrors[keyof DeleteAddressesDomainTypeDomainIdentifierAddressIdErrors];

export type DeleteAddressesDomainTypeDomainIdentifierAddressIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteAddressesDomainTypeDomainIdentifierAddressIdResponse =
    DeleteAddressesDomainTypeDomainIdentifierAddressIdResponses[keyof DeleteAddressesDomainTypeDomainIdentifierAddressIdResponses];

export type PutAddressesDomainTypeDomainIdentifierAddressIdData = {
    body?: AddressUpdate;
    path: {
        domainType: unknown;
        domainIdentifier: string;
        addressId: number;
    };
    query?: never;
    url: '/addresses/{domainType}/{domainIdentifier}/{addressId}';
};

export type PutAddressesDomainTypeDomainIdentifierAddressIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutAddressesDomainTypeDomainIdentifierAddressIdError =
    PutAddressesDomainTypeDomainIdentifierAddressIdErrors[keyof PutAddressesDomainTypeDomainIdentifierAddressIdErrors];

export type PutAddressesDomainTypeDomainIdentifierAddressIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Address;
        meta?: MetaCount;
    };
};

export type PutAddressesDomainTypeDomainIdentifierAddressIdResponse =
    PutAddressesDomainTypeDomainIdentifierAddressIdResponses[keyof PutAddressesDomainTypeDomainIdentifierAddressIdResponses];

export type SendAgendaEmailData = {
    /**
     * E-Mail information and recipients
     */
    body: {
        /**
         * E-Mail body.
         */
        body: string;
        /**
         * Array of event IDs. Multiple event IDs MUST be integrated events, i.e. all events share the same agenda.
         */
        eventIds: Array<number>;
        /**
         * Array of person IDs.
         */
        recipients: Array<number>;
        /**
         * Flag if a mail should be send to the user sending the request.
         */
        sendCopyToMe?: boolean;
        /**
         * E-Mail subject.
         */
        subject: string;
    };
    path?: never;
    query?: never;
    url: '/agendas/send';
};

export type SendAgendaEmailErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type SendAgendaEmailError = SendAgendaEmailErrors[keyof SendAgendaEmailErrors];

export type SendAgendaEmailResponses = {
    /**
     * Successfully sent mails to some recipients.
     */
    200: {
        args?: {
            count?: number;
        };
        /**
         * Array of DomainObjects with people, who have no eMail Addresses.
         */
        errors?: Array<{
            [key: string]: unknown;
        }>;
        message?: string;
        messageKey?: string;
        translatedMessage?: string;
    };
    /**
     * Successfully sent mails to all recipients the user can see.
     */
    204: void;
};

export type SendAgendaEmailResponse = SendAgendaEmailResponses[keyof SendAgendaEmailResponses];

export type AgendaExportData = {
    body?: {
        appendArrangement?: boolean;
        exportSong?: boolean;
        withCategory?: boolean;
    };
    path: {
        agendaId: string;
    };
    query: {
        target: 'SONG_BEAMER' | 'PRO_PRESENTER_6' | 'PRO_PRESENTER_7';
    };
    url: '/agendas/{agendaId}/export';
};

export type AgendaExportErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type AgendaExportError = AgendaExportErrors[keyof AgendaExportErrors];

export type AgendaExportResponses = {
    /**
     * OK
     */
    200: {
        data?: {
            songsWithMultipleFiles?: Array<string>;
            url?: string;
        };
    };
};

export type AgendaExportResponse = AgendaExportResponses[keyof AgendaExportResponses];

export type GetBookingsData = {
    body?: never;
    path?: never;
    query: {
        'include[]'?: Array<'conflicts' | 'involvedPersonsDomainObjects'>;
        'resource_ids[]': Array<number>;
        query?: string;
        /**
         * Filters all bookings created by this person or has this person set as onBehalfOfPid
         */
        person_id?: number;
        /**
         * The status id can be one or more of the following values: 1 (pending), 2 (approved), 3 (canceled), 99 (deleted) -- default: 1, 2
         */
        'status_ids[]'?: Array<number>;
        /**
         * Return entities starting from this date.
         */
        from?: DateString;
        /**
         * Return entities up to this date.
         */
        to?: DateString;
    };
    url: '/bookings';
};

export type GetBookingsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetBookingsError = GetBookingsErrors[keyof GetBookingsErrors];

export type GetBookingsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<BookingCalculatedWithIncludes>;
        meta?: MetaCount;
    };
};

export type GetBookingsResponse = GetBookingsResponses[keyof GetBookingsResponses];

export type PostBookingsData = {
    /**
     * booking data
     */
    body?: BookingCreate;
    path?: never;
    query?: never;
    url: '/bookings';
};

export type PostBookingsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostBookingsError = PostBookingsErrors[keyof PostBookingsErrors];

export type PostBookingsResponses = {
    /**
     * OK
     */
    201: {
        data?: BookingBase;
    };
};

export type PostBookingsResponse = PostBookingsResponses[keyof PostBookingsResponses];

export type CalculateBookingConflictsData = {
    body?: BookingConflictRequestBody;
    path?: never;
    query?: never;
    url: '/bookings/conflicts';
};

export type CalculateBookingConflictsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type CalculateBookingConflictsError = CalculateBookingConflictsErrors[keyof CalculateBookingConflictsErrors];

export type CalculateBookingConflictsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<BookingConflict>;
        meta?: MetaCount;
    };
};

export type CalculateBookingConflictsResponse =
    CalculateBookingConflictsResponses[keyof CalculateBookingConflictsResponses];

export type DeleteBookingsData = {
    body?: never;
    path: {
        /**
         * ID of booking
         */
        bookingId: number;
    };
    query?: never;
    url: '/bookings/{bookingId}';
};

export type DeleteBookingsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteBookingsError = DeleteBookingsErrors[keyof DeleteBookingsErrors];

export type DeleteBookingsResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteBookingsResponse = DeleteBookingsResponses[keyof DeleteBookingsResponses];

export type GetBookingBookingIdData = {
    body?: never;
    path: {
        /**
         * ID of booking
         */
        bookingId: number;
    };
    query?: never;
    url: '/bookings/{bookingId}';
};

export type GetBookingBookingIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetBookingBookingIdError = GetBookingBookingIdErrors[keyof GetBookingBookingIdErrors];

export type GetBookingBookingIdResponses = {
    /**
     * OK
     */
    200: {
        data?: {
            additionalInfos: Array<string>;
            booking: BookingBase;
            /**
             * Object keys are the date in YYYY-MM-DD
             */
            calculatedDates: {
                [key: string]: {
                    endDate: ZuluDate;
                    startDate: ZuluDate;
                };
            };
        };
    };
};

export type GetBookingBookingIdResponse = GetBookingBookingIdResponses[keyof GetBookingBookingIdResponses];

export type SplitAndUpdateBookingData = {
    body: BookingCreate & {
        bookingId: number;
        splitDate: DateString;
        splitUntilEnd: boolean;
    };
    path: {
        /**
         * ID of booking
         */
        bookingId: number;
    };
    query?: never;
    url: '/bookings/{bookingId}';
};

export type SplitAndUpdateBookingErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type SplitAndUpdateBookingError = SplitAndUpdateBookingErrors[keyof SplitAndUpdateBookingErrors];

export type UpdateBookingData = {
    body: BookingCreate & {
        bookingId: number;
    };
    path: {
        /**
         * ID of booking
         */
        bookingId: number;
    };
    query?: never;
    url: '/bookings/{bookingId}';
};

export type UpdateBookingErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateBookingError = UpdateBookingErrors[keyof UpdateBookingErrors];

export type UpdateBookingResponses = {
    /**
     * OK
     */
    200: {
        data?: BookingBase;
    };
};

export type UpdateBookingResponse = UpdateBookingResponses[keyof UpdateBookingResponses];

export type CalculateUpdatedBookingConflictsData = {
    body?: BookingConflictRequestBody;
    path?: never;
    query?: never;
    url: '/bookings/{bookingId}/conflicts';
};

export type CalculateUpdatedBookingConflictsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type CalculateUpdatedBookingConflictsError =
    CalculateUpdatedBookingConflictsErrors[keyof CalculateUpdatedBookingConflictsErrors];

export type CalculateUpdatedBookingConflictsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<BookingConflict>;
        meta?: MetaCount;
    };
};

export type CalculateUpdatedBookingConflictsResponse =
    CalculateUpdatedBookingConflictsResponses[keyof CalculateUpdatedBookingConflictsResponses];

export type PutBookingsBookingIdAnswerData = {
    body?: never;
    path: {
        /**
         * ID of booking
         */
        bookingId: number;
        /**
         * Answer given to booking request
         */
        answer: 'approve' | 'reject' | 'reset';
    };
    query?: never;
    url: '/bookings/{bookingId}/{answer}';
};

export type PutBookingsBookingIdAnswerErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutBookingsBookingIdAnswerError = PutBookingsBookingIdAnswerErrors[keyof PutBookingsBookingIdAnswerErrors];

export type PutBookingsBookingIdAnswerResponses = {
    /**
     * OK
     */
    200: {
        data?: BookingBase;
    };
};

export type PutBookingsBookingIdAnswerResponse =
    PutBookingsBookingIdAnswerResponses[keyof PutBookingsBookingIdAnswerResponses];

export type PostBulkjobsData = {
    body?: BulkJobRequestBody;
    path: {
        /**
         * type of job
         */
        domainType: string;
        /**
         * key of job
         */
        jobKey: string;
    };
    query?: never;
    url: '/bulkjobs/{domainType}/{jobKey}/enqueue';
};

export type PostBulkjobsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostBulkjobsError = PostBulkjobsErrors[keyof PostBulkjobsErrors];

export type PostBulkjobsResponses = {
    /**
     * OK
     */
    201: {
        data?: BulkResultNew;
    };
};

export type PostBulkjobsResponse = PostBulkjobsResponses[keyof PostBulkjobsResponses];

export type PostBulkjobsInfosData = {
    body?: BulkJobRequestBody;
    path: {
        /**
         * type of job
         */
        domainType: string;
        /**
         * key of job
         */
        jobKey: string;
    };
    query?: never;
    url: '/bulkjobs/{domainType}/{jobKey}/infos';
};

export type PostBulkjobsInfosErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostBulkjobsInfosError = PostBulkjobsInfosErrors[keyof PostBulkjobsInfosErrors];

export type PostBulkjobsInfosResponses = {
    /**
     * OK
     */
    200: {
        data?: BulkInfos;
    };
};

export type PostBulkjobsInfosResponse = PostBulkjobsInfosResponses[keyof PostBulkjobsInfosResponses];

export type GetCalendarsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/calendars';
};

export type GetCalendarsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetCalendarsError = GetCalendarsErrors[keyof GetCalendarsErrors];

export type GetCalendarsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<Calendar>;
        meta: MetaCount;
    };
};

export type GetCalendarsResponse = GetCalendarsResponses[keyof GetCalendarsResponses];

export type PostCalendarsData = {
    body?: CalendarCreate;
    path?: never;
    query?: never;
    url: '/calendars';
};

export type PostCalendarsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostCalendarsError = PostCalendarsErrors[keyof PostCalendarsErrors];

export type PostCalendarsResponses = {
    /**
     * OK
     */
    201: {
        data?: Calendar;
    };
};

export type PostCalendarsResponse = PostCalendarsResponses[keyof PostCalendarsResponses];

export type GetCalendarsAppointmentsData = {
    body?: never;
    path?: never;
    query: {
        'calendar_ids[]': Array<number>;
        'include[]'?: Array<'titleSuffix' | 'event' | 'group' | 'meetingRequests' | 'bookings'>;
        /**
         * Return entities starting from this date.
         */
        from?: DateString;
        /**
         * Return entities up to this date.
         */
        to?: DateString;
        query?: string;
    };
    url: '/calendars/appointments';
};

export type GetCalendarsAppointmentsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetCalendarsAppointmentsError = GetCalendarsAppointmentsErrors[keyof GetCalendarsAppointmentsErrors];

export type GetCalendarsAppointmentsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<AppointmentCalculatedWithIncludes>;
        meta?: MetaCount;
    };
};

export type GetCalendarsAppointmentsResponse =
    GetCalendarsAppointmentsResponses[keyof GetCalendarsAppointmentsResponses];

export type GetAllTemplatesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/calendars/appointments/templates';
};

export type GetAllTemplatesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllTemplatesError = GetAllTemplatesErrors[keyof GetAllTemplatesErrors];

export type GetAllTemplatesResponses = {
    /**
     * get all appointment templates
     */
    200: {
        data?: Array<AppointmentTemplateGet>;
    };
};

export type GetAllTemplatesResponse = GetAllTemplatesResponses[keyof GetAllTemplatesResponses];

export type CreateTemplateData = {
    /**
     * appointment template data
     */
    body?: AppointmentTemplatePost;
    path?: never;
    query?: never;
    url: '/calendars/appointments/templates';
};

export type CreateTemplateErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type CreateTemplateError = CreateTemplateErrors[keyof CreateTemplateErrors];

export type CreateTemplateResponses = {
    /**
     * new appointment template
     */
    200: {
        data?: Array<AppointmentTemplateGet>;
    };
};

export type CreateTemplateResponse = CreateTemplateResponses[keyof CreateTemplateResponses];

export type DeleteTemplateData = {
    body?: never;
    path: {
        /**
         * ID of appointment template
         */
        templateId: number;
    };
    query?: never;
    url: '/calendars/appointments/templates/{templateId}';
};

export type DeleteTemplateErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteTemplateError = DeleteTemplateErrors[keyof DeleteTemplateErrors];

export type DeleteTemplateResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteTemplateResponse = DeleteTemplateResponses[keyof DeleteTemplateResponses];

export type GetTemplateByIdData = {
    body?: never;
    path: {
        /**
         * ID of appointment template
         */
        templateId: number;
    };
    query?: never;
    url: '/calendars/appointments/templates/{templateId}';
};

export type GetTemplateByIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetTemplateByIdError = GetTemplateByIdErrors[keyof GetTemplateByIdErrors];

export type GetTemplateByIdResponses = {
    /**
     * get appointment template
     */
    200: {
        data?: AppointmentTemplateGet;
    };
};

export type GetTemplateByIdResponse = GetTemplateByIdResponses[keyof GetTemplateByIdResponses];

export type UpdateTemplateData = {
    /**
     * appointment template data
     */
    body: AppointmentTemplateGet;
    path: {
        /**
         * ID of appointment template
         */
        templateId: number;
    };
    query?: never;
    url: '/calendars/appointments/templates/{templateId}';
};

export type UpdateTemplateErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateTemplateError = UpdateTemplateErrors[keyof UpdateTemplateErrors];

export type UpdateTemplateResponses = {
    /**
     * Updated appointment template
     */
    200: {
        data?: AppointmentTemplateGet;
    };
};

export type UpdateTemplateResponse = UpdateTemplateResponses[keyof UpdateTemplateResponses];

export type GetCalendarsAppointmentsAppointmentIdStartDateData = {
    body?: never;
    path: {
        /**
         * ID of appointment
         */
        appointmentId: number;
        startDate: string;
    };
    query?: never;
    url: '/calendars/appointments/{appointmentId}/{startDate}';
};

export type GetCalendarsAppointmentsAppointmentIdStartDateErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetCalendarsAppointmentsAppointmentIdStartDateError =
    GetCalendarsAppointmentsAppointmentIdStartDateErrors[keyof GetCalendarsAppointmentsAppointmentIdStartDateErrors];

export type GetCalendarsAppointmentsAppointmentIdStartDateResponses = {
    200: {
        data: {
            appointment: AppointmentCalculated;
            bookings: Array<AppointmentCalculated>;
            event: DomainObjectEvent;
            group: DomainObjectGroup;
            meetingRequests: Array<MeetingRequest>;
        };
    };
};

export type GetCalendarsAppointmentsAppointmentIdStartDateResponse =
    GetCalendarsAppointmentsAppointmentIdStartDateResponses[keyof GetCalendarsAppointmentsAppointmentIdStartDateResponses];

export type DeleteCalendarsCalendarIdData = {
    body?: never;
    path: {
        /**
         * ID of Calendar
         */
        calendarId: number;
    };
    query?: never;
    url: '/calendars/{calendarId}';
};

export type DeleteCalendarsCalendarIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteCalendarsCalendarIdError = DeleteCalendarsCalendarIdErrors[keyof DeleteCalendarsCalendarIdErrors];

export type DeleteCalendarsCalendarIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Calendar;
    };
};

export type DeleteCalendarsCalendarIdResponse =
    DeleteCalendarsCalendarIdResponses[keyof DeleteCalendarsCalendarIdResponses];

export type GetCalendarsCalendarIdData = {
    body?: never;
    path: {
        /**
         * ID of Calendar
         */
        calendarId: number;
    };
    query?: never;
    url: '/calendars/{calendarId}';
};

export type GetCalendarsCalendarIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetCalendarsCalendarIdError = GetCalendarsCalendarIdErrors[keyof GetCalendarsCalendarIdErrors];

export type GetCalendarsCalendarIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Calendar;
    };
};

export type GetCalendarsCalendarIdResponse = GetCalendarsCalendarIdResponses[keyof GetCalendarsCalendarIdResponses];

export type PutCalendarsCalendarIdData = {
    body?: CalendarUpdate;
    path: {
        /**
         * ID of Calendar
         */
        calendarId: number;
    };
    query?: never;
    url: '/calendars/{calendarId}';
};

export type PutCalendarsCalendarIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutCalendarsCalendarIdError = PutCalendarsCalendarIdErrors[keyof PutCalendarsCalendarIdErrors];

export type PutCalendarsCalendarIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Calendar;
    };
};

export type PutCalendarsCalendarIdResponse = PutCalendarsCalendarIdResponses[keyof PutCalendarsCalendarIdResponses];

export type GetCalendarsCalendarIdAppointmentsData = {
    body?: never;
    path: {
        /**
         * ID of Calendar
         */
        calendarId: number;
    };
    query?: {
        /**
         * Return entities starting from this date.
         */
        from?: DateString;
        /**
         * Return entities up to this date.
         */
        to?: DateString;
        query?: string;
        'include[]'?: Array<'titleSuffix' | 'event' | 'group' | 'meetingRequests' | 'bookings'>;
    };
    url: '/calendars/{calendarId}/appointments';
};

export type GetCalendarsCalendarIdAppointmentsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetCalendarsCalendarIdAppointmentsError =
    GetCalendarsCalendarIdAppointmentsErrors[keyof GetCalendarsCalendarIdAppointmentsErrors];

export type GetCalendarsCalendarIdAppointmentsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<AppointmentCalculated>;
    };
};

export type GetCalendarsCalendarIdAppointmentsResponse =
    GetCalendarsCalendarIdAppointmentsResponses[keyof GetCalendarsCalendarIdAppointmentsResponses];

export type PostCalendarsCalendarIdAppointmentsData = {
    body?: AppointmentCreate;
    path: {
        /**
         * ID of Calendar
         */
        calendarId: number;
    };
    query?: never;
    url: '/calendars/{calendarId}/appointments';
};

export type PostCalendarsCalendarIdAppointmentsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostCalendarsCalendarIdAppointmentsError =
    PostCalendarsCalendarIdAppointmentsErrors[keyof PostCalendarsCalendarIdAppointmentsErrors];

export type PostCalendarsCalendarIdAppointmentsResponses = {
    /**
     * OK
     */
    201: unknown;
};

export type DeleteCalendarsCalendarIdAppointmentsAppointmentIdData = {
    body?: never;
    path: {
        /**
         * ID of Calendar
         */
        calendarId: number;
        /**
         * ID of appointment
         */
        appointmentId: number;
    };
    query?: never;
    url: '/calendars/{calendarId}/appointments/{appointmentId}';
};

export type DeleteCalendarsCalendarIdAppointmentsAppointmentIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteCalendarsCalendarIdAppointmentsAppointmentIdError =
    DeleteCalendarsCalendarIdAppointmentsAppointmentIdErrors[keyof DeleteCalendarsCalendarIdAppointmentsAppointmentIdErrors];

export type DeleteCalendarsCalendarIdAppointmentsAppointmentIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteCalendarsCalendarIdAppointmentsAppointmentIdResponse =
    DeleteCalendarsCalendarIdAppointmentsAppointmentIdResponses[keyof DeleteCalendarsCalendarIdAppointmentsAppointmentIdResponses];

export type GetCalendarsCalendarIdAppointmentsAppointmentIdData = {
    body?: never;
    path: {
        /**
         * ID of Calendar
         */
        calendarId: number;
        /**
         * ID of appointment
         */
        appointmentId: number;
    };
    query?: never;
    url: '/calendars/{calendarId}/appointments/{appointmentId}';
};

export type GetCalendarsCalendarIdAppointmentsAppointmentIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetCalendarsCalendarIdAppointmentsAppointmentIdError =
    GetCalendarsCalendarIdAppointmentsAppointmentIdErrors[keyof GetCalendarsCalendarIdAppointmentsAppointmentIdErrors];

export type GetCalendarsCalendarIdAppointmentsAppointmentIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<AppointmentCalculated>;
    };
};

export type GetCalendarsCalendarIdAppointmentsAppointmentIdResponse =
    GetCalendarsCalendarIdAppointmentsAppointmentIdResponses[keyof GetCalendarsCalendarIdAppointmentsAppointmentIdResponses];

export type PutCalendarsCalendarIdAppointmentsAppointmentIdData = {
    body?: AppointmentCreate & {
        appointmentId: number;
    };
    path: {
        /**
         * ID of Calendar
         */
        calendarId: number;
        /**
         * ID of appointment
         */
        appointmentId: number;
    };
    query?: never;
    url: '/calendars/{calendarId}/appointments/{appointmentId}';
};

export type PutCalendarsCalendarIdAppointmentsAppointmentIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutCalendarsCalendarIdAppointmentsAppointmentIdError =
    PutCalendarsCalendarIdAppointmentsAppointmentIdErrors[keyof PutCalendarsCalendarIdAppointmentsAppointmentIdErrors];

export type PutCalendarsCalendarIdAppointmentsAppointmentIdResponses = {
    /**
     * OK
     */
    200: {
        data?: AppointmentCalculated;
    };
};

export type PutCalendarsCalendarIdAppointmentsAppointmentIdResponse =
    PutCalendarsCalendarIdAppointmentsAppointmentIdResponses[keyof PutCalendarsCalendarIdAppointmentsAppointmentIdResponses];

export type ChangeImpactData = {
    body?: never;
    path: {
        /**
         * ID of Calendar
         */
        calendarId: number;
        /**
         * ID of appointment
         */
        appointmentId: number;
    };
    query?: {
        additionals?: Array<AppointmentAdditionals>;
        appointmentId?: number;
        endDate?: string;
        exceptions?: Array<AppointmentExeptions>;
        repeatFrequency?: number;
        repeatId?: number;
        repeatOption?: number;
        repeatUntil?: string;
        startDate?: string;
    };
    url: '/calendars/{calendarId}/appointments/{appointmentId}/changeimpact';
};

export type ChangeImpactErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type ChangeImpactError = ChangeImpactErrors[keyof ChangeImpactErrors];

export type ChangeImpactResponses = {
    200: {
        data: {
            appointment: AppointmentCalculated;
            bookings: Array<AppointmentCalculated>;
            event: DomainObjectEvent;
            group: DomainObjectGroup;
            meetingRequests: Array<MeetingRequest>;
        };
    };
};

export type ChangeImpactResponse = ChangeImpactResponses[keyof ChangeImpactResponses];

export type GetCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsData = {
    body?: never;
    path: {
        /**
         * ID of Calendar
         */
        calendarId: number;
        /**
         * ID of appointment
         */
        appointmentId: number;
    };
    query?: never;
    url: '/calendars/{calendarId}/appointments/{appointmentId}/meetingrequests';
};

export type GetCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsError =
    GetCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsErrors[keyof GetCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsErrors];

export type GetCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsResponses = {
    /**
     * OK
     */
    200: {
        data?: MeetingRequest;
        meta?: {
            count?: number;
        };
    };
};

export type GetCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsResponse =
    GetCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsResponses[keyof GetCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsResponses];

export type PostCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsData = {
    body?: never;
    path: {
        /**
         * ID of Calendar
         */
        calendarId: number;
        /**
         * ID of appointment
         */
        appointmentId: number;
    };
    query: {
        personId: number;
    };
    url: '/calendars/{calendarId}/appointments/{appointmentId}/meetingrequests';
};

export type PostCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsError =
    PostCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsErrors[keyof PostCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsErrors];

export type PostCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsResponses = {
    /**
     * OK
     */
    201: MeetingRequest;
};

export type PostCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsResponse =
    PostCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsResponses[keyof PostCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsResponses];

export type DeleteCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdData = {
    body?: never;
    path: {
        /**
         * ID of Calendar
         */
        calendarId: number;
        /**
         * ID of appointment
         */
        appointmentId: number;
        /**
         * ID of meeting request
         */
        meetingRequestId: number;
    };
    query?: never;
    url: '/calendars/{calendarId}/appointments/{appointmentId}/meetingrequests/{meetingRequestId}';
};

export type DeleteCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdError =
    DeleteCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdErrors[keyof DeleteCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdErrors];

export type DeleteCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeleteCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdResponse =
    DeleteCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdResponses[keyof DeleteCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdResponses];

export type PutCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdData = {
    body?: never;
    path: {
        /**
         * ID of Calendar
         */
        calendarId: number;
        /**
         * ID of appointment
         */
        appointmentId: number;
        /**
         * ID of meeting request
         */
        meetingRequestId: number;
    };
    query?: never;
    url: '/calendars/{calendarId}/appointments/{appointmentId}/meetingrequests/{meetingRequestId}';
};

export type PutCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdError =
    PutCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdErrors[keyof PutCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdErrors];

export type PutCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdResponses = {
    /**
     * OK
     */
    200: MeetingRequest;
};

export type PutCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdResponse =
    PutCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdResponses[keyof PutCalendarsCalendarIdAppointmentsAppointmentIdMeetingrequestsMeetingRequestIdResponses];

export type GetCalendarsCalendarIdAppointmentsAppointmentIdStartDateData = {
    body?: never;
    path: {
        /**
         * ID of Calendar
         */
        calendarId: number;
        /**
         * ID of appointment
         */
        appointmentId: number;
        startDate: string;
    };
    query?: never;
    url: '/calendars/{calendarId}/appointments/{appointmentId}/{startDate}';
};

export type GetCalendarsCalendarIdAppointmentsAppointmentIdStartDateErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetCalendarsCalendarIdAppointmentsAppointmentIdStartDateError =
    GetCalendarsCalendarIdAppointmentsAppointmentIdStartDateErrors[keyof GetCalendarsCalendarIdAppointmentsAppointmentIdStartDateErrors];

export type GetCalendarsCalendarIdAppointmentsAppointmentIdStartDateResponses = {
    200: {
        data: {
            appointment: AppointmentCalculated;
            bookings: Array<AppointmentCalculated>;
            event: DomainObjectEvent;
            group: DomainObjectGroup;
            meetingRequests: Array<MeetingRequest>;
        };
    };
};

export type GetCalendarsCalendarIdAppointmentsAppointmentIdStartDateResponse =
    GetCalendarsCalendarIdAppointmentsAppointmentIdStartDateResponses[keyof GetCalendarsCalendarIdAppointmentsAppointmentIdStartDateResponses];

export type GetCalendarsCalendarIdMeetingrequestpersonsData = {
    body?: never;
    path: {
        /**
         * ID of Calendar
         */
        calendarId: number;
    };
    query?: never;
    url: '/calendars/{calendarId}/meetingrequestpersons';
};

export type GetCalendarsCalendarIdMeetingrequestpersonsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetCalendarsCalendarIdMeetingrequestpersonsError =
    GetCalendarsCalendarIdMeetingrequestpersonsErrors[keyof GetCalendarsCalendarIdMeetingrequestpersonsErrors];

export type GetCalendarsCalendarIdMeetingrequestpersonsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<{
            groupName?: string | null;
            hasEmail?: boolean;
            person?: DomainObjectPerson;
            type?: string;
        }>;
        meta?: {
            count?: number;
        };
    };
};

export type GetCalendarsCalendarIdMeetingrequestpersonsResponse =
    GetCalendarsCalendarIdMeetingrequestpersonsResponses[keyof GetCalendarsCalendarIdMeetingrequestpersonsResponses];

export type GetAllCampusesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/campuses';
};

export type GetAllCampusesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllCampusesError = GetAllCampusesErrors[keyof GetAllCampusesErrors];

export type GetAllCampusesResponses = {
    /**
     * All campuses
     */
    200: {
        data?: Array<Campus>;
        meta?: MetaCount;
    };
};

export type GetAllCampusesResponse = GetAllCampusesResponses[keyof GetAllCampusesResponses];

export type CreateNewCampusData = {
    body?: {
        name: string;
        shorty: string;
        sortKey?: number;
    };
    path?: never;
    query?: never;
    url: '/campuses';
};

export type CreateNewCampusErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * License limit reached. Update your license to perform this action.
     */
    402: unknown;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type CreateNewCampusError = CreateNewCampusErrors[keyof CreateNewCampusErrors];

export type CreateNewCampusResponses = {
    /**
     * Successfuly created
     */
    201: {
        data?: Campus;
        meta?: MetaCount;
    };
};

export type CreateNewCampusResponse = CreateNewCampusResponses[keyof CreateNewCampusResponses];

export type DeleteCampusData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/campuses/{id}';
};

export type DeleteCampusErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteCampusError = DeleteCampusErrors[keyof DeleteCampusErrors];

export type DeleteCampusResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteCampusResponse = DeleteCampusResponses[keyof DeleteCampusResponses];

export type GetCampusData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/campuses/{id}';
};

export type GetCampusErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetCampusError = GetCampusErrors[keyof GetCampusErrors];

export type GetCampusResponses = {
    /**
     * Successful Response
     */
    200: {
        data?: Campus;
    };
};

export type GetCampusResponse = GetCampusResponses[keyof GetCampusResponses];

export type UpdateCampusData = {
    /**
     * New values for campus
     */
    body: ProfileUpdate;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/campuses/{id}';
};

export type UpdateCampusErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateCampusError = UpdateCampusErrors[keyof UpdateCampusErrors];

export type UpdateCampusResponses = {
    /**
     * Successfully updated
     */
    200: {
        data?: Campus;
    };
};

export type UpdateCampusResponse = UpdateCampusResponses[keyof UpdateCampusResponses];

export type GetCaptchaData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/captcha';
};

export type GetCaptchaErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetCaptchaError = GetCaptchaErrors[keyof GetCaptchaErrors];

export type GetCaptchaResponses = {
    /**
     * Captcha Challenge
     */
    200: {
        algorithm: string;
        challenge: string;
        maxnumber: number;
        salt: string;
        signature: string;
    };
};

export type GetCaptchaResponse = GetCaptchaResponses[keyof GetCaptchaResponses];

export type PostCaptchaData = {
    body: {
        solution: string;
    };
    path?: never;
    query?: never;
    url: '/captcha';
};

export type PostCaptchaErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostCaptchaError = PostCaptchaErrors[keyof PostCaptchaErrors];

export type PostCaptchaResponses = {
    /**
     * Captcha Solution
     */
    200: {
        isValid: boolean;
    };
};

export type PostCaptchaResponse = PostCaptchaResponses[keyof PostCaptchaResponses];

export type GetAllChatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/chat';
};

export type GetAllChatsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAllChatsError = GetAllChatsErrors[keyof GetAllChatsErrors];

export type GetAllChatsResponses = {
    /**
     * Successful request
     */
    200: {
        data?: Chat;
    };
};

export type GetAllChatsResponse = GetAllChatsResponses[keyof GetAllChatsResponses];

export type CreateNewChatData = {
    /**
     * Chat to start
     */
    body: ChatNew;
    path?: never;
    query?: never;
    url: '/chat';
};

export type CreateNewChatErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type CreateNewChatError = CreateNewChatErrors[keyof CreateNewChatErrors];

export type CreateNewChatResponses = {
    /**
     * Successfuly created
     */
    201: {
        data?: Chat;
    };
};

export type CreateNewChatResponse = CreateNewChatResponses[keyof CreateNewChatResponses];

export type DeleteChatData = {
    body?: never;
    path: {
        /**
         * GUID for Entity
         */
        guid: string;
    };
    query?: never;
    url: '/chat/{guid}';
};

export type DeleteChatErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteChatError = DeleteChatErrors[keyof DeleteChatErrors];

export type DeleteChatResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteChatResponse = DeleteChatResponses[keyof DeleteChatResponses];

export type UpdateChatData = {
    /**
     * data to update
     */
    body: ChatUpdate;
    path: {
        /**
         * GUID for Entity
         */
        guid: string;
    };
    query?: never;
    url: '/chat/{guid}';
};

export type UpdateChatErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateChatError = UpdateChatErrors[keyof UpdateChatErrors];

export type UpdateChatResponses = {
    /**
     * Successfuly updated
     */
    200: {
        data?: Chat;
    };
};

export type UpdateChatResponse = UpdateChatResponses[keyof UpdateChatResponses];

export type PostCheckinPersonsData = {
    body?: {
        group: {
            /**
             * Key-Value mapping of group member fields. Key: field Id; Value: Input
             */
            fields: {
                [key: string]: unknown;
            };
            id: number;
            /**
             * If `true` the group size is ignored, and a person can be added to a full group.
             */
            ignoreGroupSize: boolean;
            /**
             * Key-Value Mapping of person fields in group. Key: Person field name; Value: Input
             */
            personFields: {
                [key: string]: unknown;
            };
        };
        /**
         * See `POST /persons`
         */
        person: {
            [key: string]: unknown;
        };
        tagId: number;
    };
    path?: never;
    query?: never;
    url: '/checkin/persons';
};

export type PostCheckinPersonsErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    409: {
        data: {
            args: Array<{
                [key: string]: unknown;
            }>;
            errors: Array<{
                [key: string]: unknown;
            }>;
            message: string;
            messageKey: string;
            translatedMessage: string;
        };
    };
};

export type PostCheckinPersonsError = PostCheckinPersonsErrors[keyof PostCheckinPersonsErrors];

export type PostCheckinPersonsResponses = {
    /**
     * Created
     */
    201: {
        data?: Person;
    };
};

export type PostCheckinPersonsResponse = PostCheckinPersonsResponses[keyof PostCheckinPersonsResponses];

export type PutCheckinPersonsData = {
    body?: {
        group: {
            /**
             * Key-Value mapping of group member fields. Key: field Id; Value: Input
             */
            fields: {
                [key: string]: unknown;
            };
            id: number;
            /**
             * If `true` the group size is ignored, and a person can be added to a full group.
             */
            ignoreGroupSize: boolean;
            /**
             * Key-Value Mapping of person fields in group. Key: Person field name; Value: Input
             */
            personFields: {
                [key: string]: unknown;
            };
        };
        personId: number;
        tagId: number;
    };
    path?: never;
    query?: never;
    url: '/checkin/persons';
};

export type PutCheckinPersonsErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    409: {
        data: {
            args: Array<{
                [key: string]: unknown;
            }>;
            errors: Array<{
                [key: string]: unknown;
            }>;
            message: string;
            messageKey: string;
            translatedMessage: string;
        };
    };
};

export type PutCheckinPersonsError = PutCheckinPersonsErrors[keyof PutCheckinPersonsErrors];

export type PutCheckinPersonsResponses = {
    /**
     * OK
     */
    200: {
        data?: Person;
    };
};

export type PutCheckinPersonsResponse = PutCheckinPersonsResponses[keyof PutCheckinPersonsResponses];

export type PostChurchqueryDebugExportData = {
    body?: string;
    path?: never;
    query?: {
        /**
         * type of export
         */
        type?: string;
    };
    url: '/churchquery/debug/export';
};

export type PostChurchqueryDebugExportErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostChurchqueryDebugExportError = PostChurchqueryDebugExportErrors[keyof PostChurchqueryDebugExportErrors];

export type GetChurchqueryMasterdataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/churchquery/metadata';
};

export type GetChurchqueryMasterdataErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetChurchqueryMasterdataError = GetChurchqueryMasterdataErrors[keyof GetChurchqueryMasterdataErrors];

export type GetConfigData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * If `true` the response will contain the extended config.
         */
        extended?: boolean;
    };
    url: '/config';
};

export type GetConfigErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetConfigError = GetConfigErrors[keyof GetConfigErrors];

export type GetConfigResponses = {
    /**
     * OK
     */
    200: Config;
};

export type GetConfigResponse = GetConfigResponses[keyof GetConfigResponses];

export type PutConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/config';
};

export type PutConfigErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutConfigError = PutConfigErrors[keyof PutConfigErrors];

export type PutConfigResponses = {
    /**
     * OK
     */
    200: Config;
};

export type PutConfigResponse = PutConfigResponses[keyof PutConfigResponses];

export type GetContactlabelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/contactlabels';
};

export type GetContactlabelsErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetContactlabelsError = GetContactlabelsErrors[keyof GetContactlabelsErrors];

export type GetContactlabelsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<ContactLabel>;
        meta?: MetaCount;
    };
};

export type GetContactlabelsResponse = GetContactlabelsResponses[keyof GetContactlabelsResponses];

export type PostContactlabelsData = {
    body?: {
        /**
         * Indicator if label is new default.
         */
        isDefault: true | false;
        /**
         * Name of Contact Label
         */
        name: string;
        /**
         * SortKey
         */
        sortKey: number;
    };
    path?: never;
    query?: never;
    url: '/contactlabels';
};

export type PostContactlabelsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostContactlabelsError = PostContactlabelsErrors[keyof PostContactlabelsErrors];

export type PostContactlabelsResponses = {
    /**
     * Created
     */
    201: {
        data?: ContactLabel;
        meta?: MetaCount;
    };
};

export type PostContactlabelsResponse = PostContactlabelsResponses[keyof PostContactlabelsResponses];

export type DeleteContactlabelData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/contactlabels/{id}';
};

export type DeleteContactlabelErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteContactlabelError = DeleteContactlabelErrors[keyof DeleteContactlabelErrors];

export type DeleteContactlabelResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteContactlabelResponse = DeleteContactlabelResponses[keyof DeleteContactlabelResponses];

export type GetContactlabelData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/contactlabels/{id}';
};

export type GetContactlabelErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetContactlabelError = GetContactlabelErrors[keyof GetContactlabelErrors];

export type GetContactlabelResponses = {
    /**
     * OK
     */
    200: {
        data?: ContactLabel;
    };
};

export type GetContactlabelResponse = GetContactlabelResponses[keyof GetContactlabelResponses];

export type PutContactlabelData = {
    body?: {
        /**
         * Indicator if label is new default.
         */
        isDefault: boolean;
        /**
         * Name of Contact Label
         */
        name: string;
        /**
         * SortKey
         */
        sortKey: number;
    };
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/contactlabels/{id}';
};

export type PutContactlabelErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutContactlabelError = PutContactlabelErrors[keyof PutContactlabelErrors];

export type PutContactlabelResponses = {
    /**
     * OK
     */
    200: {
        data?: ContactLabel;
    };
};

export type PutContactlabelResponse = PutContactlabelResponses[keyof PutContactlabelResponses];

export type GetCsrftokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/csrftoken';
};

export type GetCsrftokenErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetCsrftokenError = GetCsrftokenErrors[keyof GetCsrftokenErrors];

export type GetCsrftokenResponses = {
    /**
     * CSRF Token
     */
    200: {
        data?: string;
    };
};

export type GetCsrftokenResponse = GetCsrftokenResponses[keyof GetCsrftokenResponses];

export type GetDbfieldsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Includes additional data in the response
         */
        'include[]'?: Array<'options'>;
    };
    url: '/dbfields';
};

export type GetDbfieldsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetDbfieldsError = GetDbfieldsErrors[keyof GetDbfieldsErrors];

export type GetDbfieldsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<DbField>;
        meta: {
            count: number;
        };
    };
};

export type GetDbfieldsResponse = GetDbfieldsResponses[keyof GetDbfieldsResponses];

export type PostDbfieldsData = {
    body: DbFieldCreate;
    path?: never;
    query?: never;
    url: '/dbfields';
};

export type PostDbfieldsErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostDbfieldsError = PostDbfieldsErrors[keyof PostDbfieldsErrors];

export type PostDbfieldsResponses = {
    /**
     * OK
     */
    201: {
        data?: DbField;
    };
};

export type PostDbfieldsResponse = PostDbfieldsResponses[keyof PostDbfieldsResponses];

export type DeleteDbfieldsFieldIdData = {
    body?: never;
    path: {
        fieldId: string;
    };
    query?: never;
    url: '/dbfields/{fieldId}';
};

export type DeleteDbfieldsFieldIdErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteDbfieldsFieldIdError = DeleteDbfieldsFieldIdErrors[keyof DeleteDbfieldsFieldIdErrors];

export type DeleteDbfieldsFieldIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteDbfieldsFieldIdResponse = DeleteDbfieldsFieldIdResponses[keyof DeleteDbfieldsFieldIdResponses];

export type GetDbfieldsFieldIdData = {
    body?: never;
    path: {
        fieldId: string;
    };
    query?: never;
    url: '/dbfields/{fieldId}';
};

export type GetDbfieldsFieldIdErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetDbfieldsFieldIdError = GetDbfieldsFieldIdErrors[keyof GetDbfieldsFieldIdErrors];

export type GetDbfieldsFieldIdResponses = {
    /**
     * OK
     */
    200: {
        data?: DbField;
    };
};

export type GetDbfieldsFieldIdResponse = GetDbfieldsFieldIdResponses[keyof GetDbfieldsFieldIdResponses];

export type PutDbfieldsFieldIdData = {
    body?: DbFieldUpdate;
    path: {
        fieldId: string;
    };
    query?: never;
    url: '/dbfields/{fieldId}';
};

export type PutDbfieldsFieldIdErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutDbfieldsFieldIdError = PutDbfieldsFieldIdErrors[keyof PutDbfieldsFieldIdErrors];

export type PutDbfieldsFieldIdResponses = {
    /**
     * OK
     */
    200: {
        data?: DbField;
    };
};

export type PutDbfieldsFieldIdResponse = PutDbfieldsFieldIdResponses[keyof PutDbfieldsFieldIdResponses];

export type GetDbfieldsFieldIdOptionsData = {
    body?: never;
    path: {
        fieldId: string;
    };
    query?: never;
    url: '/dbfields/{fieldId}/options';
};

export type GetDbfieldsFieldIdOptionsErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetDbfieldsFieldIdOptionsError = GetDbfieldsFieldIdOptionsErrors[keyof GetDbfieldsFieldIdOptionsErrors];

export type GetDbfieldsFieldIdOptionsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<DbFieldOption>;
        meta?: MetaCount;
    };
};

export type GetDbfieldsFieldIdOptionsResponse =
    GetDbfieldsFieldIdOptionsResponses[keyof GetDbfieldsFieldIdOptionsResponses];

export type PostDbfieldsFieldIdOptionsData = {
    body?: DbFieldOptionCreate;
    path: {
        fieldId: string;
    };
    query?: never;
    url: '/dbfields/{fieldId}/options';
};

export type PostDbfieldsFieldIdOptionsErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostDbfieldsFieldIdOptionsError = PostDbfieldsFieldIdOptionsErrors[keyof PostDbfieldsFieldIdOptionsErrors];

export type PostDbfieldsFieldIdOptionsResponses = {
    /**
     * OK
     */
    200: {
        data?: DbFieldOption;
    };
};

export type PostDbfieldsFieldIdOptionsResponse =
    PostDbfieldsFieldIdOptionsResponses[keyof PostDbfieldsFieldIdOptionsResponses];

export type GetDbfieldsFieldIdOptionsMetadataData = {
    body?: never;
    path: {
        fieldId: string;
    };
    query?: never;
    url: '/dbfields/{fieldId}/options/metadata';
};

export type GetDbfieldsFieldIdOptionsMetadataErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetDbfieldsFieldIdOptionsMetadataError =
    GetDbfieldsFieldIdOptionsMetadataErrors[keyof GetDbfieldsFieldIdOptionsMetadataErrors];

export type GetDbfieldsFieldIdOptionsMetadataResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<{
            isAutoIncrement?: boolean;
            length?: number | null;
            name?: string;
            type?: string;
        }>;
        meta?: {
            count?: number;
        };
    };
};

export type GetDbfieldsFieldIdOptionsMetadataResponse =
    GetDbfieldsFieldIdOptionsMetadataResponses[keyof GetDbfieldsFieldIdOptionsMetadataResponses];

export type DeleteDbfieldsFieldIdOptionsOptionIdData = {
    body?: never;
    path: {
        fieldId: string;
        optionId: string;
    };
    query?: never;
    url: '/dbfields/{fieldId}/options/{optionId}';
};

export type DeleteDbfieldsFieldIdOptionsOptionIdErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteDbfieldsFieldIdOptionsOptionIdError =
    DeleteDbfieldsFieldIdOptionsOptionIdErrors[keyof DeleteDbfieldsFieldIdOptionsOptionIdErrors];

export type DeleteDbfieldsFieldIdOptionsOptionIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteDbfieldsFieldIdOptionsOptionIdResponse =
    DeleteDbfieldsFieldIdOptionsOptionIdResponses[keyof DeleteDbfieldsFieldIdOptionsOptionIdResponses];

export type PutDbfieldsFieldIdOptionsOptionIdData = {
    body?: DbFieldOption;
    path: {
        fieldId: string;
        optionId: string;
    };
    query?: never;
    url: '/dbfields/{fieldId}/options/{optionId}';
};

export type PutDbfieldsFieldIdOptionsOptionIdErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutDbfieldsFieldIdOptionsOptionIdError =
    PutDbfieldsFieldIdOptionsOptionIdErrors[keyof PutDbfieldsFieldIdOptionsOptionIdErrors];

export type PutDbfieldsFieldIdOptionsOptionIdResponses = {
    /**
     * OK
     */
    200: {
        data?: DbFieldOption;
    };
};

export type PutDbfieldsFieldIdOptionsOptionIdResponse =
    PutDbfieldsFieldIdOptionsOptionIdResponses[keyof PutDbfieldsFieldIdOptionsOptionIdResponses];

export type GetDbfieldtypesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/dbfieldtypes';
};

export type GetDbfieldtypesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetDbfieldtypesError = GetDbfieldtypesErrors[keyof GetDbfieldtypesErrors];

export type GetDbfieldtypesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<{
            id?: number;
            internCode?: string;
            name?: string;
            sortKey?: number;
        }>;
        meta?: {
            count?: number;
        };
    };
};

export type GetDbfieldtypesResponse = GetDbfieldtypesResponses[keyof GetDbfieldtypesResponses];

export type GetDepartmentsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/departments';
};

export type GetDepartmentsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetDepartmentsError = GetDepartmentsErrors[keyof GetDepartmentsErrors];

export type GetDepartmentsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Department>;
        meta?: MetaCount;
    };
};

export type GetDepartmentsResponse = GetDepartmentsResponses[keyof GetDepartmentsResponses];

export type GetDomainobjectsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Types of domain objects to retrieve
         */
        'domain_types[]': Array<string>;
        /**
         * Identifiers of domain objects to retrieve
         */
        'domain_identifiers[]': Array<string>;
    };
    url: '/domainobjects';
};

export type GetDomainobjectsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetDomainobjectsError = GetDomainobjectsErrors[keyof GetDomainobjectsErrors];

export type GetDomainobjectsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<DomainObjectAny>;
    };
};

export type GetDomainobjectsResponse = GetDomainobjectsResponses[keyof GetDomainobjectsResponses];

export type PostDomainobjectsData = {
    body?: DomainObjectPayload;
    path?: never;
    query?: never;
    url: '/domainobjects';
};

export type PostDomainobjectsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostDomainobjectsError = PostDomainobjectsErrors[keyof PostDomainobjectsErrors];

export type PostDomainobjectsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<DomainObjectAny>;
    };
};

export type PostDomainobjectsResponse = PostDomainobjectsResponses[keyof PostDomainobjectsResponses];

export type GetDynamicgroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/dynamicgroups';
};

export type GetDynamicgroupsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetDynamicgroupsError = GetDynamicgroupsErrors[keyof GetDynamicgroupsErrors];

export type GetDynamicgroupsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<number>;
        meta?: MetaCount;
    };
};

export type GetDynamicgroupsResponse = GetDynamicgroupsResponses[keyof GetDynamicgroupsResponses];

export type PostDynamicgroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/dynamicgroups/refresh';
};

export type PostDynamicgroupsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostDynamicgroupsError = PostDynamicgroupsErrors[keyof PostDynamicgroupsErrors];

export type PostDynamicgroupsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<{
            created?: number;
            deleted?: number;
            groupId?: number;
            updated?: number;
        }>;
        meta?: MetaCount;
    };
};

export type PostDynamicgroupsResponse = PostDynamicgroupsResponses[keyof PostDynamicgroupsResponses];

export type RefreshDynamicgroupsData = {
    body?: never;
    path: {
        groupId: number;
    };
    query?: never;
    url: '/dynamicgroups/{groupId}/refresh';
};

export type RefreshDynamicgroupsErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type RefreshDynamicgroupsError = RefreshDynamicgroupsErrors[keyof RefreshDynamicgroupsErrors];

export type RefreshDynamicgroupsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<{
            created?: number;
            deleted?: number;
            groupId?: number;
            updated?: number;
        }>;
        meta?: MetaCount;
    };
};

export type RefreshDynamicgroupsResponse = RefreshDynamicgroupsResponses[keyof RefreshDynamicgroupsResponses];

export type DeleteRulesetData = {
    body?: never;
    path: {
        /**
         * id of the group
         */
        groupId: number;
    };
    query?: never;
    url: '/dynamicgroups/{groupId}/ruleset';
};

export type DeleteRulesetErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteRulesetError = DeleteRulesetErrors[keyof DeleteRulesetErrors];

export type DeleteRulesetResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteRulesetResponse = DeleteRulesetResponses[keyof DeleteRulesetResponses];

export type GetDynamicgroupRulesetData = {
    body?: never;
    path: {
        /**
         * id of the group
         */
        groupId: number;
    };
    query?: never;
    url: '/dynamicgroups/{groupId}/ruleset';
};

export type GetDynamicgroupRulesetErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetDynamicgroupRulesetError = GetDynamicgroupRulesetErrors[keyof GetDynamicgroupRulesetErrors];

export type GetDynamicgroupRulesetResponses = {
    /**
     * OK
     */
    200: {
        data?: DynamicGroupRule;
    };
};

export type GetDynamicgroupRulesetResponse = GetDynamicgroupRulesetResponses[keyof GetDynamicgroupRulesetResponses];

export type EditRulesetData = {
    body?: {
        dynamicGroupRuleSet?: DynamicGroupRule;
    };
    path: {
        /**
         * id of the group
         */
        groupId: number;
    };
    query?: never;
    url: '/dynamicgroups/{groupId}/ruleset';
};

export type EditRulesetErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type EditRulesetError = EditRulesetErrors[keyof EditRulesetErrors];

export type EditRulesetResponses = {
    /**
     * OK
     */
    200: {
        data?: DynamicGroupRule;
    };
};

export type EditRulesetResponse = EditRulesetResponses[keyof EditRulesetResponses];

export type GetDynamicgroupStatusData = {
    body?: never;
    path: {
        /**
         * id of the group
         */
        groupId: number;
    };
    query?: never;
    url: '/dynamicgroups/{groupId}/status';
};

export type GetDynamicgroupStatusErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetDynamicgroupStatusError = GetDynamicgroupStatusErrors[keyof GetDynamicgroupStatusErrors];

export type GetDynamicgroupStatusResponses = {
    /**
     * OK
     */
    200: {
        dynamicGroupStatus?: 'manual' | 'active' | 'inactive' | 'none';
    };
};

export type GetDynamicgroupStatusResponse = GetDynamicgroupStatusResponses[keyof GetDynamicgroupStatusResponses];

export type PutDynamicgrouopStatusData = {
    body?: {
        dynamicGroupStatus?: string;
    };
    path: {
        /**
         * id of the group
         */
        groupId: number;
    };
    query?: never;
    url: '/dynamicgroups/{groupId}/status';
};

export type PutDynamicgrouopStatusErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutDynamicgrouopStatusError = PutDynamicgrouopStatusErrors[keyof PutDynamicgrouopStatusErrors];

export type PutDynamicgrouopStatusResponses = {
    /**
     * OK
     */
    200: {
        data?: DynamicGroupRule;
    };
};

export type PutDynamicgrouopStatusResponse = PutDynamicgrouopStatusResponses[keyof PutDynamicgrouopStatusResponses];

export type DeleteAllEvangelischetermineAppointmentsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/evangelischetermine';
};

export type DeleteAllEvangelischetermineAppointmentsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type DeleteAllEvangelischetermineAppointmentsResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteAllEvangelischetermineAppointmentsResponse =
    DeleteAllEvangelischetermineAppointmentsResponses[keyof DeleteAllEvangelischetermineAppointmentsResponses];

export type GetAllEvangelischetermineEventtypesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/evangelischetermine/eventtypes';
};

export type GetAllEvangelischetermineEventtypesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<{
            key?: string;
            value?: string;
        }>;
    };
};

export type GetAllEvangelischetermineEventtypesResponse =
    GetAllEvangelischetermineEventtypesResponses[keyof GetAllEvangelischetermineEventtypesResponses];

export type PostEvangelischetermineValidatesettingsData = {
    body?: {
        apiKey?: string;
        url?: string;
        vid?: string;
    };
    path?: never;
    query?: never;
    url: '/evangelischetermine/validatesettings';
};

export type PostEvangelischetermineValidatesettingsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
};

export type PostEvangelischetermineValidatesettingsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetEventMasterdataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/event/masterdata';
};

export type GetEventMasterdataErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetEventMasterdataError = GetEventMasterdataErrors[keyof GetEventMasterdataErrors];

export type GetEventMasterdataResponses = {
    /**
     * OK
     */
    200: {
        data?: EventMasterData;
        meta?: {
            absenceReasons?: number;
            facts?: number;
            serviceGroups?: number;
            services?: number;
            songCategories?: number;
            songSources?: number;
        };
    };
};

export type GetEventMasterdataResponse = GetEventMasterdataResponses[keyof GetEventMasterdataResponses];

export type GetAllEventsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * If true, include also canceled events
         */
        canceled?: boolean;
        /**
         * The direction of the result set
         */
        direction?: 'forward' | 'backward';
        /**
         * Number of results per page.
         */
        limit?: number;
        /**
         * to include the eventServices
         */
        include?: string;
        /**
         * Return entities starting from this date.
         */
        from?: DateString;
        /**
         * Return entities up to this date.
         */
        to?: DateString;
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
    };
    url: '/events';
};

export type GetAllEventsErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllEventsError = GetAllEventsErrors[keyof GetAllEventsErrors];

export type GetAllEventsResponses = {
    /**
     * Successful request
     */
    200: {
        data?: Array<Event>;
        meta?: MetaCount;
    };
};

export type GetAllEventsResponse = GetAllEventsResponses[keyof GetAllEventsResponses];

export type GetEventsIcalData = {
    body?: never;
    path?: never;
    query: {
        personId: number;
    };
    url: '/events/ical';
};

export type GetEventsIcalErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetEventsIcalError = GetEventsIcalErrors[keyof GetEventsIcalErrors];

export type GetEventsIcalResponses = {
    /**
     * OK
     */
    200: {
        data?: {
            attribute?: string;
            module?: string;
            value?: string;
        };
        meta?: {
            iCalUrl?: string;
        };
    };
};

export type GetEventsIcalResponse = GetEventsIcalResponses[keyof GetEventsIcalResponses];

export type PostEventIcalData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/events/ical';
};

export type PostEventIcalErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostEventIcalError = PostEventIcalErrors[keyof PostEventIcalErrors];

export type PostEventIcalResponses = {
    /**
     * OK
     */
    200: {
        data?: {
            attribute?: string;
            module?: string;
            value?: string;
        };
        meta?: {
            iCalUrl?: string;
        };
    };
};

export type PostEventIcalResponse = PostEventIcalResponses[keyof PostEventIcalResponses];

export type SendEventEmailData = {
    /**
     * E-Mail information and recipients
     */
    body: {
        /**
         * If an agenda exists for the event, a button with a link to that agenda is added to the mail body.
         */
        appendAgendaButton: boolean;
        /**
         * E-Mail body.
         */
        body: string;
        /**
         * Array of event IDs. Multiple event IDs MUST be integrated events, i.e. all events share the same agenda.
         */
        eventIds: Array<number>;
        /**
         * List of file Ids. If the file is attached to the event it is added to the mail body.
         */
        files: Array<number>;
        /**
         * Array of person IDs.
         */
        recipients: Array<number>;
        /**
         * Flag if a mail should be send to the user sending the request.
         */
        sendCopyToMe?: boolean;
        /**
         * E-Mail subject.
         */
        subject: string;
    };
    path?: never;
    query?: never;
    url: '/events/send';
};

export type SendEventEmailErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type SendEventEmailError = SendEventEmailErrors[keyof SendEventEmailErrors];

export type SendEventEmailResponses = {
    /**
     * Successfully sent mails to some recipients.
     */
    200: {
        args?: {
            count?: number;
        };
        /**
         * Array of DomainObjects with people, who have no eMail Addresses.
         */
        errors?: Array<DomainObjectPerson>;
        message?: string;
        messageKey?: string;
        translatedMessage?: string;
    };
    /**
     * Successfully sent mails to all recipients the user can see.
     */
    204: void;
};

export type SendEventEmailResponse = SendEventEmailResponses[keyof SendEventEmailResponses];

export type GetEventData = {
    body?: never;
    path: {
        /**
         * ID of Event
         */
        eventId: number;
    };
    query?: never;
    url: '/events/{eventId}';
};

export type GetEventErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetEventError = GetEventErrors[keyof GetEventErrors];

export type GetEventResponses = {
    /**
     * Successful request
     */
    200: {
        data?: Event;
    };
};

export type GetEventResponse = GetEventResponses[keyof GetEventResponses];

export type PutEventsData = {
    body: {
        adminIds?: Array<number>;
        eventId: number;
        isCanceled?: boolean;
        note?: string;
    };
    path: {
        /**
         * ID of Event
         */
        eventId: number;
    };
    query?: never;
    url: '/events/{eventId}';
};

export type PutEventsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PutEventsError = PutEventsErrors[keyof PutEventsErrors];

export type PutEventsResponses = {
    /**
     * Successful request
     */
    200: {
        data?: Event;
    };
};

export type PutEventsResponse = PutEventsResponses[keyof PutEventsResponses];

export type GetAgendaForEventData = {
    body?: never;
    path: {
        /**
         * ID of Event
         */
        eventId: number;
    };
    query?: never;
    url: '/events/{eventId}/agenda';
};

export type GetAgendaForEventErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAgendaForEventError = GetAgendaForEventErrors[keyof GetAgendaForEventErrors];

export type GetAgendaForEventResponses = {
    /**
     * Successful request
     */
    200: {
        data?: Agenda;
    };
};

export type GetAgendaForEventResponse = GetAgendaForEventResponses[keyof GetAgendaForEventResponses];

export type GetSongsOfAgendaData = {
    body?: never;
    path: {
        /**
         * ID of Event
         */
        eventId: number;
    };
    query?: never;
    url: '/events/{eventId}/agenda/songs';
};

export type GetSongsOfAgendaErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetSongsOfAgendaError = GetSongsOfAgendaErrors[keyof GetSongsOfAgendaErrors];

export type GetSongsOfAgendaResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Song>;
    };
};

export type GetSongsOfAgendaResponse = GetSongsOfAgendaResponses[keyof GetSongsOfAgendaResponses];

export type StartStopEventChatData = {
    body: StartStopChat;
    path: {
        /**
         * ID of Event
         */
        eventId: number;
    };
    query?: never;
    url: '/events/{eventId}/chat';
};

export type StartStopEventChatErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type StartStopEventChatError = StartStopEventChatErrors[keyof StartStopEventChatErrors];

export type StartStopEventChatResponses = {
    /**
     * Successful request
     */
    200: unknown;
};

export type PutEventEventservicesData = {
    body: {
        eventId: number;
        services: Array<{
            count: number;
            serviceId: number;
        }>;
    };
    path: {
        /**
         * ID of Event
         */
        eventId: number;
    };
    query?: never;
    url: '/events/{eventId}/eventservices';
};

export type PutEventEventservicesErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PutEventEventservicesError = PutEventEventservicesErrors[keyof PutEventEventservicesErrors];

export type PutEventEventservicesResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PutEventEventservicesResponse = PutEventEventservicesResponses[keyof PutEventEventservicesResponses];

export type DeleteEventEventserviceData = {
    body: {
        comment?: string;
        eventId: number;
        eventServiceId: number;
    };
    path: {
        /**
         * ID of Event
         */
        eventId: number;
        serviceId: number;
    };
    query?: never;
    url: '/events/{eventId}/eventservices/{serviceId}';
};

export type DeleteEventEventserviceErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type DeleteEventEventserviceError = DeleteEventEventserviceErrors[keyof DeleteEventEventserviceErrors];

export type DeleteEventEventserviceResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeleteEventEventserviceResponse = DeleteEventEventserviceResponses[keyof DeleteEventEventserviceResponses];

export type PutEventEventserviceData = {
    body: {
        agreed: boolean;
        comment?: string;
        eventId: number;
        eventServiceId: number;
        name: string;
    };
    path: {
        /**
         * ID of Event
         */
        eventId: number;
        serviceId: number;
    };
    query?: never;
    url: '/events/{eventId}/eventservices/{serviceId}';
};

export type PutEventEventserviceErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PutEventEventserviceError = PutEventEventserviceErrors[keyof PutEventEventserviceErrors];

export type PutEventEventserviceResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PutEventEventserviceResponse = PutEventEventserviceResponses[keyof PutEventEventserviceResponses];

export type GetEventsEventIdFactsData = {
    body?: never;
    path: {
        /**
         * ID of Event
         */
        eventId: number;
    };
    query?: never;
    url: '/events/{eventId}/facts';
};

export type GetEventsEventIdFactsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetEventsEventIdFactsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<EventFact>;
        meta?: MetaCount;
    };
};

export type GetEventsEventIdFactsResponse = GetEventsEventIdFactsResponses[keyof GetEventsEventIdFactsResponses];

export type DeleteEventsEventIdFactsFactIdData = {
    body?: never;
    path: {
        /**
         * ID of Event
         */
        eventId: number;
        factId: string;
    };
    query?: {
        dry_run?: boolean;
    };
    url: '/events/{eventId}/facts/{factId}';
};

export type DeleteEventsEventIdFactsFactIdErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteEventsEventIdFactsFactIdError =
    DeleteEventsEventIdFactsFactIdErrors[keyof DeleteEventsEventIdFactsFactIdErrors];

export type DeleteEventsEventIdFactsFactIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteEventsEventIdFactsFactIdResponse =
    DeleteEventsEventIdFactsFactIdResponses[keyof DeleteEventsEventIdFactsFactIdResponses];

export type GetEventsEventIdFactsFactIdData = {
    body?: never;
    path: {
        /**
         * ID of Event
         */
        eventId: number;
        factId: string;
    };
    query?: never;
    url: '/events/{eventId}/facts/{factId}';
};

export type GetEventsEventIdFactsFactIdErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetEventsEventIdFactsFactIdResponses = {
    /**
     * OK
     */
    200: {
        data?: EventFact;
    };
};

export type GetEventsEventIdFactsFactIdResponse =
    GetEventsEventIdFactsFactIdResponses[keyof GetEventsEventIdFactsFactIdResponses];

export type PutEventsEventIdFactsFactIdData = {
    /**
     * Pass the `value` for that fact as payload. For numeric facts the value MUST be a numeric value. For select facts the value MUST be a valid option.
     */
    body?: {
        value?: number | string;
    };
    path: {
        /**
         * ID of Event
         */
        eventId: number;
        factId: string;
    };
    query?: never;
    url: '/events/{eventId}/facts/{factId}';
};

export type PutEventsEventIdFactsFactIdErrors = {
    /**
     * Bad Request
     */
    400: {
        args?: Array<{
            [key: string]: unknown;
        }>;
        errors?: Array<{
            args?: {
                compareIdentical?: boolean;
                haystack?: Array<string>;
                input?: string;
            };
            fieldId?: string;
            message?: string;
            messageKey?: string;
        }>;
        message?: string;
        messageKey?: string;
        translatedMessage?: string;
    };
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type PutEventsEventIdFactsFactIdError =
    PutEventsEventIdFactsFactIdErrors[keyof PutEventsEventIdFactsFactIdErrors];

export type PutEventsEventIdFactsFactIdResponses = {
    /**
     * OK
     */
    200: {
        data?: EventFact;
    };
};

export type PutEventsEventIdFactsFactIdResponse =
    PutEventsEventIdFactsFactIdResponses[keyof PutEventsEventIdFactsFactIdResponses];

export type PutEventEventservices2Data = {
    body: {
        eventId: number;
        services: Array<{
            count: number;
            serviceId: number;
        }>;
    };
    path: {
        /**
         * ID of Event
         */
        eventId: number;
    };
    query?: never;
    url: '/events/{eventId}/servicerequests';
};

export type PutEventEventservices2Errors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PutEventEventservices2Error = PutEventEventservices2Errors[keyof PutEventEventservices2Errors];

export type PutEventEventservices2Responses = {
    /**
     * No Content
     */
    204: void;
};

export type PutEventEventservices2Response = PutEventEventservices2Responses[keyof PutEventEventservices2Responses];

export type PutEventsEventIdServicerequestsRequestIdData = {
    body: {
        comment?: string | null;
        isAccepted: boolean;
        /**
         * Either `name` or `personId` need to be supplied.
         */
        name: string | null;
        /**
         * Either `personId` or `name` need to be supplied.
         */
        personId?: number | null;
    };
    path: {
        /**
         * ID of Event
         */
        eventId: number;
        /**
         * ID of a service request
         */
        requestId: number;
    };
    query?: never;
    url: '/events/{eventId}/servicerequests/{requestId}';
};

export type PutEventsEventIdServicerequestsRequestIdErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PutEventsEventIdServicerequestsRequestIdError =
    PutEventsEventIdServicerequestsRequestIdErrors[keyof PutEventsEventIdServicerequestsRequestIdErrors];

export type PutEventsEventIdServicerequestsRequestIdResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PutEventsEventIdServicerequestsRequestIdResponse =
    PutEventsEventIdServicerequestsRequestIdResponses[keyof PutEventsEventIdServicerequestsRequestIdResponses];

export type PostEventIdServicerequestsRequestIdAcceptData = {
    body: {
        comment?: string | null;
    };
    path: {
        /**
         * ID of Event
         */
        eventId: number;
        /**
         * ID of a service request
         */
        requestId: number;
    };
    query?: never;
    url: '/events/{eventId}/servicerequests/{requestId}/accept';
};

export type PostEventIdServicerequestsRequestIdAcceptErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostEventIdServicerequestsRequestIdAcceptError =
    PostEventIdServicerequestsRequestIdAcceptErrors[keyof PostEventIdServicerequestsRequestIdAcceptErrors];

export type PostEventIdServicerequestsRequestIdAcceptResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PostEventIdServicerequestsRequestIdAcceptResponse =
    PostEventIdServicerequestsRequestIdAcceptResponses[keyof PostEventIdServicerequestsRequestIdAcceptResponses];

export type PostEventIdServicerequestsRequestIdDeclineData = {
    body: {
        comment?: string | null;
    };
    path: {
        /**
         * ID of Event
         */
        eventId: number;
        /**
         * ID of a service request
         */
        requestId: number;
    };
    query?: never;
    url: '/events/{eventId}/servicerequests/{requestId}/decline';
};

export type PostEventIdServicerequestsRequestIdDeclineErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostEventIdServicerequestsRequestIdDeclineError =
    PostEventIdServicerequestsRequestIdDeclineErrors[keyof PostEventIdServicerequestsRequestIdDeclineErrors];

export type PostEventIdServicerequestsRequestIdDeclineResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PostEventIdServicerequestsRequestIdDeclineResponse =
    PostEventIdServicerequestsRequestIdDeclineResponses[keyof PostEventIdServicerequestsRequestIdDeclineResponses];

export type PostEventIdServicerequestsRequestIdUndoData = {
    body: {
        comment?: string | null;
    };
    path: {
        /**
         * ID of Event
         */
        eventId: number;
        /**
         * ID of a service request
         */
        requestId: number;
    };
    query?: never;
    url: '/events/{eventId}/servicerequests/{requestId}/undo';
};

export type PostEventIdServicerequestsRequestIdUndoErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostEventIdServicerequestsRequestIdUndoError =
    PostEventIdServicerequestsRequestIdUndoErrors[keyof PostEventIdServicerequestsRequestIdUndoErrors];

export type PostEventIdServicerequestsRequestIdUndoResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PostEventIdServicerequestsRequestIdUndoResponse =
    PostEventIdServicerequestsRequestIdUndoResponses[keyof PostEventIdServicerequestsRequestIdUndoResponses];

export type GetEventsEventIdServicesServiceIdPossiblepersonsData = {
    body?: never;
    path: {
        /**
         * ID of Event
         */
        eventId: number;
        serviceId: string;
    };
    query?: never;
    url: '/events/{eventId}/services/{serviceId}/possiblepersons';
};

export type GetEventsEventIdServicesServiceIdPossiblepersonsErrors = {
    /**
     * Validation errors. See response for details
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetEventsEventIdServicesServiceIdPossiblepersonsError =
    GetEventsEventIdServicesServiceIdPossiblepersonsErrors[keyof GetEventsEventIdServicesServiceIdPossiblepersonsErrors];

export type GetEventsEventIdServicesServiceIdPossiblepersonsResponses = {
    /**
     * Successful request
     */
    200: {
        data?: Array<PossibleEventPerson>;
        meta?: MetaCount;
    };
};

export type GetEventsEventIdServicesServiceIdPossiblepersonsResponse =
    GetEventsEventIdServicesServiceIdPossiblepersonsResponses[keyof GetEventsEventIdServicesServiceIdPossiblepersonsResponses];

export type GetEventsServiceIdPossiblepersonsData = {
    body?: never;
    path: {
        serviceId: string;
    };
    query?: never;
    url: '/events/{serviceId}/possiblepersonsforservice';
};

export type GetEventsServiceIdPossiblepersonsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetEventsServiceIdPossiblepersonsError =
    GetEventsServiceIdPossiblepersonsErrors[keyof GetEventsServiceIdPossiblepersonsErrors];

export type GetEventsServiceIdPossiblepersonsResponses = {
    /**
     * Successful request
     */
    200: {
        data?: Array<{
            fullName: string;
            personId: number;
        }>;
        meta?: MetaCount;
    };
};

export type GetEventsServiceIdPossiblepersonsResponse =
    GetEventsServiceIdPossiblepersonsResponses[keyof GetEventsServiceIdPossiblepersonsResponses];

export type GetExternalloginsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/externallogins';
};

export type GetExternalloginsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetExternalloginsError = GetExternalloginsErrors[keyof GetExternalloginsErrors];

export type GetExternalloginsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<ExternalLogin>;
        meta?: MetaCount;
    };
};

export type GetExternalloginsResponse = GetExternalloginsResponses[keyof GetExternalloginsResponses];

export type PostExternalsystemData = {
    body?: ExternalLoginCreate;
    path?: never;
    query?: never;
    url: '/externallogins';
};

export type PostExternalsystemErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostExternalsystemError = PostExternalsystemErrors[keyof PostExternalsystemErrors];

export type PostExternalsystemResponses = {
    /**
     * OK
     */
    201: {
        data?: Resource;
    };
};

export type PostExternalsystemResponse = PostExternalsystemResponses[keyof PostExternalsystemResponses];

export type DeleteResourcesResourceIdData = {
    body?: never;
    path: {
        externalLoginId: number;
    };
    query?: never;
    url: '/externallogins/{externalLoginId}';
};

export type DeleteResourcesResourceIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteResourcesResourceIdError = DeleteResourcesResourceIdErrors[keyof DeleteResourcesResourceIdErrors];

export type DeleteResourcesResourceIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteResourcesResourceIdResponse =
    DeleteResourcesResourceIdResponses[keyof DeleteResourcesResourceIdResponses];

export type GetExternalloginExternalLoginIdData = {
    body?: never;
    path: {
        externalLoginId: number;
    };
    query?: never;
    url: '/externallogins/{externalLoginId}';
};

export type GetExternalloginExternalLoginIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetExternalloginExternalLoginIdError =
    GetExternalloginExternalLoginIdErrors[keyof GetExternalloginExternalLoginIdErrors];

export type GetExternalloginExternalLoginIdResponses = {
    /**
     * OK
     */
    200: {
        data?: ExternalLogin;
    };
};

export type GetExternalloginExternalLoginIdResponse =
    GetExternalloginExternalLoginIdResponses[keyof GetExternalloginExternalLoginIdResponses];

export type PutExternalloginExternalLoginIdData = {
    body?: ExternalLogin;
    path: {
        externalLoginId: number;
    };
    query?: never;
    url: '/externallogins/{externalLoginId}';
};

export type PutExternalloginExternalLoginIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutExternalloginExternalLoginIdError =
    PutExternalloginExternalLoginIdErrors[keyof PutExternalloginExternalLoginIdErrors];

export type PutExternalloginExternalLoginIdResponses = {
    /**
     * OK
     */
    200: {
        data?: ExternalLogin;
    };
};

export type PutExternalloginExternalLoginIdResponse =
    PutExternalloginExternalLoginIdResponses[keyof PutExternalloginExternalLoginIdResponses];

export type GetExternalPostsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * If set, only posts created before this date are returned. The date must be in RFC3339 format (Zulu-Date).
         */
        before?: ZuluDate;
        /**
         * If set, posts created at the "before" date are included in the result, if the guids of the posts are lexically smaller than the last_post_indentifier. Will be ignored if "before" is not set.
         */
        last_post_indentifier?: string;
        /**
         * If set, only posts created after this date are returned. The date must be in RFC3339 format (Zulu-Date).
         */
        after?: ZuluDate;
        /**
         * If set posts of these groups are returned.
         */
        'external_group_guid[]'?: Array<string>;
        /**
         * If set posts of these instances are returned.
         */
        'external_instance_guid[]'?: Array<string>;
        /**
         * If set, the response will include the specified data.
         */
        'include[]'?: Array<'linkings'>;
        /**
         * Number of results per page.
         */
        limit?: number;
    };
    url: '/externalposts';
};

export type GetExternalPostsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetExternalPostsError = GetExternalPostsErrors[keyof GetExternalPostsErrors];

export type GetExternalPostsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Post>;
        meta?: MetaCount;
    };
};

export type GetExternalPostsResponse = GetExternalPostsResponses[keyof GetExternalPostsResponses];

export type GetExternalPostData = {
    body?: never;
    path: {
        /**
         * the guid of the instance to which the post belongs
         */
        instanceGuid: string;
        /**
         * the guid of the channel to which the post belongs
         */
        channelGuid: string;
        /**
         * the guid of the post
         */
        postGuid: string;
    };
    query?: never;
    url: '/externalposts/instances/{instanceGuid}/channels/{channelGuid}/posts/{postGuid}';
};

export type GetExternalPostErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetExternalPostError = GetExternalPostErrors[keyof GetExternalPostErrors];

export type GetExternalPostResponses = {
    /**
     * OK
     */
    200: {
        data?: Post;
    };
};

export type GetExternalPostResponse = GetExternalPostResponses[keyof GetExternalPostResponses];

export type GetFactsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/facts';
};

export type GetFactsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetFactsResponses = {
    /**
     * OK. Sorted by SortKey
     */
    200: {
        data?: Array<Fact>;
        meta?: MetaCount;
    };
};

export type GetFactsResponse = GetFactsResponses[keyof GetFactsResponses];

export type PostFactsData = {
    body?: {
        fieldType?: 'number' | 'select';
        name?: string;
        /**
         * Will not be saved if fieldType = number
         */
        options?: Array<unknown>;
        sortKey?: number;
    };
    path?: never;
    query?: never;
    url: '/facts';
};

export type PostFactsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PostFactsResponses = {
    /**
     * Created
     */
    201: {
        data?: Fact;
    };
};

export type PostFactsResponse = PostFactsResponses[keyof PostFactsResponses];

export type DeleteFactsIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/facts/{id}';
};

export type DeleteFactsIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type DeleteFactsIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteFactsIdResponse = DeleteFactsIdResponses[keyof DeleteFactsIdResponses];

export type GetFactsIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/facts/{id}';
};

export type GetFactsIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetFactsIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Fact;
    };
};

export type GetFactsIdResponse = GetFactsIdResponses[keyof GetFactsIdResponses];

export type PutFactsIdData = {
    body?: {
        fieldType?: 'select' | 'number';
        name?: string;
        options?: Array<string>;
        sortKey?: number;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/facts/{id}';
};

export type PutFactsIdErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PutFactsIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Fact;
    };
};

export type PutFactsIdResponse = PutFactsIdResponses[keyof PutFactsIdResponses];

export type PostFeatureUsageData = {
    body?: {
        data?: Array<FeatureUsage>;
    };
    path?: never;
    query?: never;
    url: '/featureusage';
};

export type PostFeatureUsageErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PostFeatureUsageResponses = {
    /**
     * No Content - Request received
     */
    204: void;
};

export type PostFeatureUsageResponse = PostFeatureUsageResponses[keyof PostFeatureUsageResponses];

export type GetAllFieldsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/fields';
};

export type GetAllFieldsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden to see fields
     */
    403: unknown;
};

export type GetAllFieldsResponses = {
    /**
     * All Fields
     */
    200: {
        data?: Array<{
            [key: string]: unknown;
        }>;
        meta?: {
            count?: number;
        };
    };
};

export type GetAllFieldsResponse = GetAllFieldsResponses[keyof GetAllFieldsResponses];

export type DeleteFilesData = {
    body?: never;
    path: {
        /**
         * The domain type. Currently supported are 'avatar', 'groupimage', 'appointment_image', 'logo', 'attachments', 'bulkletter_template', 'service', 'song_arrangement', 'importtable', 'person', 'familyavatar', 'post', 'wiki_.?'.
         */
        domainType: string;
        /**
         * the domain identifier
         */
        domainIdentifier: string;
    };
    query?: never;
    url: '/files/{domainType}/{domainIdentifier}';
};

export type DeleteFilesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type DeleteFilesError = DeleteFilesErrors[keyof DeleteFilesErrors];

export type DeleteFilesResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteFilesResponse = DeleteFilesResponses[keyof DeleteFilesResponses];

export type GetFilesDomainTypeDomainIdentifierData = {
    body?: never;
    path: {
        /**
         * The domain type. Currently supported are 'avatar', 'groupimage', 'appointment_image', 'logo', 'attachments', 'bulkletter_template', 'service', 'song_arrangement', 'importtable', 'person', 'familyavatar', 'post', 'wiki_.?'.
         */
        domainType: string;
        /**
         * the domain identifier
         */
        domainIdentifier: string;
    };
    query?: never;
    url: '/files/{domainType}/{domainIdentifier}';
};

export type GetFilesDomainTypeDomainIdentifierErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetFilesDomainTypeDomainIdentifierError =
    GetFilesDomainTypeDomainIdentifierErrors[keyof GetFilesDomainTypeDomainIdentifierErrors];

export type GetFilesDomainTypeDomainIdentifierResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<File>;
    };
};

export type GetFilesDomainTypeDomainIdentifierResponse =
    GetFilesDomainTypeDomainIdentifierResponses[keyof GetFilesDomainTypeDomainIdentifierResponses];

export type PatchFileWithDomainTypeData = {
    body?: never;
    path: {
        /**
         * The domain type. Currently supported are 'avatar', 'groupimage', 'appointment_image', 'logo', 'attachments', 'bulkletter_template', 'service', 'song_arrangement', 'importtable', 'person', 'familyavatar', 'post', 'wiki_.?'.
         */
        domainType: string;
        /**
         * the domain identifier
         */
        domainIdentifier: string;
    };
    query?: never;
    url: '/files/{domainType}/{domainIdentifier}';
};

export type PatchFileWithDomainTypeErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PatchFileWithDomainTypeError = PatchFileWithDomainTypeErrors[keyof PatchFileWithDomainTypeErrors];

export type PatchFileWithDomainTypeResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PatchFileWithDomainTypeResponse = PatchFileWithDomainTypeResponses[keyof PatchFileWithDomainTypeResponses];

export type UploadFilesData = {
    body?: {
        'files[]'?: Array<Blob | File>;
        image_options?: {
            [key: string]: unknown;
        };
        max_height?: string;
        max_width?: string;
    };
    path: {
        /**
         * The domain type. Currently supported are 'avatar', 'groupimage', 'appointment_image', 'logo', 'attachments', 'bulkletter_template', 'service', 'song_arrangement', 'importtable', 'person', 'familyavatar', 'post', 'wiki_.?'.
         */
        domainType: string;
        /**
         * the domain identifier
         */
        domainIdentifier: string;
    };
    query?: never;
    url: '/files/{domainType}/{domainIdentifier}';
};

export type UploadFilesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UploadFilesError = UploadFilesErrors[keyof UploadFilesErrors];

export type UploadFilesResponses = {
    /**
     * return new files
     */
    200: {
        data?: Array<File>;
        meta?: {
            count?: number;
        };
    };
};

export type UploadFilesResponse = UploadFilesResponses[keyof UploadFilesResponses];

export type PostFilesDomainTypeDomainIdentifierLinkData = {
    /**
     * Accounting period data
     */
    body: {
        name: string | null;
        securityLevelId?: number | null;
        url?: string;
    };
    path: {
        /**
         * The domain type. Currently supported are 'avatar', 'groupimage', 'appointment_image', 'logo', 'attachments', 'bulkletter_template', 'service', 'song_arrangement', 'importtable', 'person', 'familyavatar', 'post', 'wiki_.?'.
         */
        domainType: string;
        /**
         * the domain identifier
         */
        domainIdentifier: string;
    };
    query?: never;
    url: '/files/{domainType}/{domainIdentifier}/link';
};

export type PostFilesDomainTypeDomainIdentifierLinkErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostFilesDomainTypeDomainIdentifierLinkError =
    PostFilesDomainTypeDomainIdentifierLinkErrors[keyof PostFilesDomainTypeDomainIdentifierLinkErrors];

export type PostFilesDomainTypeDomainIdentifierLinkResponses = {
    /**
     * The newly created link
     */
    201: {
        data?: FileOrLink;
    };
};

export type PostFilesDomainTypeDomainIdentifierLinkResponse =
    PostFilesDomainTypeDomainIdentifierLinkResponses[keyof PostFilesDomainTypeDomainIdentifierLinkResponses];

export type GetFilesIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        fileId: number;
    };
    query?: never;
    url: '/files/{fileId}/meta';
};

export type GetFilesIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetFilesIdError = GetFilesIdErrors[keyof GetFilesIdErrors];

export type GetFilesIdResponses = {
    /**
     * OK
     */
    200: {
        data?: File;
    };
};

export type GetFilesIdResponse = GetFilesIdResponses[keyof GetFilesIdResponses];

export type GetFilesMetadataData = {
    body?: never;
    path: {
        fileId: string;
    };
    query?: never;
    url: '/files/{fileId}/metadata';
};

export type GetFilesMetadataErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetFilesMetadataError = GetFilesMetadataErrors[keyof GetFilesMetadataErrors];

export type GetFilesMetadataResponses = {
    /**
     * OK
     */
    200: {
        bezeichnung?: string;
        deletion_date?: string;
        domain_id?: string;
        domain_type?: string;
        filename?: string;
        id?: string;
        image_options?: string;
        modified_date?: string;
        modified_pid?: string;
        securitylevel_id?: string;
        showonlywheneditable_yn?: string;
        sortkey?: string;
        url?: string;
    };
};

export type GetFilesMetadataResponse = GetFilesMetadataResponses[keyof GetFilesMetadataResponses];

export type DeleteFilesIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/files/{id}';
};

export type DeleteFilesIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteFilesIdResponse = DeleteFilesIdResponses[keyof DeleteFilesIdResponses];

export type PatchFilesIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/files/{id}';
};

export type PatchFilesIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PatchFilesIdError = PatchFilesIdErrors[keyof PatchFilesIdErrors];

export type PatchFilesIdResponses = {
    /**
     * No Content
     */
    204: {
        name: string;
    };
};

export type PatchFilesIdResponse = PatchFilesIdResponses[keyof PatchFilesIdResponses];

export type GetAllAccountClassesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/finance/accountclasses';
};

export type GetAllAccountClassesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAllAccountClassesError = GetAllAccountClassesErrors[keyof GetAllAccountClassesErrors];

export type GetAllAccountClassesResponses = {
    /**
     * get available account classes ordered by id
     */
    200: {
        data?: Array<AccountClass>;
    };
};

export type GetAllAccountClassesResponse = GetAllAccountClassesResponses[keyof GetAllAccountClassesResponses];

export type CreateNewAccountClassData = {
    /**
     * Account classes sorted by sort key.
     */
    body: AccountClassNew;
    path?: never;
    query?: never;
    url: '/finance/accountclasses';
};

export type CreateNewAccountClassErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Resource not found
     */
    404: unknown;
};

export type CreateNewAccountClassError = CreateNewAccountClassErrors[keyof CreateNewAccountClassErrors];

export type CreateNewAccountClassResponses = {
    /**
     * new account class
     */
    200: {
        data?: Array<AccountClass>;
    };
};

export type CreateNewAccountClassResponse = CreateNewAccountClassResponses[keyof CreateNewAccountClassResponses];

export type DeleteAccountClassData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accountclasses/{id}';
};

export type DeleteAccountClassErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteAccountClassError = DeleteAccountClassErrors[keyof DeleteAccountClassErrors];

export type DeleteAccountClassResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteAccountClassResponse = DeleteAccountClassResponses[keyof DeleteAccountClassResponses];

export type GetAccountClassByIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accountclasses/{id}';
};

export type GetAccountClassByIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAccountClassByIdError = GetAccountClassByIdErrors[keyof GetAccountClassByIdErrors];

export type GetAccountClassByIdResponses = {
    /**
     * get account class
     */
    200: {
        data?: AccountClass;
    };
};

export type GetAccountClassByIdResponse = GetAccountClassByIdResponses[keyof GetAccountClassByIdResponses];

export type UpdateAccountClassData = {
    /**
     * Account Class data
     */
    body: AccountClassNew;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accountclasses/{id}';
};

export type UpdateAccountClassErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateAccountClassError = UpdateAccountClassErrors[keyof UpdateAccountClassErrors];

export type UpdateAccountClassResponses = {
    /**
     * Updated Account Class
     */
    200: {
        data?: AccountClass;
    };
};

export type UpdateAccountClassResponse = UpdateAccountClassResponses[keyof UpdateAccountClassResponses];

export type GetAllAccountGroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/finance/accountgroups';
};

export type GetAllAccountGroupsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllAccountGroupsError = GetAllAccountGroupsErrors[keyof GetAllAccountGroupsErrors];

export type GetAllAccountGroupsResponses = {
    /**
     * get available account groups ordered by id
     */
    200: {
        data?: Array<AccountGroup>;
    };
};

export type GetAllAccountGroupsResponse = GetAllAccountGroupsResponses[keyof GetAllAccountGroupsResponses];

export type CreateNewAccountGroupData = {
    /**
     * Account groups sorted by sort key.
     */
    body: AccountGroupNew;
    path?: never;
    query?: never;
    url: '/finance/accountgroups';
};

export type CreateNewAccountGroupErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type CreateNewAccountGroupError = CreateNewAccountGroupErrors[keyof CreateNewAccountGroupErrors];

export type CreateNewAccountGroupResponses = {
    /**
     * new account group
     */
    200: {
        data?: Array<AccountGroup>;
    };
};

export type CreateNewAccountGroupResponse = CreateNewAccountGroupResponses[keyof CreateNewAccountGroupResponses];

export type DeleteAccountGroupData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accountgroups/{id}';
};

export type DeleteAccountGroupErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteAccountGroupError = DeleteAccountGroupErrors[keyof DeleteAccountGroupErrors];

export type DeleteAccountGroupResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteAccountGroupResponse = DeleteAccountGroupResponses[keyof DeleteAccountGroupResponses];

export type GetAccountGroupByIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accountgroups/{id}';
};

export type GetAccountGroupByIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAccountGroupByIdError = GetAccountGroupByIdErrors[keyof GetAccountGroupByIdErrors];

export type GetAccountGroupByIdResponses = {
    /**
     * get account group
     */
    200: {
        data?: AccountGroup;
    };
};

export type GetAccountGroupByIdResponse = GetAccountGroupByIdResponses[keyof GetAccountGroupByIdResponses];

export type UpdateAccountGroupData = {
    /**
     * Account Group data
     */
    body: AccountGroupNew;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accountgroups/{id}';
};

export type UpdateAccountGroupErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateAccountGroupError = UpdateAccountGroupErrors[keyof UpdateAccountGroupErrors];

export type UpdateAccountGroupResponses = {
    /**
     * Updated Account Group
     */
    200: {
        data?: AccountGroup;
    };
};

export type UpdateAccountGroupResponse = UpdateAccountGroupResponses[keyof UpdateAccountGroupResponses];

export type GetAllAccountingPeriodsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/finance/accountingperiods';
};

export type GetAllAccountingPeriodsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllAccountingPeriodsError = GetAllAccountingPeriodsErrors[keyof GetAllAccountingPeriodsErrors];

export type GetAllAccountingPeriodsResponses = {
    /**
     * Get available accounting periods, sorted by start date.
     */
    200: {
        data?: Array<AccountingPeriod>;
    };
};

export type GetAllAccountingPeriodsResponse = GetAllAccountingPeriodsResponses[keyof GetAllAccountingPeriodsResponses];

export type CreateNewAccountingPeriodData = {
    /**
     * Accounting period data
     */
    body: AccountingPeriodCreate;
    path?: never;
    query?: never;
    url: '/finance/accountingperiods';
};

export type CreateNewAccountingPeriodErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type CreateNewAccountingPeriodError = CreateNewAccountingPeriodErrors[keyof CreateNewAccountingPeriodErrors];

export type CreateNewAccountingPeriodResponses = {
    /**
     * new accounting period with id
     */
    201: {
        data?: AccountingPeriod;
    };
};

export type CreateNewAccountingPeriodResponse =
    CreateNewAccountingPeriodResponses[keyof CreateNewAccountingPeriodResponses];

export type DeleteAccountingPeriodData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * If set to true, the deletion is simulated but nothing will be deleted.
         */
        dry_run?: boolean;
    };
    url: '/finance/accountingperiods/{id}';
};

export type DeleteAccountingPeriodErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteAccountingPeriodError = DeleteAccountingPeriodErrors[keyof DeleteAccountingPeriodErrors];

export type DeleteAccountingPeriodResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteAccountingPeriodResponse = DeleteAccountingPeriodResponses[keyof DeleteAccountingPeriodResponses];

export type GetAccountingPeriodByIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accountingperiods/{id}';
};

export type GetAccountingPeriodByIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAccountingPeriodByIdError = GetAccountingPeriodByIdErrors[keyof GetAccountingPeriodByIdErrors];

export type GetAccountingPeriodByIdResponses = {
    /**
     * get accounting period
     */
    200: {
        data?: AccountingPeriod;
    };
};

export type GetAccountingPeriodByIdResponse = GetAccountingPeriodByIdResponses[keyof GetAccountingPeriodByIdResponses];

export type UpdateAccountingPeriodData = {
    /**
     * Accounting period data
     */
    body: {
        clientId: number;
        endDate: string;
        isClosed: boolean;
        /**
         * If `true` all mutable transactions will be set to immutable. Hence no transaction will be editable or deletebale afterward.
         */
        setImmutable?: boolean;
        startDate: string;
    };
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accountingperiods/{id}';
};

export type UpdateAccountingPeriodErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateAccountingPeriodError = UpdateAccountingPeriodErrors[keyof UpdateAccountingPeriodErrors];

export type UpdateAccountingPeriodResponses = {
    /**
     * Updated accounting period
     */
    200: {
        data?: AccountingPeriod;
    };
};

export type UpdateAccountingPeriodResponse = UpdateAccountingPeriodResponses[keyof UpdateAccountingPeriodResponses];

export type DeleteAccountsForAccountingPeriodData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accountingperiods/{id}/accounts';
};

export type DeleteAccountsForAccountingPeriodErrors = {
    /**
     * Bad Request
     */
    400: {
        args?: Array<string>;
        errors?: Array<string>;
        message?: string;
        messageKey?: string;
        translatedMessage?: string;
    };
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteAccountsForAccountingPeriodError =
    DeleteAccountsForAccountingPeriodErrors[keyof DeleteAccountsForAccountingPeriodErrors];

export type DeleteAccountsForAccountingPeriodResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteAccountsForAccountingPeriodResponse =
    DeleteAccountsForAccountingPeriodResponses[keyof DeleteAccountsForAccountingPeriodResponses];

export type GetAccountsStatementsData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accountingperiods/{id}/accounts/statements';
};

export type GetAccountsStatementsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAccountsStatementsError = GetAccountsStatementsErrors[keyof GetAccountsStatementsErrors];

export type GetAccountsStatementsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<{
            accountId: number;
            booked: number;
            ignored: number;
            open: number;
        }>;
    };
};

export type GetAccountsStatementsResponse = GetAccountsStatementsResponses[keyof GetAccountsStatementsResponses];

export type GetAccountMovementsData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
        accountId: string;
    };
    query?: {
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Number of results per page.
         */
        limit?: number;
        state?: 'open' | 'booked' | 'ignored';
        query?: string;
        /**
         * If set, the response will include the specified data.
         */
        include?: Array<'bills'>;
    };
    url: '/finance/accountingperiods/{id}/accounts/{accountId}/movements';
};

export type GetAccountMovementsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAccountMovementsError = GetAccountMovementsErrors[keyof GetAccountMovementsErrors];

export type GetAccountMovementsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<StatementMovement>;
        meta: MetaPagination;
    };
};

export type GetAccountMovementsResponse = GetAccountMovementsResponses[keyof GetAccountMovementsResponses];

export type GetAccountStatementsData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
        accountId: string;
    };
    query?: never;
    url: '/finance/accountingperiods/{id}/accounts/{accountId}/statements';
};

export type GetAccountStatementsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAccountStatementsError = GetAccountStatementsErrors[keyof GetAccountStatementsErrors];

export type GetAccountStatementsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<AccountStatement>;
        meta?: MetaCount;
    };
};

export type GetAccountStatementsResponse = GetAccountStatementsResponses[keyof GetAccountStatementsResponses];

export type GetAccountStatementMovementsData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
        accountId: string;
        statementId: string;
    };
    query?: {
        state?: 'open' | 'booked' | 'ignored';
        /**
         * If set, the response will include the specified data.
         */
        include?: Array<'bills'>;
    };
    url: '/finance/accountingperiods/{id}/accounts/{accountId}/statements/{statementId}/movements';
};

export type GetAccountStatementMovementsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAccountStatementMovementsError =
    GetAccountStatementMovementsErrors[keyof GetAccountStatementMovementsErrors];

export type GetAccountStatementMovementsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<StatementMovement>;
        meta: MetaPagination;
    };
};

export type GetAccountStatementMovementsResponse =
    GetAccountStatementMovementsResponses[keyof GetAccountStatementMovementsResponses];

export type PostAccountStatementMovementData = {
    /**
     * Account statement movement data
     */
    body: {
        state: 'open' | 'booked' | 'ignored';
    };
    path: {
        /**
         * ID of Entity
         */
        id: number;
        accountId: string;
        statementId: string;
        movementId: string;
    };
    query?: never;
    url: '/finance/accountingperiods/{id}/accounts/{accountId}/statements/{statementId}/movements/{movementId}';
};

export type PostAccountStatementMovementErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostAccountStatementMovementError =
    PostAccountStatementMovementErrors[keyof PostAccountStatementMovementErrors];

export type PostAccountStatementMovementResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<unknown>;
    };
};

export type PostAccountStatementMovementResponse =
    PostAccountStatementMovementResponses[keyof PostAccountStatementMovementResponses];

export type PatchAccountStatementMovementSuggestionData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
        accountId: string;
        statementId: string;
        movementId: string;
    };
    query?: never;
    url: '/finance/accountingperiods/{id}/accounts/{accountId}/statements/{statementId}/movements/{movementId}/suggestions';
};

export type PatchAccountStatementMovementSuggestionErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PatchAccountStatementMovementSuggestionError =
    PatchAccountStatementMovementSuggestionErrors[keyof PatchAccountStatementMovementSuggestionErrors];

export type GetBillsForAccountingPeriodData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accountingperiods/{id}/bills';
};

export type GetBillsForAccountingPeriodErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetBillsForAccountingPeriodError =
    GetBillsForAccountingPeriodErrors[keyof GetBillsForAccountingPeriodErrors];

export type GetBillsForAccountingPeriodResponses = {
    /**
     * Get bills
     */
    200: {
        data?: Array<Bill>;
        meta?: MetaPagination;
    };
};

export type GetBillsForAccountingPeriodResponse =
    GetBillsForAccountingPeriodResponses[keyof GetBillsForAccountingPeriodResponses];

export type PostStatementsData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accountingperiods/{id}/statements';
};

export type PostStatementsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostStatementsError = PostStatementsErrors[keyof PostStatementsErrors];

export type PostStatementsResponses = {
    /**
     * OK
     */
    200: {
        data: {
            duplicates: number;
            /**
             * end amount in cents
             */
            endAmount?: number;
            endDate: DateString;
            fileName: string;
            fileType: string;
            identifier: string;
            movements: number;
            /**
             * start amount in cents
             */
            startAmount?: number;
            startDate: DateString;
        };
    };
};

export type PostStatementsResponse = PostStatementsResponses[keyof PostStatementsResponses];

export type DeleteStatementData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
        statementId: string;
    };
    query?: never;
    url: '/finance/accountingperiods/{id}/statements/{statementId}';
};

export type DeleteStatementErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteStatementError = DeleteStatementErrors[keyof DeleteStatementErrors];

export type DeleteStatementResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteStatementResponse = DeleteStatementResponses[keyof DeleteStatementResponses];

export type PutStatementData = {
    /**
     * Statement data
     */
    body: {
        name: string;
        statementId?: number;
    };
    path: {
        /**
         * ID of Entity
         */
        id: number;
        statementId: string;
    };
    query?: never;
    url: '/finance/accountingperiods/{id}/statements/{statementId}';
};

export type PutStatementErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutStatementError = PutStatementErrors[keyof PutStatementErrors];

export type GenerateSuggestionsData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
        statementId: string;
    };
    query?: never;
    url: '/finance/accountingperiods/{id}/statements/{statementId}/suggestions';
};

export type GenerateSuggestionsResponses = {
    /**
     * Successful generated
     */
    204: void;
};

export type GenerateSuggestionsResponse = GenerateSuggestionsResponses[keyof GenerateSuggestionsResponses];

export type GetUserRulesData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accountingperiods/{id}/userrules';
};

export type GetUserRulesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetUserRulesError = GetUserRulesErrors[keyof GetUserRulesErrors];

export type GetUserRulesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<{
            accountIds?: Array<number>;
            accountingPeriodId?: number;
            allAccounts?: boolean;
            id?: number;
            isIncome?: boolean;
            operator?: 'contains' | 'equals' | 'regex';
            searchString?: string;
            searchType?: string;
            sortKey?: number;
            suggestionType?: string;
            suggestionValue?: string;
        }>;
        meta?: MetaCount;
    };
};

export type GetUserRulesResponse = GetUserRulesResponses[keyof GetUserRulesResponses];

export type PutUserRulesData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accountingperiods/{id}/userrules';
};

export type PutUserRulesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutUserRulesError = PutUserRulesErrors[keyof PutUserRulesErrors];

export type GetAllAccountsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * ID of one accounting period or several accounting periods
         */
        accounting_period_id: Array<number>;
        /**
         * Calculate balance for accounts
         */
        calculate_balance?: boolean;
    };
    url: '/finance/accounts';
};

export type GetAllAccountsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllAccountsError = GetAllAccountsErrors[keyof GetAllAccountsErrors];

export type GetAllAccountsResponses = {
    /**
     * Get available accounts ordered by number
     */
    200: {
        data?: Array<Account>;
    };
};

export type GetAllAccountsResponse = GetAllAccountsResponses[keyof GetAllAccountsResponses];

export type CreateNewAccountData = {
    /**
     * Account data
     */
    body: AccountNew;
    path?: never;
    query?: never;
    url: '/finance/accounts';
};

export type CreateNewAccountErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type CreateNewAccountError = CreateNewAccountErrors[keyof CreateNewAccountErrors];

export type CreateNewAccountResponses = {
    /**
     * new account
     */
    200: {
        data?: Array<Account>;
    };
};

export type CreateNewAccountResponse = CreateNewAccountResponses[keyof CreateNewAccountResponses];

export type PostBulkAccountsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/finance/accounts/bulkcreate';
};

export type PostBulkAccountsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostBulkAccountsError = PostBulkAccountsErrors[keyof PostBulkAccountsErrors];

export type GetFinanceAccountsCsvData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The accounting period to get the result set from
         */
        accounting_period_id?: number;
    };
    url: '/finance/accounts/csv';
};

export type GetFinanceAccountsCsvResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetAccountsExportData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/finance/accounts/export';
};

export type GetAccountsExportErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAccountsExportError = GetAccountsExportErrors[keyof GetAccountsExportErrors];

export type GetAccountsImportTemplateData = {
    body: {
        clientId?: number;
        templateId?: number;
        /**
         * if set to true, export also contains the columns "client" and "booking year"
         */
        withClients?: boolean;
        year?: number;
    };
    path?: never;
    query?: never;
    url: '/finance/accounts/exporttemplate';
};

export type GetAccountsImportTemplateErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAccountsImportTemplateError = GetAccountsImportTemplateErrors[keyof GetAccountsImportTemplateErrors];

export type DeleteAccountData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * If set to true, the deletion is simulated but nothing will be deleted.
         */
        dry_run?: boolean;
    };
    url: '/finance/accounts/{id}';
};

export type DeleteAccountErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteAccountError = DeleteAccountErrors[keyof DeleteAccountErrors];

export type DeleteAccountResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteAccountResponse = DeleteAccountResponses[keyof DeleteAccountResponses];

export type GetAccountByIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accounts/{id}';
};

export type GetAccountByIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAccountByIdError = GetAccountByIdErrors[keyof GetAccountByIdErrors];

export type GetAccountByIdResponses = {
    /**
     * get account
     */
    200: {
        data?: Account;
    };
};

export type GetAccountByIdResponse = GetAccountByIdResponses[keyof GetAccountByIdResponses];

export type UpdateAccountData = {
    /**
     * Account data
     */
    body: AccountUpdate;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accounts/{id}';
};

export type UpdateAccountErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateAccountError = UpdateAccountErrors[keyof UpdateAccountErrors];

export type UpdateAccountResponses = {
    /**
     * Updated account
     */
    200: {
        data?: Account;
    };
};

export type UpdateAccountResponse = UpdateAccountResponses[keyof UpdateAccountResponses];

export type GetAllAccountTypesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/finance/accounttypes';
};

export type GetAllAccountTypesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllAccountTypesError = GetAllAccountTypesErrors[keyof GetAllAccountTypesErrors];

export type GetAllAccountTypesResponses = {
    /**
     * Get available account types ordered by sort key.
     */
    200: {
        data?: Array<AccountType>;
    };
};

export type GetAllAccountTypesResponse = GetAllAccountTypesResponses[keyof GetAllAccountTypesResponses];

export type CreateNewAccountTypeData = {
    /**
     * Account Type data
     */
    body: AccountTypeNew;
    path?: never;
    query?: never;
    url: '/finance/accounttypes';
};

export type CreateNewAccountTypeErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type CreateNewAccountTypeError = CreateNewAccountTypeErrors[keyof CreateNewAccountTypeErrors];

export type CreateNewAccountTypeResponses = {
    /**
     * new account type
     */
    200: {
        data?: Array<AccountType>;
    };
};

export type CreateNewAccountTypeResponse = CreateNewAccountTypeResponses[keyof CreateNewAccountTypeResponses];

export type DeleteAccountTypeData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * If set to true, the deletion is simulated but nothing will be deleted.
         */
        dry_run?: boolean;
    };
    url: '/finance/accounttypes/{id}';
};

export type DeleteAccountTypeErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteAccountTypeError = DeleteAccountTypeErrors[keyof DeleteAccountTypeErrors];

export type DeleteAccountTypeResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteAccountTypeResponse = DeleteAccountTypeResponses[keyof DeleteAccountTypeResponses];

export type GetAccountTypeByIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accounttypes/{id}';
};

export type GetAccountTypeByIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAccountTypeByIdError = GetAccountTypeByIdErrors[keyof GetAccountTypeByIdErrors];

export type GetAccountTypeByIdResponses = {
    /**
     * get account type
     */
    200: {
        data?: AccountType;
    };
};

export type GetAccountTypeByIdResponse = GetAccountTypeByIdResponses[keyof GetAccountTypeByIdResponses];

export type UpdateAccountTypeData = {
    /**
     * Account Type data
     */
    body: AccountTypeNew;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/accounttypes/{id}';
};

export type UpdateAccountTypeErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateAccountTypeError = UpdateAccountTypeErrors[keyof UpdateAccountTypeErrors];

export type UpdateAccountTypeResponses = {
    /**
     * Updated Account Type
     */
    200: {
        data?: AccountType;
    };
};

export type UpdateAccountTypeResponse = UpdateAccountTypeResponses[keyof UpdateAccountTypeResponses];

export type CreateNewBillData = {
    /**
     * Bill data
     */
    body: BillNew;
    path?: never;
    query?: never;
    url: '/finance/bills';
};

export type CreateNewBillErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type CreateNewBillError = CreateNewBillErrors[keyof CreateNewBillErrors];

export type CreateNewBillResponses = {
    /**
     * new bill
     */
    201: {
        data?: Bill;
    };
};

export type CreateNewBillResponse = CreateNewBillResponses[keyof CreateNewBillResponses];

export type DeleteBillData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * If set to true, the deletion is simulated but nothing will be deleted.
         */
        dry_run?: boolean;
    };
    url: '/finance/bills/{id}';
};

export type DeleteBillErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteBillError = DeleteBillErrors[keyof DeleteBillErrors];

export type DeleteBillResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteBillResponse = DeleteBillResponses[keyof DeleteBillResponses];

export type GetBillByIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/bills/{id}';
};

export type GetBillByIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetBillByIdError = GetBillByIdErrors[keyof GetBillByIdErrors];

export type GetBillByIdResponses = {
    /**
     * get bill
     */
    200: {
        data?: Bill;
    };
};

export type GetBillByIdResponse = GetBillByIdResponses[keyof GetBillByIdResponses];

export type UpdateBillData = {
    /**
     * Bill data
     */
    body: BillUpdate;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/bills/{id}';
};

export type UpdateBillErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateBillError = UpdateBillErrors[keyof UpdateBillErrors];

export type UpdateBillResponses = {
    /**
     * Updated bill
     */
    200: {
        data?: Bill;
    };
};

export type UpdateBillResponse = UpdateBillResponses[keyof UpdateBillResponses];

export type GetAllCashDiscountsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/finance/cashdiscounts';
};

export type GetAllCashDiscountsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllCashDiscountsError = GetAllCashDiscountsErrors[keyof GetAllCashDiscountsErrors];

export type GetAllCashDiscountsResponses = {
    /**
     * get available cash discounts ordered by id
     */
    200: {
        data?: Array<CashDiscount>;
    };
};

export type GetAllCashDiscountsResponse = GetAllCashDiscountsResponses[keyof GetAllCashDiscountsResponses];

export type CreateCashDiscountData = {
    /**
     * Cash discount data
     */
    body: CashDiscountNew;
    path?: never;
    query?: never;
    url: '/finance/cashdiscounts';
};

export type CreateCashDiscountErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type CreateCashDiscountError = CreateCashDiscountErrors[keyof CreateCashDiscountErrors];

export type CreateCashDiscountResponses = {
    /**
     * return new cash discout with ID
     */
    200: {
        data?: CashDiscount;
    };
};

export type CreateCashDiscountResponse = CreateCashDiscountResponses[keyof CreateCashDiscountResponses];

export type DeleteCashDiscountData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * If set to true, the deletion is simulated but nothing will be deleted.
         */
        dry_run?: boolean;
    };
    url: '/finance/cashdiscounts/{id}';
};

export type DeleteCashDiscountErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteCashDiscountError = DeleteCashDiscountErrors[keyof DeleteCashDiscountErrors];

export type DeleteCashDiscountResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteCashDiscountResponse = DeleteCashDiscountResponses[keyof DeleteCashDiscountResponses];

export type GetCashDiscountData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/cashdiscounts/{id}';
};

export type GetCashDiscountErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetCashDiscountError = GetCashDiscountErrors[keyof GetCashDiscountErrors];

export type GetCashDiscountResponses = {
    /**
     * get cash discount
     */
    200: {
        data?: CashDiscount;
    };
};

export type GetCashDiscountResponse = GetCashDiscountResponses[keyof GetCashDiscountResponses];

export type UpdateCashDiscountData = {
    /**
     * cash discount data
     */
    body: CashDiscountNew;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/cashdiscounts/{id}';
};

export type UpdateCashDiscountErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateCashDiscountError = UpdateCashDiscountErrors[keyof UpdateCashDiscountErrors];

export type UpdateCashDiscountResponses = {
    /**
     * updated cash discount
     */
    200: {
        data?: CashDiscount;
    };
};

export type UpdateCashDiscountResponse = UpdateCashDiscountResponses[keyof UpdateCashDiscountResponses];

export type GetAllClientsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/finance/clients';
};

export type GetAllClientsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllClientsError = GetAllClientsErrors[keyof GetAllClientsErrors];

export type GetAllClientsResponses = {
    /**
     * get available clients
     */
    200: {
        data?: Array<Client>;
    };
};

export type GetAllClientsResponse = GetAllClientsResponses[keyof GetAllClientsResponses];

export type CreateNewClientData = {
    /**
     * Client data
     */
    body: ClientNew;
    path?: never;
    query?: never;
    url: '/finance/clients';
};

export type CreateNewClientResponses = {
    /**
     * get available clients
     */
    201: {
        data?: Array<Client>;
    };
};

export type CreateNewClientResponse = CreateNewClientResponses[keyof CreateNewClientResponses];

export type DeleteClientData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * If set to true, the deletion is simulated but nothing will be deleted.
         */
        dry_run?: boolean;
    };
    url: '/finance/clients/{id}';
};

export type DeleteClientErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteClientError = DeleteClientErrors[keyof DeleteClientErrors];

export type DeleteClientResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteClientResponse = DeleteClientResponses[keyof DeleteClientResponses];

export type GetClientByIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/clients/{id}';
};

export type GetClientByIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetClientByIdError = GetClientByIdErrors[keyof GetClientByIdErrors];

export type GetClientByIdResponses = {
    /**
     * get client
     */
    200: {
        data?: Client;
    };
};

export type GetClientByIdResponse = GetClientByIdResponses[keyof GetClientByIdResponses];

export type UpdateClientData = {
    /**
     * Client data
     */
    body: ClientNew;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/clients/{id}';
};

export type UpdateClientErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateClientError = UpdateClientErrors[keyof UpdateClientErrors];

export type UpdateClientResponses = {
    /**
     * updated client
     */
    200: {
        data?: Client;
    };
};

export type UpdateClientResponse = UpdateClientResponses[keyof UpdateClientResponses];

export type GetAllCostCentersData = {
    body?: never;
    path?: never;
    query: {
        /**
         * ID of accounting period to get master data for
         */
        accounting_period_id: number;
    };
    url: '/finance/costcenters';
};

export type GetAllCostCentersErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllCostCentersError = GetAllCostCentersErrors[keyof GetAllCostCentersErrors];

export type GetAllCostCentersResponses = {
    /**
     * get available cost centers ordered by accounting period and number ascending
     */
    200: {
        data?: Array<CostCenter>;
    };
};

export type GetAllCostCentersResponse = GetAllCostCentersResponses[keyof GetAllCostCentersResponses];

export type CreateCostCenterData = {
    /**
     * cost center data
     */
    body: {
        accountingPeriodId: number;
        /**
         * Provide budget in cent.
         */
        budget?: number;
        groupId?: number;
        name: string;
        number: string;
    };
    path?: never;
    query?: never;
    url: '/finance/costcenters';
};

export type CreateCostCenterErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type CreateCostCenterError = CreateCostCenterErrors[keyof CreateCostCenterErrors];

export type CreateCostCenterResponses = {
    /**
     * return new cost center with ID
     */
    200: {
        data?: CostCenter;
    };
};

export type CreateCostCenterResponse = CreateCostCenterResponses[keyof CreateCostCenterResponses];

export type PostFinanceCostcentersBulkcreateData = {
    body?: {
        costCenters?: Array<{
            accountingPeriodId?: number;
            budget?: number | null;
            groupId?: number | null;
            name?: string;
            number?: string;
        }>;
    };
    path?: never;
    query?: never;
    url: '/finance/costcenters/bulkcreate';
};

export type PostFinanceCostcentersBulkcreateErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PostFinanceCostcentersBulkcreateResponses = {
    /**
     * Created
     */
    201: {
        data?: Array<CostCenter>;
    };
};

export type PostFinanceCostcentersBulkcreateResponse =
    PostFinanceCostcentersBulkcreateResponses[keyof PostFinanceCostcentersBulkcreateResponses];

export type PostCostCenterExportData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/finance/costcenters/export';
};

export type PostCostCenterExportErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostCostCenterExportError = PostCostCenterExportErrors[keyof PostCostCenterExportErrors];

export type DeleteCostCenterData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * If set to true, the deletion is simulated but nothing will be deleted.
         */
        dry_run?: boolean;
    };
    url: '/finance/costcenters/{id}';
};

export type DeleteCostCenterErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteCostCenterError = DeleteCostCenterErrors[keyof DeleteCostCenterErrors];

export type DeleteCostCenterResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteCostCenterResponse = DeleteCostCenterResponses[keyof DeleteCostCenterResponses];

export type GetCostCenterData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/costcenters/{id}';
};

export type GetCostCenterErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetCostCenterError = GetCostCenterErrors[keyof GetCostCenterErrors];

export type GetCostCenterResponses = {
    /**
     * get cost center
     */
    200: {
        data?: CostCenter;
    };
};

export type GetCostCenterResponse = GetCostCenterResponses[keyof GetCostCenterResponses];

export type UpdateCostCenterData = {
    /**
     * cost center data
     */
    body: {
        accountingPeriodId: number;
        /**
         * Provide budget in cent.
         */
        budget?: number;
        groupId?: number;
        name: string;
        number: string;
    };
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/costcenters/{id}';
};

export type UpdateCostCenterErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateCostCenterError = UpdateCostCenterErrors[keyof UpdateCostCenterErrors];

export type UpdateCostCenterResponses = {
    /**
     * updated cost center
     */
    200: {
        data?: CostCenter;
    };
};

export type UpdateCostCenterResponse = UpdateCostCenterResponses[keyof UpdateCostCenterResponses];

export type GetAllDonatorsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * ID of accounting period to get master data for
         */
        accounting_period_id: number;
        /**
         * Default is `name`.
         */
        order_by?: 'name' | 'count' | 'last' | 'sum';
        /**
         * Way of direction: ascending or descending
         */
        order_direction?: 'ASC' | 'DESC';
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Number of results per page.
         */
        limit?: number;
        /**
         * String to be included in donator's first name or last name
         */
        query?: string;
    };
    url: '/finance/donators';
};

export type GetAllDonatorsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllDonatorsError = GetAllDonatorsErrors[keyof GetAllDonatorsErrors];

export type GetAllDonatorsResponses = {
    /**
     * get available donators
     */
    200: {
        data?: Array<Donator>;
        meta?: MetaPagination;
    };
};

export type GetAllDonatorsResponse = GetAllDonatorsResponses[keyof GetAllDonatorsResponses];

export type DeleteFinanceDonationReceiptsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * ID of accounting period to get master data for
         */
        accounting_period_id: number;
    };
    url: '/finance/donators/receipts';
};

export type DeleteFinanceDonationReceiptsErrors = {
    /**
     * Forbidden to reset Donation Receipts
     */
    403: unknown;
    /**
     * Accounting period not found
     */
    404: unknown;
};

export type DeleteFinanceDonationReceiptsResponses = {
    /**
     * Donation recipts sucessfully resetted
     */
    202: unknown;
};

export type GetAllDonationReceiptsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * ID of accounting period to get master data for
         */
        accounting_period_id: number;
        /**
         * mode: seperate letter and attachtment in two files
         */
        mode?: 'onefile' | 'twofiles';
        /**
         * add empty pages to clear double page for  'all', 'letter', 'attachment'
         */
        cleardoublepage?: 'none' | 'all' | 'donation_cover_letter' | 'donation_attachment';
    };
    url: '/finance/donators/receipts';
};

export type GetAllDonationReceiptsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllDonationReceiptsError = GetAllDonationReceiptsErrors[keyof GetAllDonationReceiptsErrors];

export type GetAllDonationReceiptsResponses = {
    /**
     * get available donators
     */
    200: {
        data?: Array<Donator>;
        meta?: MetaPagination;
    };
};

export type GetAllDonationReceiptsResponse = GetAllDonationReceiptsResponses[keyof GetAllDonationReceiptsResponses];

export type CreateAllFinanceDonationReceiptsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * ID of accounting period to get master data for
         */
        accounting_period_id: number;
    };
    url: '/finance/donators/receipts';
};

export type CreateAllFinanceDonationReceiptsErrors = {
    /**
     * Bad Request, Operation cannot be executed, e.g. donation since receipts not yet created
     */
    400: unknown;
};

export type CreateAllFinanceDonationReceiptsResponses = {
    /**
     * The donation receipts will now be created.
     */
    202: unknown;
};

export type DeleteFinanceDonatorsDonatorCoupleIdData = {
    body?: never;
    path: {
        /**
         * ID of Donator or Couple
         */
        donatorCoupleId: string;
    };
    query: {
        /**
         * ID of accounting period to get master data for
         */
        accounting_period_id: number;
    };
    url: '/finance/donators/{donatorCoupleId}/receipts';
};

export type DeleteFinanceDonatorsDonatorCoupleIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteFinanceDonatorsDonatorCoupleIdResponse =
    DeleteFinanceDonatorsDonatorCoupleIdResponses[keyof DeleteFinanceDonatorsDonatorCoupleIdResponses];

export type GetFinanceDonatorsDonatorCoupleIdData = {
    body?: never;
    path: {
        /**
         * ID of Donator or Couple
         */
        donatorCoupleId: string;
    };
    query: {
        /**
         * ID of accounting period to get master data for
         */
        accounting_period_id: number;
    };
    url: '/finance/donators/{donatorCoupleId}/receipts';
};

export type GetFinanceDonatorsDonatorCoupleIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetFinanceDonatorsDonatorCoupleIdError =
    GetFinanceDonatorsDonatorCoupleIdErrors[keyof GetFinanceDonatorsDonatorCoupleIdErrors];

export type GetFinanceDonatorsDonatorCoupleIdResponses = {
    /**
     * URLs of the generated PDFs
     */
    200: {
        data?: {
            /**
             * URL to the attachment of the donation receipt
             */
            attachments?: string;
            /**
             * URL to the cover letter of the donation receipt
             */
            coverLetters?: string;
        };
    };
};

export type GetFinanceDonatorsDonatorCoupleIdResponse =
    GetFinanceDonatorsDonatorCoupleIdResponses[keyof GetFinanceDonatorsDonatorCoupleIdResponses];

export type GetAllDataData = {
    body?: never;
    path?: never;
    query: {
        /**
         * ID of accounting period to get master data for
         */
        accounting_period_id: number;
    };
    url: '/finance/masterdata';
};

export type GetAllDataErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAllDataError = GetAllDataErrors[keyof GetAllDataErrors];

export type GetAllDataResponses = {
    /**
     * get all master data for finance module
     */
    200: {
        data?: FinanceMasterData;
        meta?: {
            accountClassesCount?: number;
            accountGroupsCount?: number;
            accountTypesCount?: number;
            accountingPeriodCount?: number;
            accountsCount?: number;
            allowedClients?: number;
            cashDiscountsCount?: number;
            clientsCount?: number;
            costCentersCount?: number;
            taxRatesCount?: number;
            taxTypesCount?: number;
            transactionPurposesCount?: number;
        };
        permissions?: FinancePermissions;
    };
};

export type GetAllDataResponse = GetAllDataResponses[keyof GetAllDataResponses];

export type PostFinanceTurnoverReportData = {
    body?: {
        /**
         * ID of Accounting Period
         */
        accountingPeriodId: number;
        /**
         * Select monthly oder quarterly report
         */
        period: 'monthly' | 'quarterly';
        /**
         * Show Accounts With No Transactions
         */
        showEmptyAccounts?: boolean;
    };
    path?: never;
    query?: never;
    url: '/finance/reports/turnover';
};

export type PostFinanceTurnoverReportResponses = {
    /**
     * OK
     */
    200: {
        /**
         * URI of PDF
         */
        url: string;
    };
};

export type PostFinanceTurnoverReportResponse =
    PostFinanceTurnoverReportResponses[keyof PostFinanceTurnoverReportResponses];

export type CreateNewSplitTransactionData = {
    /**
     * Transaction data
     */
    body: SplitTransaction;
    path?: never;
    query?: never;
    url: '/finance/splittransactions';
};

export type CreateNewSplitTransactionResponses = {
    /**
     * created transaction with id
     */
    201: {
        data?: Array<SplitTransaction>;
    };
    /**
     * No Content
     */
    204: void;
};

export type CreateNewSplitTransactionResponse =
    CreateNewSplitTransactionResponses[keyof CreateNewSplitTransactionResponses];

export type DeleteSplitTransactionData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * If set, the response will include the specified data.
         */
        include?: Array<'bills'>;
        /**
         * If set to true, the deletion is simulated but nothing will be deleted.
         */
        dry_run?: boolean;
    };
    url: '/finance/splittransactions/{id}';
};

export type DeleteSplitTransactionErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteSplitTransactionError = DeleteSplitTransactionErrors[keyof DeleteSplitTransactionErrors];

export type DeleteSplitTransactionResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeleteSplitTransactionResponse = DeleteSplitTransactionResponses[keyof DeleteSplitTransactionResponses];

export type GetSplitTransactionByIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * If set, the response will include the specified data.
         */
        include?: Array<'bills'>;
    };
    url: '/finance/splittransactions/{id}';
};

export type GetSplitTransactionByIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetSplitTransactionByIdError = GetSplitTransactionByIdErrors[keyof GetSplitTransactionByIdErrors];

export type GetSplitTransactionByIdResponses = {
    /**
     * get transaction
     */
    200: {
        data?: Array<SplitTransaction>;
    };
};

export type GetSplitTransactionByIdResponse = GetSplitTransactionByIdResponses[keyof GetSplitTransactionByIdResponses];

export type UpdateSplitTransactionData = {
    /**
     * Split transaction data
     */
    body: SplitTransaction;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * If set, the response will include the specified data.
         */
        include?: Array<'bills'>;
    };
    url: '/finance/splittransactions/{id}';
};

export type UpdateSplitTransactionErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateSplitTransactionError = UpdateSplitTransactionErrors[keyof UpdateSplitTransactionErrors];

export type UpdateSplitTransactionResponses = {
    /**
     * Updated split transaction
     */
    200: {
        data?: Array<SplitTransaction>;
    };
    /**
     * Successfully deleted
     */
    204: void;
};

export type UpdateSplitTransactionResponse = UpdateSplitTransactionResponses[keyof UpdateSplitTransactionResponses];

export type CancelSplitTransactionData = {
    /**
     * Storno data
     */
    body: TransactionStorno;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/splittransactions/{id}/storno';
};

export type CancelSplitTransactionErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type CancelSplitTransactionError = CancelSplitTransactionErrors[keyof CancelSplitTransactionErrors];

export type CancelSplitTransactionResponses = {
    /**
     * Updated split transaction
     */
    200: {
        data?: Array<SplitTransaction>;
    };
};

export type CancelSplitTransactionResponse = CancelSplitTransactionResponses[keyof CancelSplitTransactionResponses];

export type GetAllTaxRatesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * ID of accounting period to get master data for
         */
        accounting_period_id: number;
    };
    url: '/finance/taxrates';
};

export type GetAllTaxRatesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllTaxRatesError = GetAllTaxRatesErrors[keyof GetAllTaxRatesErrors];

export type GetAllTaxRatesResponses = {
    /**
     * get available tax rates ordered by id
     */
    200: {
        data?: Array<TaxRate>;
    };
};

export type GetAllTaxRatesResponse = GetAllTaxRatesResponses[keyof GetAllTaxRatesResponses];

export type CreateTaxRateData = {
    /**
     * Tax rate data
     */
    body: TaxRateNew;
    path?: never;
    query?: never;
    url: '/finance/taxrates';
};

export type CreateTaxRateErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type CreateTaxRateError = CreateTaxRateErrors[keyof CreateTaxRateErrors];

export type CreateTaxRateResponses = {
    /**
     * return new tax rate with ID
     */
    200: {
        data?: TaxRate;
    };
};

export type CreateTaxRateResponse = CreateTaxRateResponses[keyof CreateTaxRateResponses];

export type DeleteTaxRateData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * If set to true, the deletion is simulated but nothing will be deleted.
         */
        dry_run?: boolean;
    };
    url: '/finance/taxrates/{id}';
};

export type DeleteTaxRateErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteTaxRateError = DeleteTaxRateErrors[keyof DeleteTaxRateErrors];

export type DeleteTaxRateResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteTaxRateResponse = DeleteTaxRateResponses[keyof DeleteTaxRateResponses];

export type GetTaxRateData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/taxrates/{id}';
};

export type GetTaxRateErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetTaxRateError = GetTaxRateErrors[keyof GetTaxRateErrors];

export type GetTaxRateResponses = {
    /**
     * get tax rate
     */
    200: {
        data?: TaxRate;
    };
};

export type GetTaxRateResponse = GetTaxRateResponses[keyof GetTaxRateResponses];

export type UpdateTaxRateData = {
    /**
     * Tax rate data
     */
    body: TaxRateNew;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/taxrates/{id}';
};

export type UpdateTaxRateErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateTaxRateError = UpdateTaxRateErrors[keyof UpdateTaxRateErrors];

export type UpdateTaxRateResponses = {
    /**
     * updated tax rate
     */
    200: {
        data?: TaxRate;
    };
};

export type UpdateTaxRateResponse = UpdateTaxRateResponses[keyof UpdateTaxRateResponses];

export type GetAllTaxTypesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/finance/taxtypes';
};

export type GetAllTaxTypesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllTaxTypesError = GetAllTaxTypesErrors[keyof GetAllTaxTypesErrors];

export type GetAllTaxTypesResponses = {
    /**
     * get available tax types
     */
    200: {
        data?: Array<TaxType>;
    };
};

export type GetAllTaxTypesResponse = GetAllTaxTypesResponses[keyof GetAllTaxTypesResponses];

export type CreateTaxTypeData = {
    /**
     * tax type data
     */
    body: TaxTypeNew;
    path?: never;
    query?: never;
    url: '/finance/taxtypes';
};

export type CreateTaxTypeErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type CreateTaxTypeError = CreateTaxTypeErrors[keyof CreateTaxTypeErrors];

export type CreateTaxTypeResponses = {
    /**
     * return new tax type with ID
     */
    200: {
        data?: TaxType;
    };
};

export type CreateTaxTypeResponse = CreateTaxTypeResponses[keyof CreateTaxTypeResponses];

export type DeleteTaxTypeData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * If set to true, the deletion is simulated but nothing will be deleted.
         */
        dry_run?: boolean;
    };
    url: '/finance/taxtypes/{id}';
};

export type DeleteTaxTypeErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteTaxTypeError = DeleteTaxTypeErrors[keyof DeleteTaxTypeErrors];

export type DeleteTaxTypeResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteTaxTypeResponse = DeleteTaxTypeResponses[keyof DeleteTaxTypeResponses];

export type GetTaxTypeData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/taxtypes/{id}';
};

export type GetTaxTypeErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetTaxTypeError = GetTaxTypeErrors[keyof GetTaxTypeErrors];

export type GetTaxTypeResponses = {
    /**
     * get tax type
     */
    200: {
        data?: TaxType;
    };
};

export type GetTaxTypeResponse = GetTaxTypeResponses[keyof GetTaxTypeResponses];

export type UpdateTaxTypeData = {
    /**
     * tax type data
     */
    body: TaxTypeNew;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/taxtypes/{id}';
};

export type UpdateTaxTypeErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateTaxTypeError = UpdateTaxTypeErrors[keyof UpdateTaxTypeErrors];

export type UpdateTaxTypeResponses = {
    /**
     * updated tax type
     */
    200: {
        data?: TaxType;
    };
};

export type UpdateTaxTypeResponse = UpdateTaxTypeResponses[keyof UpdateTaxTypeResponses];

export type GetAllFinanceTemplatesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/finance/templates';
};

export type GetAllFinanceTemplatesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetAllFinanceTemplatesError = GetAllFinanceTemplatesErrors[keyof GetAllFinanceTemplatesErrors];

export type GetAllFinanceTemplatesResponses = {
    /**
     * get finance templates
     */
    200: Array<FinanceTemplate>;
};

export type GetAllFinanceTemplatesResponse = GetAllFinanceTemplatesResponses[keyof GetAllFinanceTemplatesResponses];

export type ExportFinanceTemplateData = {
    body?: never;
    path?: never;
    query: {
        /**
         * ID of accounting period to get master data for
         */
        accounting_period_id: number;
    };
    url: '/finance/templates/export';
};

export type ExportFinanceTemplateErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type ExportFinanceTemplateError = ExportFinanceTemplateErrors[keyof ExportFinanceTemplateErrors];

export type ExportFinanceTemplateResponses = {
    /**
     * The finance template as json file.
     */
    200: unknown;
};

export type ApplyFinanceTemplateData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query: {
        /**
         * ID of accounting period to get master data for
         */
        accounting_period_id: number;
    };
    url: '/finance/templates/{id}';
};

export type ApplyFinanceTemplateErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type ApplyFinanceTemplateError = ApplyFinanceTemplateErrors[keyof ApplyFinanceTemplateErrors];

export type ApplyFinanceTemplateResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ApplyFinanceTemplateResponse = ApplyFinanceTemplateResponses[keyof ApplyFinanceTemplateResponses];

export type GetAllTransactionPurposesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/finance/transactionpurposes';
};

export type GetAllTransactionPurposesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllTransactionPurposesError = GetAllTransactionPurposesErrors[keyof GetAllTransactionPurposesErrors];

export type GetAllTransactionPurposesResponses = {
    /**
     * get available transaction purposes
     */
    200: {
        data?: Array<TransactionPurpose>;
    };
};

export type GetAllTransactionPurposesResponse =
    GetAllTransactionPurposesResponses[keyof GetAllTransactionPurposesResponses];

export type CreateNewTransactionPurposeData = {
    /**
     * Transaction purpose data
     */
    body: TransactionPurposeNew;
    path?: never;
    query?: never;
    url: '/finance/transactionpurposes';
};

export type CreateNewTransactionPurposeResponses = {
    /**
     * get created transaction purpose with id
     */
    201: {
        data?: Array<TransactionPurpose>;
    };
};

export type CreateNewTransactionPurposeResponse =
    CreateNewTransactionPurposeResponses[keyof CreateNewTransactionPurposeResponses];

export type DeleteTransactionPurposeData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * If set to true, the deletion is simulated but nothing will be deleted.
         */
        dry_run?: boolean;
    };
    url: '/finance/transactionpurposes/{id}';
};

export type DeleteTransactionPurposeErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteTransactionPurposeError = DeleteTransactionPurposeErrors[keyof DeleteTransactionPurposeErrors];

export type DeleteTransactionPurposeResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteTransactionPurposeResponse =
    DeleteTransactionPurposeResponses[keyof DeleteTransactionPurposeResponses];

export type GetTransactionPurposeByIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/transactionpurposes/{id}';
};

export type GetTransactionPurposeByIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetTransactionPurposeByIdError = GetTransactionPurposeByIdErrors[keyof GetTransactionPurposeByIdErrors];

export type GetTransactionPurposeByIdResponses = {
    /**
     * get transaction purpose
     */
    200: {
        data?: TransactionPurpose;
    };
};

export type GetTransactionPurposeByIdResponse =
    GetTransactionPurposeByIdResponses[keyof GetTransactionPurposeByIdResponses];

export type UpdateTransactionPurposeData = {
    /**
     * transaction purpose data
     */
    body: TransactionPurposeNew;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/transactionpurposes/{id}';
};

export type UpdateTransactionPurposeErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateTransactionPurposeError = UpdateTransactionPurposeErrors[keyof UpdateTransactionPurposeErrors];

export type UpdateTransactionPurposeResponses = {
    /**
     * Updated transaction purpose
     */
    200: {
        data?: TransactionPurpose;
    };
};

export type UpdateTransactionPurposeResponse =
    UpdateTransactionPurposeResponses[keyof UpdateTransactionPurposeResponses];

export type GetAllTransactionsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * ID of accounting period to get master data for
         */
        accounting_period_id: number;
        /**
         * Filter by person ID. Get all transactions the person has created. But only show those the user can see.
         */
        created_pid?: number;
        /**
         * Filter by cost centers.
         */
        cost_center_ids?: Array<number>;
        /**
         * Filter by donator or donator spouse. Provide an array of person ids.
         */
        donator_ids?: Array<number>;
        /**
         * Filter by ids to include.
         */
        include_ids?: Array<number>;
        /**
         * Filter by ids to exclude.
         */
        exclude_ids?: Array<number>;
        /**
         * Filter by account/contra account. All transactions match, where either account or contra account is in the list.
         */
        account_ids?: Array<number>;
        /**
         * Filter by donations. `true` = Only donations, `false` = Other than donation.
         */
        is_donation?: boolean;
        /**
         * Filter transactions by income or outcome transactions. An account group has a flag `cash asset account` to indicate accounts for income/outcome.
         */
        is_income?: boolean;
        /**
         * Show transactions after this date.
         */
        start_date?: string;
        /**
         * Show transactions before this date.
         */
        end_date?: string;
        /**
         * Filter transactions, whether transaction is immutable.
         */
        is_immutable?: boolean;
        /**
         * Default is `date`. Order transactions either by document date, amount, or modified date. For `date` and `amount` a second sorting happens by modified. The order direction for modified date is the same as for date and amount.
         */
        order_by?: 'date' | 'amount' | 'modified';
        /**
         * Way of direction: ascending or descending
         */
        order_direction?: 'ASC' | 'DESC';
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Number of results per page.
         */
        limit?: number;
        /**
         * If set, the response will include the specified data.
         */
        include?: Array<'bills'>;
    };
    url: '/finance/transactions';
};

export type GetAllTransactionsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllTransactionsError = GetAllTransactionsErrors[keyof GetAllTransactionsErrors];

export type GetAllTransactionsResponses = {
    /**
     * get available transactions
     */
    200: {
        data: Array<Transaction>;
        meta: MetaPagination;
    };
};

export type GetAllTransactionsResponse = GetAllTransactionsResponses[keyof GetAllTransactionsResponses];

export type BatchTransactionData = {
    /**
     * Batch information consists of changeset and filters.
     */
    body?: {
        /**
         * Fields to change.
         */
        changeset: {
            /**
             * Make All Provided Transactions (explicit or via filters) Immutable.
             */
            isImmutable?: boolean;
        };
        /**
         * List of filters
         */
        filters:
            | {
                  /**
                   * Filter by account/contra account. All transactions match, where either account or contra account is in the list.
                   */
                  accountIds?: Array<number>;
                  /**
                   * Filter by Accounting Period
                   */
                  accountingPeriodId: number;
                  /**
                   * Filter by Cost Centers.
                   */
                  costCenterIds?: Array<number>;
                  /**
                   * Filter by person ID. Get all transactions the person has created. But only show those the user can see.
                   */
                  createdPid?: number;
                  /**
                   * Filter by donator or donator spouse. Provide an array of person ids.
                   */
                  donatorIds?: Array<number>;
                  /**
                   * Show transactions before this date.
                   */
                  endDate?: string;
                  /**
                   * Filter by donations. `true` = Only donations, `false` = Other than donation.
                   */
                  isDonation?: boolean;
                  /**
                   * Filter transactions, whether transaction is immutable.
                   */
                  isImmutable?: boolean;
                  /**
                   * Filter transactions by income or outcome transactions. An account group has a flag `cash asset account` to indicate accounts for income/outcome.
                   */
                  isIncome?: boolean;
                  /**
                   * Show transactions after this date.
                   */
                  startDate?: string;
              }
            | {
                  /**
                   * Filter by Accounting Period
                   */
                  accountingPeriodId: number;
                  /**
                   * List of Transaction IDs. Only those Transactions are updated.
                   * @deprecated
                   */
                  include?: Array<number>;
                  /**
                   * List of Transaction IDs. Only those Transactions are updated.
                   */
                  includeIds: Array<number>;
              }
            | {
                  /**
                   * Filter by Accounting Period
                   */
                  accountingPeriodId: number;
                  /**
                   * List of Transaction IDs. All Transactions except this list of IDs are updated in the given Accouting Period.
                   * @deprecated
                   */
                  exclude?: Array<number>;
                  /**
                   * List of Transaction IDs. All Transactions except this list of IDs are updated in the given Accouting Period.
                   */
                  excludeIds: Array<number>;
              };
    };
    path?: never;
    query?: never;
    url: '/finance/transactions';
};

export type BatchTransactionResponses = {
    /**
     * OK
     */
    200: {
        data?: {
            /**
             * Number of affected rows, which could be resolved by given filters.
             */
            affectedRows?: number;
            /**
             * Number of database rows, which were changed.
             */
            changedRows?: number;
        };
    };
};

export type BatchTransactionResponse = BatchTransactionResponses[keyof BatchTransactionResponses];

export type CreateNewTransactionData = {
    /**
     * Transaction data
     */
    body: TransactionNew;
    path?: never;
    query?: never;
    url: '/finance/transactions';
};

export type CreateNewTransactionResponses = {
    /**
     * created transaction with id
     */
    200: {
        data?: Array<Transaction>;
    };
};

export type CreateNewTransactionResponse = CreateNewTransactionResponses[keyof CreateNewTransactionResponses];

export type PostBulkTransactionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/finance/transactions/bulkcreate';
};

export type PostBulkTransactionsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostBulkTransactionsError = PostBulkTransactionsErrors[keyof PostBulkTransactionsErrors];

export type GetTransactionsCsvData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of results per page.
         */
        limit?: number;
        order_by?: string;
        direction?: string;
        accounting_period_id?: string;
        /**
         * select special Columns for particular target
         */
        target?: 'default' | 'sage100';
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
    };
    url: '/finance/transactions/csv';
};

export type GetTransactionsCsvResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetFinanceTransactionsDatevexportData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/finance/transactions/datevexport';
};

export type GetFinanceTransactionsDatevexportErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetFinanceTransactionsDatevexportError =
    GetFinanceTransactionsDatevexportErrors[keyof GetFinanceTransactionsDatevexportErrors];

export type GetTransactionsExportData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of results per page.
         */
        limit?: number;
        order_by?: string;
        direction?: string;
        accounting_period_id?: string;
        /**
         * select special Columns for particular target
         */
        target?: 'default' | 'sage100';
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
    };
    url: '/finance/transactions/export';
};

export type GetTransactionsExportErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetTransactionsExportError = GetTransactionsExportErrors[keyof GetTransactionsExportErrors];

export type GetNextDocumentNumberData = {
    body?: never;
    path?: never;
    query?: {
        accounting_period_id?: string;
    };
    url: '/finance/transactions/nextdocumentnumber';
};

export type GetNextDocumentNumberErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetNextDocumentNumberError = GetNextDocumentNumberErrors[keyof GetNextDocumentNumberErrors];

export type GetTransactionsSummaryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/finance/transactions/summary';
};

export type GetTransactionsSummaryErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetTransactionsSummaryError = GetTransactionsSummaryErrors[keyof GetTransactionsSummaryErrors];

export type GetTransactionsSummaryResponses = {
    /**
     * get transaction
     */
    200: {
        data?: TransactionSummary;
    };
};

export type GetTransactionsSummaryResponse = GetTransactionsSummaryResponses[keyof GetTransactionsSummaryResponses];

export type DeleteTransactionData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * If set, the response will include the specified data.
         */
        include?: Array<'bills'>;
        /**
         * If set to true, the deletion is simulated but nothing will be deleted.
         */
        dry_run?: boolean;
    };
    url: '/finance/transactions/{id}';
};

export type DeleteTransactionErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteTransactionError = DeleteTransactionErrors[keyof DeleteTransactionErrors];

export type DeleteTransactionResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteTransactionResponse = DeleteTransactionResponses[keyof DeleteTransactionResponses];

export type GetTransactionByIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * If set, the response will include the specified data.
         */
        include?: Array<'bills'>;
    };
    url: '/finance/transactions/{id}';
};

export type GetTransactionByIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetTransactionByIdError = GetTransactionByIdErrors[keyof GetTransactionByIdErrors];

export type GetTransactionByIdResponses = {
    /**
     * get transaction
     */
    200: {
        data?: Array<Transaction>;
    };
};

export type GetTransactionByIdResponse = GetTransactionByIdResponses[keyof GetTransactionByIdResponses];

export type UpdateTransactionData = {
    /**
     * Transaction data
     */
    body: TransactionUpdate;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * If set, the response will include the specified data.
         */
        include?: Array<'bills'>;
    };
    url: '/finance/transactions/{id}';
};

export type UpdateTransactionErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateTransactionError = UpdateTransactionErrors[keyof UpdateTransactionErrors];

export type UpdateTransactionResponses = {
    /**
     * Updated transaction
     */
    200: {
        data?: Array<Transaction>;
    };
};

export type UpdateTransactionResponse = UpdateTransactionResponses[keyof UpdateTransactionResponses];

export type CancelTransactionData = {
    /**
     * Storno data
     */
    body: TransactionStorno;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/finance/transactions/{id}/storno';
};

export type CancelTransactionErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type CancelTransactionError = CancelTransactionErrors[keyof CancelTransactionErrors];

export type CancelTransactionResponses = {
    /**
     * Updated transaction
     */
    200: {
        data?: Array<Transaction>;
    };
};

export type CancelTransactionResponse = CancelTransactionResponses[keyof CancelTransactionResponses];

export type GetFollowupsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter for follow-ups.
         */
        filter?: Array<FollowUpFilter>;
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Number of results per page.
         */
        limit?: number;
    };
    url: '/followups';
};

export type GetFollowupsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetFollowupsError = GetFollowupsErrors[keyof GetFollowupsErrors];

export type GetFollowupsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<FollowUp2>;
        meta: MetaCount;
    };
};

export type GetFollowupsResponse = GetFollowupsResponses[keyof GetFollowupsResponses];

export type DeleteFollowupsFollowUpIdData = {
    body?: never;
    path: {
        /**
         * ID of Follow-up
         */
        followUpId: number;
    };
    query?: never;
    url: '/followups/{followUpId}';
};

export type DeleteFollowupsFollowUpIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteFollowupsFollowUpIdError = DeleteFollowupsFollowUpIdErrors[keyof DeleteFollowupsFollowUpIdErrors];

export type DeleteFollowupsFollowUpIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteFollowupsFollowUpIdResponse =
    DeleteFollowupsFollowUpIdResponses[keyof DeleteFollowupsFollowUpIdResponses];

export type GetFollowupsFollowUpIdData = {
    body?: never;
    path: {
        /**
         * ID of Follow-up
         */
        followUpId: number;
    };
    query?: never;
    url: '/followups/{followUpId}';
};

export type GetFollowupsFollowUpIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetFollowupsFollowUpIdError = GetFollowupsFollowUpIdErrors[keyof GetFollowupsFollowUpIdErrors];

export type GetFollowupsFollowUpIdResponses = {
    /**
     * OK
     */
    200: {
        data: FollowUp2;
    };
};

export type GetFollowupsFollowUpIdResponse = GetFollowupsFollowUpIdResponses[keyof GetFollowupsFollowUpIdResponses];

export type PutFollowupsFollowUpIdData = {
    body?: FollowUpCreate;
    path: {
        /**
         * ID of Follow-up
         */
        followUpId: number;
    };
    query?: never;
    url: '/followups/{followUpId}';
};

export type PutFollowupsFollowUpIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutFollowupsFollowUpIdError = PutFollowupsFollowUpIdErrors[keyof PutFollowupsFollowUpIdErrors];

export type PutFollowupsFollowUpIdResponses = {
    /**
     * OK
     */
    200: {
        data?: FollowUp2;
    };
};

export type PutFollowupsFollowUpIdResponse = PutFollowupsFollowUpIdResponses[keyof PutFollowupsFollowUpIdResponses];

export type PostFollowupsFollowUpIdCompleteData = {
    body?: {
        successGroupId?: number | null;
    };
    path: {
        /**
         * ID of Follow-up
         */
        followUpId: number;
    };
    query?: never;
    url: '/followups/{followUpId}/complete';
};

export type PostFollowupsFollowUpIdCompleteErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostFollowupsFollowUpIdCompleteError =
    PostFollowupsFollowUpIdCompleteErrors[keyof PostFollowupsFollowUpIdCompleteErrors];

export type PostFollowupsFollowUpIdCompleteResponses = {
    /**
     * OK
     */
    200: {
        data?: FollowUp2;
    };
};

export type PostFollowupsFollowUpIdCompleteResponse =
    PostFollowupsFollowUpIdCompleteResponses[keyof PostFollowupsFollowUpIdCompleteResponses];

export type PostFollowupsFollowUpIdNotesData = {
    body?: {
        comment: string;
        commentViewerId: number | null;
    };
    path: {
        /**
         * ID of Follow-up
         */
        followUpId: number;
    };
    query?: {
        also_apply_to_person?: boolean;
    };
    url: '/followups/{followUpId}/notes';
};

export type PostFollowupsFollowUpIdNotesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostFollowupsFollowUpIdNotesError =
    PostFollowupsFollowUpIdNotesErrors[keyof PostFollowupsFollowUpIdNotesErrors];

export type PostFollowupsFollowUpIdNotesResponses = {
    /**
     * OK
     */
    204: void;
};

export type PostFollowupsFollowUpIdNotesResponse =
    PostFollowupsFollowUpIdNotesResponses[keyof PostFollowupsFollowUpIdNotesResponses];

export type PostFollowupsFollowUpIdPostponeData = {
    body: {
        dueDate: DateString;
    };
    path: {
        /**
         * ID of Follow-up
         */
        followUpId: number;
    };
    query?: never;
    url: '/followups/{followUpId}/postpone';
};

export type PostFollowupsFollowUpIdPostponeErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostFollowupsFollowUpIdPostponeError =
    PostFollowupsFollowUpIdPostponeErrors[keyof PostFollowupsFollowUpIdPostponeErrors];

export type PostFollowupsFollowUpIdPostponeResponses = {
    /**
     * OK
     */
    200: {
        data?: FollowUp2;
    };
};

export type PostFollowupsFollowUpIdPostponeResponse =
    PostFollowupsFollowUpIdPostponeResponses[keyof PostFollowupsFollowUpIdPostponeResponses];

export type PostFollowupsFollowUpIdResetData = {
    body?: {
        dueDate?: DateString;
    };
    path: {
        /**
         * ID of Follow-up
         */
        followUpId: number;
    };
    query?: never;
    url: '/followups/{followUpId}/reset';
};

export type PostFollowupsFollowUpIdResetErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostFollowupsFollowUpIdResetError =
    PostFollowupsFollowUpIdResetErrors[keyof PostFollowupsFollowUpIdResetErrors];

export type PostFollowupsFollowUpIdResetResponses = {
    /**
     * OK
     */
    200: {
        data?: FollowUp2;
    };
};

export type PostFollowupsFollowUpIdResetResponse =
    PostFollowupsFollowUpIdResetResponses[keyof PostFollowupsFollowUpIdResetResponses];

export type GetFurtherlinksData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/furtherlinks';
};

export type GetFurtherlinksErrors = {
    /**
     * Unauthorized
     */
    401: string;
};

export type GetFurtherlinksError = GetFurtherlinksErrors[keyof GetFurtherlinksErrors];

export type GetFurtherlinksResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<FurtherLink>;
        meta?: MetaCount;
    };
};

export type GetFurtherlinksResponse = GetFurtherlinksResponses[keyof GetFurtherlinksResponses];

export type PostFurtherlinksData = {
    body?: FurtherLinkCreate;
    path?: never;
    query?: never;
    url: '/furtherlinks';
};

export type PostFurtherlinksErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostFurtherlinksError = PostFurtherlinksErrors[keyof PostFurtherlinksErrors];

export type PostFurtherlinksResponses = {
    /**
     * OK
     */
    201: {
        data?: FurtherLink;
    };
};

export type PostFurtherlinksResponse = PostFurtherlinksResponses[keyof PostFurtherlinksResponses];

export type DeleteFurtherlinksFurtherLinkIdData = {
    body?: never;
    path: {
        furtherLinkId: number;
    };
    query?: never;
    url: '/furtherlinks/{furtherLinkId}';
};

export type DeleteFurtherlinksFurtherLinkIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteFurtherlinksFurtherLinkIdError =
    DeleteFurtherlinksFurtherLinkIdErrors[keyof DeleteFurtherlinksFurtherLinkIdErrors];

export type DeleteFurtherlinksFurtherLinkIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteFurtherlinksFurtherLinkIdResponse =
    DeleteFurtherlinksFurtherLinkIdResponses[keyof DeleteFurtherlinksFurtherLinkIdResponses];

export type GetFurtherlinksFurtherLinkIdData = {
    body?: never;
    path: {
        furtherLinkId: number;
    };
    query?: never;
    url: '/furtherlinks/{furtherLinkId}';
};

export type GetFurtherlinksFurtherLinkIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetFurtherlinksFurtherLinkIdError =
    GetFurtherlinksFurtherLinkIdErrors[keyof GetFurtherlinksFurtherLinkIdErrors];

export type GetFurtherlinksFurtherLinkIdResponses = {
    /**
     * OK
     */
    200: {
        data?: FurtherLink;
    };
};

export type GetFurtherlinksFurtherLinkIdResponse =
    GetFurtherlinksFurtherLinkIdResponses[keyof GetFurtherlinksFurtherLinkIdResponses];

export type PutFurtherlinksFurtherLinkIdData = {
    body?: FurtherLinkCreate;
    path: {
        furtherLinkId: number;
    };
    query?: never;
    url: '/furtherlinks/{furtherLinkId}';
};

export type PutFurtherlinksFurtherLinkIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutFurtherlinksFurtherLinkIdError =
    PutFurtherlinksFurtherLinkIdErrors[keyof PutFurtherlinksFurtherLinkIdErrors];

export type PutFurtherlinksFurtherLinkIdResponses = {
    /**
     * OK
     */
    200: {
        data?: FurtherLink;
    };
};

export type PutFurtherlinksFurtherLinkIdResponse =
    PutFurtherlinksFurtherLinkIdResponses[keyof PutFurtherlinksFurtherLinkIdResponses];

export type GetGroupAgegroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/group/agegroups';
};

export type GetGroupAgegroupsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupAgegroupsError = GetGroupAgegroupsErrors[keyof GetGroupAgegroupsErrors];

export type GetGroupAgegroupsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<AgeGroup>;
        meta?: MetaCount;
    };
};

export type GetGroupAgegroupsResponse = GetGroupAgegroupsResponses[keyof GetGroupAgegroupsResponses];

export type PostGroupAgegroupsData = {
    body?: AgeGroupCreate;
    path?: never;
    query?: never;
    url: '/group/agegroups';
};

export type PostGroupAgegroupsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostGroupAgegroupsError = PostGroupAgegroupsErrors[keyof PostGroupAgegroupsErrors];

export type PostGroupAgegroupsResponses = {
    /**
     * OK
     */
    201: {
        data?: GroupCategory;
    };
};

export type PostGroupAgegroupsResponse = PostGroupAgegroupsResponses[keyof PostGroupAgegroupsResponses];

export type DeleteGroupAgegroupsAgeGroupIdData = {
    body?: never;
    path: {
        ageGroupId: string;
    };
    query?: {
        dryRun?: boolean;
    };
    url: '/group/agegroups/{ageGroupId}';
};

export type DeleteGroupAgegroupsAgeGroupIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteGroupAgegroupsAgeGroupIdError =
    DeleteGroupAgegroupsAgeGroupIdErrors[keyof DeleteGroupAgegroupsAgeGroupIdErrors];

export type DeleteGroupAgegroupsAgeGroupIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteGroupAgegroupsAgeGroupIdResponse =
    DeleteGroupAgegroupsAgeGroupIdResponses[keyof DeleteGroupAgegroupsAgeGroupIdResponses];

export type GetGroupAgegroupsAgeGroupIdData = {
    body?: never;
    path: {
        ageGroupId: string;
    };
    query?: never;
    url: '/group/agegroups/{ageGroupId}';
};

export type GetGroupAgegroupsAgeGroupIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupAgegroupsAgeGroupIdError =
    GetGroupAgegroupsAgeGroupIdErrors[keyof GetGroupAgegroupsAgeGroupIdErrors];

export type GetGroupAgegroupsAgeGroupIdResponses = {
    /**
     * OK
     */
    200: {
        data?: AgeGroup;
    };
};

export type GetGroupAgegroupsAgeGroupIdResponse =
    GetGroupAgegroupsAgeGroupIdResponses[keyof GetGroupAgegroupsAgeGroupIdResponses];

export type PutGroupAgegroupsAgeGroupIdData = {
    body?: AgeGroupUpdate;
    path: {
        ageGroupId: string;
    };
    query?: never;
    url: '/group/agegroups/{ageGroupId}';
};

export type PutGroupAgegroupsAgeGroupIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutGroupAgegroupsAgeGroupIdError =
    PutGroupAgegroupsAgeGroupIdErrors[keyof PutGroupAgegroupsAgeGroupIdErrors];

export type PutGroupAgegroupsAgeGroupIdResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PutGroupAgegroupsAgeGroupIdResponse =
    PutGroupAgegroupsAgeGroupIdResponses[keyof PutGroupAgegroupsAgeGroupIdResponses];

export type GetGroupGroupcategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/group/groupcategories';
};

export type GetGroupGroupcategoriesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupGroupcategoriesError = GetGroupGroupcategoriesErrors[keyof GetGroupGroupcategoriesErrors];

export type GetGroupGroupcategoriesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<GroupCategory>;
        meta?: MetaCount;
    };
};

export type GetGroupGroupcategoriesResponse = GetGroupGroupcategoriesResponses[keyof GetGroupGroupcategoriesResponses];

export type PostGroupGroupcategoriesData = {
    body?: GroupCategoryCreate;
    path?: never;
    query?: never;
    url: '/group/groupcategories';
};

export type PostGroupGroupcategoriesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostGroupGroupcategoriesError = PostGroupGroupcategoriesErrors[keyof PostGroupGroupcategoriesErrors];

export type PostGroupGroupcategoriesResponses = {
    /**
     * OK
     */
    201: {
        data?: GroupCategory;
    };
};

export type PostGroupGroupcategoriesResponse =
    PostGroupGroupcategoriesResponses[keyof PostGroupGroupcategoriesResponses];

export type DeleteGroupGroupcategoriesGroupCategoryIdData = {
    body?: never;
    path: {
        groupCategoryId: string;
    };
    query?: {
        dryRun?: boolean;
    };
    url: '/group/groupcategories/{groupCategoryId}';
};

export type DeleteGroupGroupcategoriesGroupCategoryIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteGroupGroupcategoriesGroupCategoryIdError =
    DeleteGroupGroupcategoriesGroupCategoryIdErrors[keyof DeleteGroupGroupcategoriesGroupCategoryIdErrors];

export type DeleteGroupGroupcategoriesGroupCategoryIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteGroupGroupcategoriesGroupCategoryIdResponse =
    DeleteGroupGroupcategoriesGroupCategoryIdResponses[keyof DeleteGroupGroupcategoriesGroupCategoryIdResponses];

export type GetGroupGroupcategoriesGroupCategoryIdData = {
    body?: never;
    path: {
        groupCategoryId: string;
    };
    query?: never;
    url: '/group/groupcategories/{groupCategoryId}';
};

export type GetGroupGroupcategoriesGroupCategoryIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupGroupcategoriesGroupCategoryIdError =
    GetGroupGroupcategoriesGroupCategoryIdErrors[keyof GetGroupGroupcategoriesGroupCategoryIdErrors];

export type GetGroupGroupcategoriesGroupCategoryIdResponses = {
    /**
     * OK
     */
    200: {
        data?: GroupCategory;
    };
};

export type GetGroupGroupcategoriesGroupCategoryIdResponse =
    GetGroupGroupcategoriesGroupCategoryIdResponses[keyof GetGroupGroupcategoriesGroupCategoryIdResponses];

export type PutGroupGroupcategoriesGroupCategoryIdData = {
    body?: GroupCategoryUpdate;
    path: {
        groupCategoryId: string;
    };
    query?: never;
    url: '/group/groupcategories/{groupCategoryId}';
};

export type PutGroupGroupcategoriesGroupCategoryIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutGroupGroupcategoriesGroupCategoryIdError =
    PutGroupGroupcategoriesGroupCategoryIdErrors[keyof PutGroupGroupcategoriesGroupCategoryIdErrors];

export type PutGroupGroupcategoriesGroupCategoryIdResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PutGroupGroupcategoriesGroupCategoryIdResponse =
    PutGroupGroupcategoriesGroupCategoryIdResponses[keyof PutGroupGroupcategoriesGroupCategoryIdResponses];

export type GetGroupGrouptypesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/group/grouptypes';
};

export type GetGroupGrouptypesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupGrouptypesError = GetGroupGrouptypesErrors[keyof GetGroupGrouptypesErrors];

export type GetGroupGrouptypesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<GroupType>;
        meta?: MetaCount;
    };
};

export type GetGroupGrouptypesResponse = GetGroupGrouptypesResponses[keyof GetGroupGrouptypesResponses];

export type PostGroupGrouptypesData = {
    body?: GroupTypeCreate;
    path?: never;
    query?: never;
    url: '/group/grouptypes';
};

export type PostGroupGrouptypesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostGroupGrouptypesError = PostGroupGrouptypesErrors[keyof PostGroupGrouptypesErrors];

export type PostGroupGrouptypesResponses = {
    /**
     * OK
     */
    201: {
        data?: GroupType;
    };
};

export type PostGroupGrouptypesResponse = PostGroupGrouptypesResponses[keyof PostGroupGrouptypesResponses];

export type DeleteGroupGrouptypesGroupTypeIdData = {
    body?: never;
    path: {
        groupTypeId: string;
    };
    query?: {
        dryRun?: boolean;
    };
    url: '/group/grouptypes/{groupTypeId}';
};

export type DeleteGroupGrouptypesGroupTypeIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteGroupGrouptypesGroupTypeIdError =
    DeleteGroupGrouptypesGroupTypeIdErrors[keyof DeleteGroupGrouptypesGroupTypeIdErrors];

export type DeleteGroupGrouptypesGroupTypeIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteGroupGrouptypesGroupTypeIdResponse =
    DeleteGroupGrouptypesGroupTypeIdResponses[keyof DeleteGroupGrouptypesGroupTypeIdResponses];

export type GetGroupGrouptypesGroupTypeIdData = {
    body?: never;
    path: {
        groupTypeId: string;
    };
    query?: never;
    url: '/group/grouptypes/{groupTypeId}';
};

export type GetGroupGrouptypesGroupTypeIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupGrouptypesGroupTypeIdError =
    GetGroupGrouptypesGroupTypeIdErrors[keyof GetGroupGrouptypesGroupTypeIdErrors];

export type GetGroupGrouptypesGroupTypeIdResponses = {
    /**
     * OK
     */
    200: {
        data?: GroupType;
    };
};

export type GetGroupGrouptypesGroupTypeIdResponse =
    GetGroupGrouptypesGroupTypeIdResponses[keyof GetGroupGrouptypesGroupTypeIdResponses];

export type PutGroupGrouptypesGroupTypeIdData = {
    body?: GroupTypeUpdate;
    path: {
        groupTypeId: string;
    };
    query?: never;
    url: '/group/grouptypes/{groupTypeId}';
};

export type PutGroupGrouptypesGroupTypeIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutGroupGrouptypesGroupTypeIdError =
    PutGroupGrouptypesGroupTypeIdErrors[keyof PutGroupGrouptypesGroupTypeIdErrors];

export type PutGroupGrouptypesGroupTypeIdResponses = {
    /**
     * OK
     */
    200: {
        data?: GroupType;
    };
};

export type PutGroupGrouptypesGroupTypeIdResponse =
    PutGroupGrouptypesGroupTypeIdResponses[keyof PutGroupGrouptypesGroupTypeIdResponses];

export type GetGroupMeetingtemplatesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/group/meetingtemplates';
};

export type GetGroupMeetingtemplatesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupMeetingtemplatesError = GetGroupMeetingtemplatesErrors[keyof GetGroupMeetingtemplatesErrors];

export type GetGroupMeetingtemplatesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<MeetingTemplate>;
        meta?: MetaCount;
    };
};

export type GetGroupMeetingtemplatesResponse =
    GetGroupMeetingtemplatesResponses[keyof GetGroupMeetingtemplatesResponses];

export type PostGroupMeetingtemplatesData = {
    body?: MeetingTemplateCreate;
    path?: never;
    query?: never;
    url: '/group/meetingtemplates';
};

export type PostGroupMeetingtemplatesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostGroupMeetingtemplatesError = PostGroupMeetingtemplatesErrors[keyof PostGroupMeetingtemplatesErrors];

export type PostGroupMeetingtemplatesResponses = {
    /**
     * OK
     */
    201: {
        data?: MeetingTemplate;
    };
};

export type PostGroupMeetingtemplatesResponse =
    PostGroupMeetingtemplatesResponses[keyof PostGroupMeetingtemplatesResponses];

export type DeleteGroupMeetingtemplatesMeetingTemplateIdData = {
    body?: never;
    path: {
        meetingTemplateId: string;
    };
    query?: {
        dryRun?: boolean;
    };
    url: '/group/meetingtemplates/{meetingTemplateId}';
};

export type DeleteGroupMeetingtemplatesMeetingTemplateIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteGroupMeetingtemplatesMeetingTemplateIdError =
    DeleteGroupMeetingtemplatesMeetingTemplateIdErrors[keyof DeleteGroupMeetingtemplatesMeetingTemplateIdErrors];

export type DeleteGroupMeetingtemplatesMeetingTemplateIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteGroupMeetingtemplatesMeetingTemplateIdResponse =
    DeleteGroupMeetingtemplatesMeetingTemplateIdResponses[keyof DeleteGroupMeetingtemplatesMeetingTemplateIdResponses];

export type GetGroupMeetingtemplatesMeetingTemplateIdData = {
    body?: never;
    path: {
        meetingTemplateId: string;
    };
    query?: never;
    url: '/group/meetingtemplates/{meetingTemplateId}';
};

export type GetGroupMeetingtemplatesMeetingTemplateIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupMeetingtemplatesMeetingTemplateIdError =
    GetGroupMeetingtemplatesMeetingTemplateIdErrors[keyof GetGroupMeetingtemplatesMeetingTemplateIdErrors];

export type GetGroupMeetingtemplatesMeetingTemplateIdResponses = {
    /**
     * OK
     */
    200: MeetingTemplate;
};

export type GetGroupMeetingtemplatesMeetingTemplateIdResponse =
    GetGroupMeetingtemplatesMeetingTemplateIdResponses[keyof GetGroupMeetingtemplatesMeetingTemplateIdResponses];

export type PutGroupMeetingtemplatesMeetingTemplateIdData = {
    body?: MeetingTemplateUpdate;
    path: {
        meetingTemplateId: string;
    };
    query?: never;
    url: '/group/meetingtemplates/{meetingTemplateId}';
};

export type PutGroupMeetingtemplatesMeetingTemplateIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutGroupMeetingtemplatesMeetingTemplateIdError =
    PutGroupMeetingtemplatesMeetingTemplateIdErrors[keyof PutGroupMeetingtemplatesMeetingTemplateIdErrors];

export type PutGroupMeetingtemplatesMeetingTemplateIdResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PutGroupMeetingtemplatesMeetingTemplateIdResponse =
    PutGroupMeetingtemplatesMeetingTemplateIdResponses[keyof PutGroupMeetingtemplatesMeetingTemplateIdResponses];

export type GetGroupMemberstatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/group/memberstatus';
};

export type GetGroupMemberstatusErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupMemberstatusError = GetGroupMemberstatusErrors[keyof GetGroupMemberstatusErrors];

export type GetGroupMemberstatusResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<{
            id?: MemberStatus;
            name?: string;
        }>;
    };
};

export type GetGroupMemberstatusResponse = GetGroupMemberstatusResponses[keyof GetGroupMemberstatusResponses];

export type GetGroupRolesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The format of the response. Default is `standard`.
         */
        responseFormat?: 'standard' | 'domainObject';
    };
    url: '/group/roles';
};

export type GetGroupRolesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupRolesError = GetGroupRolesErrors[keyof GetGroupRolesErrors];

export type GetGroupRolesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Role>;
        meta?: MetaCount;
    };
};

export type GetGroupRolesResponse = GetGroupRolesResponses[keyof GetGroupRolesResponses];

export type PostGroupRolesData = {
    body?: RoleCreate;
    path?: never;
    query?: never;
    url: '/group/roles';
};

export type PostGroupRolesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostGroupRolesError = PostGroupRolesErrors[keyof PostGroupRolesErrors];

export type PostGroupRolesResponses = {
    /**
     * OK
     */
    201: {
        data?: Role;
    };
};

export type PostGroupRolesResponse = PostGroupRolesResponses[keyof PostGroupRolesResponses];

export type DeleteGroupRolesRoleIdData = {
    body?: never;
    path: {
        roleId: string;
    };
    query?: {
        dryRun?: boolean;
    };
    url: '/group/roles/{roleId}';
};

export type DeleteGroupRolesRoleIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteGroupRolesRoleIdError = DeleteGroupRolesRoleIdErrors[keyof DeleteGroupRolesRoleIdErrors];

export type DeleteGroupRolesRoleIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteGroupRolesRoleIdResponse = DeleteGroupRolesRoleIdResponses[keyof DeleteGroupRolesRoleIdResponses];

export type GetGroupRolesRoleIdData = {
    body?: never;
    path: {
        roleId: string;
    };
    query?: never;
    url: '/group/roles/{roleId}';
};

export type GetGroupRolesRoleIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupRolesRoleIdError = GetGroupRolesRoleIdErrors[keyof GetGroupRolesRoleIdErrors];

export type GetGroupRolesRoleIdResponses = {
    /**
     * OK
     */
    200: Role;
};

export type GetGroupRolesRoleIdResponse = GetGroupRolesRoleIdResponses[keyof GetGroupRolesRoleIdResponses];

export type PutGroupRolesRoleIdData = {
    body?: RoleUpdate;
    path: {
        roleId: string;
    };
    query?: never;
    url: '/group/roles/{roleId}';
};

export type PutGroupRolesRoleIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutGroupRolesRoleIdError = PutGroupRolesRoleIdErrors[keyof PutGroupRolesRoleIdErrors];

export type PutGroupRolesRoleIdResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PutGroupRolesRoleIdResponse = PutGroupRolesRoleIdResponses[keyof PutGroupRolesRoleIdResponses];

export type GetGroupTargetgroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/group/targetgroups';
};

export type GetGroupTargetgroupsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupTargetgroupsError = GetGroupTargetgroupsErrors[keyof GetGroupTargetgroupsErrors];

export type GetGroupTargetgroupsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<TargetGroup>;
        meta?: MetaCount;
    };
};

export type GetGroupTargetgroupsResponse = GetGroupTargetgroupsResponses[keyof GetGroupTargetgroupsResponses];

export type PostGroupTargetgroupsData = {
    body?: TargetGroupCreate;
    path?: never;
    query?: never;
    url: '/group/targetgroups';
};

export type PostGroupTargetgroupsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostGroupTargetgroupsError = PostGroupTargetgroupsErrors[keyof PostGroupTargetgroupsErrors];

export type PostGroupTargetgroupsResponses = {
    /**
     * Created
     */
    201: {
        data?: TargetGroup;
    };
};

export type PostGroupTargetgroupsResponse = PostGroupTargetgroupsResponses[keyof PostGroupTargetgroupsResponses];

export type DeleteGroupTargetgroupsTargetGroupIdData = {
    body?: never;
    path: {
        targetGroupId: string;
    };
    query?: {
        dryRun?: boolean;
    };
    url: '/group/targetgroups/{targetGroupId}';
};

export type DeleteGroupTargetgroupsTargetGroupIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteGroupTargetgroupsTargetGroupIdError =
    DeleteGroupTargetgroupsTargetGroupIdErrors[keyof DeleteGroupTargetgroupsTargetGroupIdErrors];

export type DeleteGroupTargetgroupsTargetGroupIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteGroupTargetgroupsTargetGroupIdResponse =
    DeleteGroupTargetgroupsTargetGroupIdResponses[keyof DeleteGroupTargetgroupsTargetGroupIdResponses];

export type GetGroupTargetgroupsTargetGroupIdData = {
    body?: never;
    path: {
        targetGroupId: string;
    };
    query?: never;
    url: '/group/targetgroups/{targetGroupId}';
};

export type GetGroupTargetgroupsTargetGroupIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupTargetgroupsTargetGroupIdError =
    GetGroupTargetgroupsTargetGroupIdErrors[keyof GetGroupTargetgroupsTargetGroupIdErrors];

export type GetGroupTargetgroupsTargetGroupIdResponses = {
    /**
     * OK
     */
    200: {
        data?: TargetGroup;
    };
};

export type GetGroupTargetgroupsTargetGroupIdResponse =
    GetGroupTargetgroupsTargetGroupIdResponses[keyof GetGroupTargetgroupsTargetGroupIdResponses];

export type PutGroupTargetgroupsTargetGroupIdData = {
    body?: never;
    path: {
        targetGroupId: string;
    };
    query?: never;
    url: '/group/targetgroups/{targetGroupId}';
};

export type PutGroupTargetgroupsTargetGroupIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutGroupTargetgroupsTargetGroupIdError =
    PutGroupTargetgroupsTargetGroupIdErrors[keyof PutGroupTargetgroupsTargetGroupIdErrors];

export type PutGroupTargetgroupsTargetGroupIdResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PutGroupTargetgroupsTargetGroupIdResponse =
    PutGroupTargetgroupsTargetGroupIdResponses[keyof PutGroupTargetgroupsTargetGroupIdResponses];

export type GetGroupHomepagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/grouphomepages';
};

export type GetGroupHomepagesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<DomainObjectGrouphomepage>;
        meta?: MetaCount;
    };
};

export type GetGroupHomepagesResponse = GetGroupHomepagesResponses[keyof GetGroupHomepagesResponses];

export type GetGroupHomepageData = {
    body?: never;
    path: {
        /**
         * Random hash for public groups
         */
        hash: string;
    };
    query?: never;
    url: '/grouphomepages/{hash}';
};

export type GetGroupHomepageErrors = {
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetGroupHomepageResponses = {
    /**
     * Public group with settings
     */
    200: {
        data: GroupHomepage;
    };
};

export type GetGroupHomepageResponse = GetGroupHomepageResponses[keyof GetGroupHomepageResponses];

export type GetGroupsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of results per page.
         */
        limit?: number;
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Array of group ids
         */
        'ids[]'?: Array<number>;
        /**
         * Array of campus ids to filter the groups
         */
        'campus_ids[]'?: Array<number>;
        /**
         * Array of age group ids to filter the groups
         */
        'agegroup_ids[]'?: Array<number>;
        /**
         * Array of group status ids to filter the groups
         */
        'group_status_ids[]'?: Array<number>;
        /**
         * Array of group category ids to filter the groups
         */
        'group_category_ids[]'?: Array<number>;
        /**
         * Array of target group ids to filter the groups
         */
        'target_group_ids[]'?: Array<number>;
        /**
         * Array of weekdays to filter the groups. Sunday = 0, Monday = 1 ...
         */
        'weekdays[]'?: Array<number>;
        /**
         * Array of group type ids to filter the groups
         */
        'group_type_ids[]'?: Array<number>;
        /**
         * Array of group tag ids to filter the groups
         */
        'tag_ids[]'?: Array<number>;
        /**
         * Filters groups by its open status
         */
        is_open_for_members?: boolean;
        /**
         * Determines if groups should be omitted where I am in
         */
        without_my_groups?: boolean;
        /**
         * Determines if only groups where I am in should be returned
         */
        only_my_groups?: boolean;
        /**
         * Only show groups with meeting place
         */
        has_meeting_place?: boolean;
        /**
         * Only show groups where posting is allowed
         */
        allow_posts?: boolean;
        /**
         * Only show groups which has posts
         */
        has_posts?: boolean;
        query?: string;
        /**
         * Group visibility
         */
        visibility?: 'hidden' | 'public' | 'restricted' | 'intern';
        /**
         * The fields to order by
         */
        order_fields?: Array<string>;
        /**
         * The order direction ASC or DESC for the order_fields
         */
        order_directions?: Array<'ASC' | 'DESC'>;
        /**
         * Include additional information (currently, 'roles' are included by default but this behaviour is now deprecated)
         */
        'include[]'?: Array<
            | 'hasPermissions'
            | 'roles'
            | 'tags'
            | 'memberStatistics'
            | 'places'
            | 'publicPostsStatistic'
            | 'signupConditions'
        >;
    };
    url: '/groups';
};

export type GetGroupsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupsError = GetGroupsErrors[keyof GetGroupsErrors];

export type GetGroupsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<Group>;
        meta: MetaPagination;
    };
};

export type GetGroupsResponse = GetGroupsResponses[keyof GetGroupsResponses];

export type PostGroupsData = {
    body?: {
        /**
         * Campus Id if group is connected to a campus
         */
        campusId?: number;
        /**
         * Need to be true, if another group with that name already exists
         */
        force?: boolean;
        /**
         * ID of group category
         */
        groupCategoryId?: number;
        /**
         * ID of group status
         */
        groupStatusId: number;
        /**
         * Id of group type
         */
        groupTypeId: number;
        /**
         * Group name
         */
        name: string;
        /**
         * Group ID of parent group
         */
        parentGroupId?: number;
        /**
         * put yourself in this role
         */
        roleId?: number;
        visibility?: GroupVisibility;
    };
    path?: never;
    query?: never;
    url: '/groups';
};

export type PostGroupsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostGroupsError = PostGroupsErrors[keyof PostGroupsErrors];

export type PostGroupsResponses = {
    /**
     * Created
     */
    201: {
        data?: Group;
    };
};

export type PostGroupsResponse = PostGroupsResponses[keyof PostGroupsResponses];

export type PostGroupsExportData = {
    body?: Array<{
        ids: Array<number>;
    }>;
    path?: never;
    query?: {
        type?: 'csv' | 'xlsx';
    };
    url: '/groups/export';
};

export type PostGroupsExportErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostGroupsExportError = PostGroupsExportErrors[keyof PostGroupsExportErrors];

export type PostGroupsExportResponses = {
    /**
     * OK
     */
    200: string;
};

export type PostGroupsExportResponse = PostGroupsExportResponses[keyof PostGroupsExportResponses];

export type GetGroupsGroupedData = {
    body?: never;
    path?: never;
    query?: {
        group_by?:
            | 'campus'
            | 'ageGroup'
            | 'groupStatus'
            | 'groupCategory'
            | 'targetGroup'
            | 'groupType'
            | 'visibility'
            | 'isOpenForMembers';
        /**
         * Number of results per page.
         */
        limit?: number;
    };
    url: '/groups/grouped';
};

export type GetGroupsGroupedErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupsGroupedError = GetGroupsGroupedErrors[keyof GetGroupsGroupedErrors];

export type GetGroupsGroupedResponses = {
    /**
     * OK
     */
    200: {
        data?: GroupedGroups;
    };
};

export type GetGroupsGroupedResponse = GetGroupsGroupedResponses[keyof GetGroupsGroupedResponses];

export type GetGroupsHierarchiesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of results per page.
         */
        limit?: number;
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Array of group ids
         */
        'ids[]'?: Array<number>;
        /**
         * Array of campus ids to filter the groups
         */
        'campus_ids[]'?: Array<number>;
        /**
         * Array of age group ids to filter the groups
         */
        'agegroup_ids[]'?: Array<number>;
        /**
         * Array of group status ids to filter the groups
         */
        'group_status_ids[]'?: Array<number>;
        /**
         * Array of group category ids to filter the groups
         */
        'group_category_ids[]'?: Array<number>;
        /**
         * Array of target group ids to filter the groups
         */
        'target_group_ids[]'?: Array<number>;
        /**
         * Array of weekdays to filter the groups. Sunday = 0, Monday = 1 ...
         */
        'weekdays[]'?: Array<number>;
        /**
         * Array of group type ids to filter the groups
         */
        'group_type_ids[]'?: Array<number>;
        /**
         * Array of group tag ids to filter the groups
         */
        'tag_ids[]'?: Array<number>;
        /**
         * Filters groups by its open status
         */
        is_open_for_members?: boolean;
        /**
         * Determines if groups should be omitted where I am in
         */
        without_my_groups?: boolean;
        /**
         * Determines if only groups where I am in should be returned
         */
        only_my_groups?: boolean;
        /**
         * Only show groups with meeting place
         */
        has_meeting_place?: boolean;
        /**
         * Only show groups where posting is allowed
         */
        allow_posts?: boolean;
        /**
         * Only show groups which has posts
         */
        has_posts?: boolean;
        query?: string;
        /**
         * Group visibility
         */
        visibility?: 'hidden' | 'public' | 'restricted' | 'intern';
    };
    url: '/groups/hierarchies';
};

export type GetGroupsHierarchiesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupsHierarchiesError = GetGroupsHierarchiesErrors[keyof GetGroupsHierarchiesErrors];

export type GetGroupsHierarchiesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<GroupHierarchy>;
    };
};

export type GetGroupsHierarchiesResponse = GetGroupsHierarchiesResponses[keyof GetGroupsHierarchiesResponses];

export type GetGroupsIdsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of results per page.
         */
        limit?: number;
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Array of group ids
         */
        'ids[]'?: Array<number>;
        /**
         * Array of campus ids to filter the groups
         */
        'campus_ids[]'?: Array<number>;
        /**
         * Array of age group ids to filter the groups
         */
        'agegroup_ids[]'?: Array<number>;
        /**
         * Array of group status ids to filter the groups
         */
        'group_status_ids[]'?: Array<number>;
        /**
         * Array of group category ids to filter the groups
         */
        'group_category_ids[]'?: Array<number>;
        /**
         * Array of target group ids to filter the groups
         */
        'target_group_ids[]'?: Array<number>;
        /**
         * Array of weekdays to filter the groups. Sunday = 0, Monday = 1 ...
         */
        'weekdays[]'?: Array<number>;
        /**
         * Array of group type ids to filter the groups
         */
        'group_type_ids[]'?: Array<number>;
        /**
         * Array of group tag ids to filter the groups
         */
        'tag_ids[]'?: Array<number>;
        /**
         * Filters groups by its open status
         */
        is_open_for_members?: boolean;
        /**
         * Determines if groups should be omitted where I am in
         */
        without_my_groups?: boolean;
        /**
         * Determines if only groups where I am in should be returned
         */
        only_my_groups?: boolean;
        /**
         * Only show groups with meeting place
         */
        has_meeting_place?: boolean;
        /**
         * Only show groups where posting is allowed
         */
        allow_posts?: boolean;
        /**
         * Only show groups which has posts
         */
        has_posts?: boolean;
        query?: string;
        /**
         * Group visibility
         */
        visibility?: 'hidden' | 'public' | 'restricted' | 'intern';
    };
    url: '/groups/ids';
};

export type GetGroupsIdsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupsIdsError = GetGroupsIdsErrors[keyof GetGroupsIdsErrors];

export type GetGroupsIdsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<number>;
    };
};

export type GetGroupsIdsResponse = GetGroupsIdsResponses[keyof GetGroupsIdsResponses];

export type GetGroupsMembersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Array of group ids
         */
        'ids[]'?: Array<number>;
        /**
         * If true, return also deleted group members
         */
        with_deleted?: boolean;
    };
    url: '/groups/members';
};

export type GetGroupsMembersErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupsMembersError = GetGroupsMembersErrors[keyof GetGroupsMembersErrors];

export type GetGroupsMembersResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<GroupMemberShort>;
    };
};

export type GetGroupsMembersResponse = GetGroupsMembersResponses[keyof GetGroupsMembersResponses];

export type DeleteGroupsGroupIdData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: {
        /**
         * If set to true, the deletion is simulated but nothing will be deleted.
         */
        dry_run?: boolean;
    };
    url: '/groups/{groupId}';
};

export type DeleteGroupsGroupIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteGroupsGroupIdError = DeleteGroupsGroupIdErrors[keyof DeleteGroupsGroupIdErrors];

export type DeleteGroupsGroupIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteGroupsGroupIdResponse = DeleteGroupsGroupIdResponses[keyof DeleteGroupsGroupIdResponses];

export type GetGroupsGroupIdData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: {
        /**
         * Include additional information (currently, 'roles' are included by default but this behaviour is now deprecated)
         */
        'include[]'?: Array<
            | 'hasPermissions'
            | 'roles'
            | 'tags'
            | 'memberStatistics'
            | 'places'
            | 'publicPostsStatistic'
            | 'signupConditions'
        >;
    };
    url: '/groups/{groupId}';
};

export type GetGroupsGroupIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupsGroupIdError = GetGroupsGroupIdErrors[keyof GetGroupsGroupIdErrors];

export type GetGroupsGroupIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Group;
    };
};

export type GetGroupsGroupIdResponse = GetGroupsGroupIdResponses[keyof GetGroupsGroupIdResponses];

export type PatchGroupData = {
    body?: {
        groupTypeId?: number;
    };
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: {
        /**
         * Decides in case of changing the visibility of posts in the group whether the current users posts should be skipped. Default: false
         */
        skip_my_posts_reducing_visibility?: boolean;
    };
    url: '/groups/{groupId}';
};

export type PatchGroupErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PatchGroupError = PatchGroupErrors[keyof PatchGroupErrors];

export type PatchGroupResponses = {
    /**
     * OK
     */
    200: {
        data?: Group;
    };
};

export type PatchGroupResponse = PatchGroupResponses[keyof PatchGroupResponses];

export type GetGroupsAbsencesData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: {
        /**
         * Return entities starting from this date.
         */
        from?: DateString;
        /**
         * Return entities up to this date.
         */
        to?: DateString;
        order_direction?: 'ASC' | 'DESC';
    };
    url: '/groups/{groupId}/absences';
};

export type GetGroupsAbsencesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupsAbsencesError = GetGroupsAbsencesErrors[keyof GetGroupsAbsencesErrors];

export type GetGroupsAbsencesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Absence>;
        meta?: MetaCount;
    };
};

export type GetGroupsAbsencesResponse = GetGroupsAbsencesResponses[keyof GetGroupsAbsencesResponses];

export type StartStopGroupChatData = {
    body: StartStopChat;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/chat';
};

export type StartStopGroupChatErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type StartStopGroupChatError = StartStopGroupChatErrors[keyof StartStopGroupChatErrors];

export type StartStopGroupChatResponses = {
    /**
     * No Content
     */
    204: void;
};

export type StartStopGroupChatResponse = StartStopGroupChatResponses[keyof StartStopGroupChatResponses];

export type CheckinData = {
    body: {
        /**
         * date and time of the group meeting in UTC / Zulu format
         */
        date: string;
        /**
         * optional printer ID, if a name tag should be printed out
         */
        printerId?: number;
        /**
         * optional token of a ticket that is to be validated
         */
        token?: string;
    };
    path: {
        /**
         * ID of group
         */
        groupId: number;
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/groups/{groupId}/checkin/{personId}';
};

export type CheckinErrors = {
    /**
     * Bad request.
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: {
        error?: string;
    };
};

export type CheckinError = CheckinErrors[keyof CheckinErrors];

export type CheckinResponses = {
    /**
     * Successfully checked in
     */
    200: {
        data?: Checkin;
    };
};

export type CheckinResponse = CheckinResponses[keyof CheckinResponses];

export type GetGroupsGroupIdChildrenData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: {
        /**
         * Number of results per page.
         */
        limit?: number;
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Array of group ids
         */
        'ids[]'?: Array<number>;
        /**
         * Array of campus ids to filter the groups
         */
        'campus_ids[]'?: Array<number>;
        /**
         * Array of age group ids to filter the groups
         */
        'agegroup_ids[]'?: Array<number>;
        /**
         * Array of group status ids to filter the groups
         */
        'group_status_ids[]'?: Array<number>;
        /**
         * Array of group category ids to filter the groups
         */
        'group_category_ids[]'?: Array<number>;
        /**
         * Array of target group ids to filter the groups
         */
        'target_group_ids[]'?: Array<number>;
        /**
         * Array of weekdays to filter the groups. Sunday = 0, Monday = 1 ...
         */
        'weekdays[]'?: Array<number>;
        /**
         * Array of group type ids to filter the groups
         */
        'group_type_ids[]'?: Array<number>;
        /**
         * Array of group tag ids to filter the groups
         */
        'tag_ids[]'?: Array<number>;
        /**
         * Filters groups by its open status
         */
        is_open_for_members?: boolean;
        /**
         * Determines if groups should be omitted where I am in
         */
        without_my_groups?: boolean;
        /**
         * Determines if only groups where I am in should be returned
         */
        only_my_groups?: boolean;
        /**
         * Only show groups with meeting place
         */
        has_meeting_place?: boolean;
        /**
         * Only show groups where posting is allowed
         */
        allow_posts?: boolean;
        /**
         * Only show groups which has posts
         */
        has_posts?: boolean;
        query?: string;
        /**
         * Group visibility
         */
        visibility?: 'hidden' | 'public' | 'restricted' | 'intern';
    };
    url: '/groups/{groupId}/children';
};

export type GetGroupsGroupIdChildrenErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupsGroupIdChildrenError = GetGroupsGroupIdChildrenErrors[keyof GetGroupsGroupIdChildrenErrors];

export type GetGroupsGroupIdChildrenResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<DomainObjectGroup>;
        meta?: {
            count?: number;
            groupStatusIds?: {
                [key: string]: {
                    count?: number;
                    key?: string;
                };
            };
        };
    };
};

export type GetGroupsGroupIdChildrenResponse =
    GetGroupsGroupIdChildrenResponses[keyof GetGroupsGroupIdChildrenResponses];

export type GetGroupsGroupIdDocumentsDocumentIdData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        documentId: string;
    };
    query?: never;
    url: '/groups/{groupId}/documents/{documentId}';
};

export type GetGroupsGroupIdDocumentsDocumentIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupsGroupIdDocumentsDocumentIdError =
    GetGroupsGroupIdDocumentsDocumentIdErrors[keyof GetGroupsGroupIdDocumentsDocumentIdErrors];

export type GetGroupsGroupIdDocumenttemplatesData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/documenttemplates';
};

export type GetGroupsGroupIdDocumenttemplatesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupsGroupIdDocumenttemplatesError =
    GetGroupsGroupIdDocumenttemplatesErrors[keyof GetGroupsGroupIdDocumenttemplatesErrors];

export type GetGroupsGroupIdDocumenttemplatesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<HtmlTemplateInfo>;
        meta?: MetaCount;
    };
};

export type GetGroupsGroupIdDocumenttemplatesResponse =
    GetGroupsGroupIdDocumenttemplatesResponses[keyof GetGroupsGroupIdDocumenttemplatesResponses];

export type DuplicateGroupData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query: {
        newName: string;
        copyMembers?: boolean;
        copyPermissions?: boolean;
        copyAutomaticEmails?: boolean;
    };
    url: '/groups/{groupId}/duplicate';
};

export type DuplicateGroupResponses = {
    /**
     * Created
     */
    201: {
        data?: Group;
    };
};

export type DuplicateGroupResponse = DuplicateGroupResponses[keyof DuplicateGroupResponses];

export type GetAutomaticEmailsData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/emails';
};

export type GetAutomaticEmailsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetAutomaticEmailsResponses = {
    200: {
        data: Array<AutomaticEmail>;
        meta: MetaCount;
    };
};

export type GetAutomaticEmailsResponse = GetAutomaticEmailsResponses[keyof GetAutomaticEmailsResponses];

export type PostAutomaticEmailData = {
    body?: {
        body: string;
        isActive: boolean;
        /**
         * Only releveant for roleId = requester roles
         */
        isForWaitinglist: boolean;
        /**
         * Grouptype Role Id; Must be a role of the group
         */
        roleId: number;
        /**
         * PersonId; Must be a leader in that group
         */
        senderId: number | null;
        subject: string;
    };
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/emails';
};

export type PostAutomaticEmailErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type PostAutomaticEmailResponses = {
    /**
     * Created
     */
    201: {
        data?: AutomaticEmail;
    };
};

export type PostAutomaticEmailResponse = PostAutomaticEmailResponses[keyof PostAutomaticEmailResponses];

export type DeleteAutomaticEmailData = {
    body?: never;
    path: {
        /**
         * ID or chat GUID of group
         */
        groupId: number;
        emailId: string;
    };
    query?: never;
    url: '/groups/{groupId}/emails/{emailId}';
};

export type DeleteAutomaticEmailErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type DeleteAutomaticEmailResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteAutomaticEmailResponse = DeleteAutomaticEmailResponses[keyof DeleteAutomaticEmailResponses];

export type GetAutomaticEmailData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        emailId: string;
    };
    query?: never;
    url: '/groups/{groupId}/emails/{emailId}';
};

export type GetAutomaticEmailErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetAutomaticEmailResponses = {
    200: {
        data: AutomaticEmail;
    };
};

export type GetAutomaticEmailResponse = GetAutomaticEmailResponses[keyof GetAutomaticEmailResponses];

export type PutAutomaticEmailData = {
    body?: {
        body: string;
        isActive: boolean;
        /**
         * SenderID = PersonID of one leader in that group
         */
        senderId: number | null;
        subject: string;
    };
    path: {
        /**
         * ID of group
         */
        groupId: number;
        emailId: string;
    };
    query?: never;
    url: '/groups/{groupId}/emails/{emailId}';
};

export type PutAutomaticEmailErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type PutAutomaticEmailResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetGroupsGroupIdFollowupsData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: {
        /**
         * Filter for follow-ups.
         */
        filter?: Array<FollowUpFilter>;
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Number of results per page.
         */
        limit?: number;
    };
    url: '/groups/{groupId}/followups';
};

export type GetGroupsGroupIdFollowupsErrors = {
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupsGroupIdFollowupsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<FollowUp2>;
    };
};

export type GetGroupsGroupIdFollowupsResponse =
    GetGroupsGroupIdFollowupsResponses[keyof GetGroupsGroupIdFollowupsResponses];

export type GetGroupsGroupIdFollowupsStatisticsData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/followups/statistics';
};

export type GetGroupsGroupIdFollowupsStatisticsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupsGroupIdFollowupsStatisticsError =
    GetGroupsGroupIdFollowupsStatisticsErrors[keyof GetGroupsGroupIdFollowupsStatisticsErrors];

export type GetGroupsGroupIdFollowupsStatisticsResponses = {
    /**
     * OK
     */
    200: {
        data: FollowUpStatistics;
    };
};

export type GetGroupsGroupIdFollowupsStatisticsResponse =
    GetGroupsGroupIdFollowupsStatisticsResponses[keyof GetGroupsGroupIdFollowupsStatisticsResponses];

export type DeleteGroupsGroupIdGrouphomepageData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/grouphomepage';
};

export type DeleteGroupsGroupIdGrouphomepageResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteGroupsGroupIdGrouphomepageResponse =
    DeleteGroupsGroupIdGrouphomepageResponses[keyof DeleteGroupsGroupIdGrouphomepageResponses];

export type GetGroupsGroupIdGrouphomepageData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/grouphomepage';
};

export type GetGroupsGroupIdGrouphomepageErrors = {
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupsGroupIdGrouphomepageResponses = {
    /**
     * OK
     */
    200: {
        data: GroupHomepage;
    };
};

export type GetGroupsGroupIdGrouphomepageResponse =
    GetGroupsGroupIdGrouphomepageResponses[keyof GetGroupsGroupIdGrouphomepageResponses];

export type PutGroupsGroupIdGrouphomepageData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/grouphomepage';
};

export type PutGroupsGroupIdGrouphomepageResponses = {
    /**
     * OK
     */
    200: {
        data: GroupHomepage;
    };
};

export type PutGroupsGroupIdGrouphomepageResponse =
    PutGroupsGroupIdGrouphomepageResponses[keyof PutGroupsGroupIdGrouphomepageResponses];

export type PostGroupsGroupIdGroupstatusData = {
    body?: {
        groupTypeId?: number;
        roleMapping?: {
            [key: string]: unknown;
        };
    };
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/grouptype';
};

export type PostGroupsGroupIdGroupstatusResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetAllMeetingsData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: {
        /**
         * Whether to show canceled group meetings
         */
        is_canceled?: boolean;
        /**
         * Whether to show done group meetings
         */
        is_completed?: boolean;
        direction?: 'forward' | 'backward';
        /**
         * Return entities starting from this date.
         */
        from?: DateString;
        /**
         * Return entities up to this date.
         */
        to?: DateString;
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Number of results per page.
         */
        limit?: number;
        /**
         * Include additional information
         */
        include?: Array<'attendances'>;
    };
    url: '/groups/{groupId}/meetings';
};

export type GetAllMeetingsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllMeetingsError = GetAllMeetingsErrors[keyof GetAllMeetingsErrors];

export type GetAllMeetingsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<GroupMeeting>;
        meta: MetaPagination & {
            statistics: GroupMeetingsStatistics;
        };
    };
};

export type GetAllMeetingsResponse = GetAllMeetingsResponses[keyof GetAllMeetingsResponses];

export type CreateMeetingData = {
    body: {
        /**
         * End of the group meeting in UTC / Zulu format
         */
        endDate?: string;
        /**
         * Start of the group meeting in UTC / Zulu format
         */
        startDate?: string;
    };
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/meetings';
};

export type CreateMeetingErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type CreateMeetingError = CreateMeetingErrors[keyof CreateMeetingErrors];

export type CreateMeetingResponses = {
    /**
     * Successfully created
     */
    201: {
        data?: GroupMeeting;
    };
};

export type CreateMeetingResponse = CreateMeetingResponses[keyof CreateMeetingResponses];

export type GetGroupsGroupIdMeetingsExportData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: {
        format?: 'csv' | 'xlsx';
        type?: 'meetings_members' | 'meetings_overview';
        /**
         * Whether to include canceled group meetings
         */
        is_canceled?: boolean;
        /**
         * Whether to include completed group meetings
         */
        is_completed?: boolean;
        /**
         * Return entities starting from this date.
         */
        from?: DateString;
        /**
         * Return entities up to this date.
         */
        to?: DateString;
        /**
         * The direction of the result set
         */
        direction?: 'forward' | 'backward';
        /**
         * Number of results per page.
         */
        limit?: number;
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
    };
    url: '/groups/{groupId}/meetings/export';
};

export type GetGroupsGroupIdMeetingsExportErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupsGroupIdMeetingsExportError =
    GetGroupsGroupIdMeetingsExportErrors[keyof GetGroupsGroupIdMeetingsExportErrors];

export type GetGroupsGroupIdMeetingsExportResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetGroupsGroupIdMeetingsExportResponse =
    GetGroupsGroupIdMeetingsExportResponses[keyof GetGroupsGroupIdMeetingsExportResponses];

export type DeleteGroupsGroupIdMeetingsMeetingIdData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        meetingId: string;
    };
    query?: never;
    url: '/groups/{groupId}/meetings/{meetingId}';
};

export type DeleteGroupsGroupIdMeetingsMeetingIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteGroupsGroupIdMeetingsMeetingIdResponse =
    DeleteGroupsGroupIdMeetingsMeetingIdResponses[keyof DeleteGroupsGroupIdMeetingsMeetingIdResponses];

export type GetGroupsGroupIdMeetingsMeetingIdData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        meetingId: string;
    };
    query?: never;
    url: '/groups/{groupId}/meetings/{meetingId}';
};

export type GetGroupsGroupIdMeetingsMeetingIdResponses = {
    /**
     * OK
     */
    200: {
        data?: GroupMeeting;
    };
};

export type GetGroupsGroupIdMeetingsMeetingIdResponse =
    GetGroupsGroupIdMeetingsMeetingIdResponses[keyof GetGroupsGroupIdMeetingsMeetingIdResponses];

export type PutGroupsGroupIdMeetingsMeetingIdData = {
    body?: {
        comment?: string | null;
        endDate?: string;
        isCanceled?: boolean;
        isCompleted?: boolean;
        numGuests?: number | null;
        pollResult?: string | null;
        startDate?: string;
    };
    path: {
        /**
         * ID of group
         */
        groupId: number;
        meetingId: string;
    };
    query?: never;
    url: '/groups/{groupId}/meetings/{meetingId}';
};

export type PutGroupsGroupIdMeetingsMeetingIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetGroupsGroupIdMeetingsMeetingIdMembersData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        meetingId: string;
    };
    query?: never;
    url: '/groups/{groupId}/meetings/{meetingId}/members';
};

export type GetGroupsGroupIdMeetingsMeetingIdMembersResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<GroupMeetingMember>;
        meta?: {
            count?: number;
            totalCheckedIn?: number;
        };
    };
};

export type GetGroupsGroupIdMeetingsMeetingIdMembersResponse =
    GetGroupsGroupIdMeetingsMeetingIdMembersResponses[keyof GetGroupsGroupIdMeetingsMeetingIdMembersResponses];

export type PostGroupsGroupIdMeetingsMeetingIdMembersMissingData = {
    body?: {
        status?: 'absent' | 'present';
    };
    path: {
        /**
         * ID of group
         */
        groupId: number;
        meetingId: string;
    };
    query?: never;
    url: '/groups/{groupId}/meetings/{meetingId}/members/missing';
};

export type PostGroupsGroupIdMeetingsMeetingIdMembersMissingResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostGroupsGroupIdMeetingsMeetingIdMembersResetData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        meetingId: string;
    };
    query?: never;
    url: '/groups/{groupId}/meetings/{meetingId}/members/reset';
};

export type PostGroupsGroupIdMeetingsMeetingIdMembersResetResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteGroupsGroupIdMeetingsMeetingIdMembersMemberIdData = {
    body?: {
        status?: 'absent' | 'unsure';
    };
    path: {
        /**
         * ID of group
         */
        groupId: number;
        meetingId: number;
        memberId: number;
    };
    query?: never;
    url: '/groups/{groupId}/meetings/{meetingId}/members/{memberId}';
};

export type DeleteGroupsGroupIdMeetingsMeetingIdMembersMemberIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteGroupsGroupIdMeetingsMeetingIdMembersMemberIdResponse =
    DeleteGroupsGroupIdMeetingsMeetingIdMembersMemberIdResponses[keyof DeleteGroupsGroupIdMeetingsMeetingIdMembersMemberIdResponses];

export type GetGroupsGroupIdMemberfieldsData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/memberfields';
};

export type GetGroupsGroupIdMemberfieldsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<GroupMemberField>;
    };
};

export type GetGroupsGroupIdMemberfieldsResponse =
    GetGroupsGroupIdMemberfieldsResponses[keyof GetGroupsGroupIdMemberfieldsResponses];

export type PostGroupsGroupIdMemberfieldsGroupData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/memberfields/group';
};

export type PostGroupsGroupIdMemberfieldsGroupErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostGroupsGroupIdMemberfieldsGroupError =
    PostGroupsGroupIdMemberfieldsGroupErrors[keyof PostGroupsGroupIdMemberfieldsGroupErrors];

export type DeleteGroupsGroupIdMemberfieldsGroupGroupMemberFieldIdData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        groupMemberFieldId: string;
    };
    query?: never;
    url: '/groups/{groupId}/memberfields/group/{groupMemberFieldId}';
};

export type DeleteGroupsGroupIdMemberfieldsGroupGroupMemberFieldIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type DeleteGroupsGroupIdMemberfieldsGroupGroupMemberFieldIdError =
    DeleteGroupsGroupIdMemberfieldsGroupGroupMemberFieldIdErrors[keyof DeleteGroupsGroupIdMemberfieldsGroupGroupMemberFieldIdErrors];

export type PutGroupsGroupIdMemberfieldsGroupGroupMemberFieldIdData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        groupMemberFieldId: string;
    };
    query?: never;
    url: '/groups/{groupId}/memberfields/group/{groupMemberFieldId}';
};

export type PutGroupsGroupIdMemberfieldsGroupGroupMemberFieldIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PutGroupsGroupIdMemberfieldsGroupGroupMemberFieldIdError =
    PutGroupsGroupIdMemberfieldsGroupGroupMemberFieldIdErrors[keyof PutGroupsGroupIdMemberfieldsGroupGroupMemberFieldIdErrors];

export type DeleteGroupsGroupIdMemberfieldsPersonPersonFieldIdData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        personFieldId: string;
    };
    query?: never;
    url: '/groups/{groupId}/memberfields/person/{personFieldId}';
};

export type DeleteGroupsGroupIdMemberfieldsPersonPersonFieldIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type DeleteGroupsGroupIdMemberfieldsPersonPersonFieldIdError =
    DeleteGroupsGroupIdMemberfieldsPersonPersonFieldIdErrors[keyof DeleteGroupsGroupIdMemberfieldsPersonPersonFieldIdErrors];

export type PutGroupsGroupIdMemberfieldsPersonPersonFieldIdData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        personFieldId: string;
    };
    query?: never;
    url: '/groups/{groupId}/memberfields/person/{personFieldId}';
};

export type PutGroupsGroupIdMemberfieldsPersonPersonFieldIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PutGroupsGroupIdMemberfieldsPersonPersonFieldIdError =
    PutGroupsGroupIdMemberfieldsPersonPersonFieldIdErrors[keyof PutGroupsGroupIdMemberfieldsPersonPersonFieldIdErrors];

export type GetGroupsGroupIdMemberpreviewData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/memberpreview';
};

export type GetGroupsGroupIdMemberpreviewErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupsGroupIdMemberpreviewError =
    GetGroupsGroupIdMemberpreviewErrors[keyof GetGroupsGroupIdMemberpreviewErrors];

export type GetGroupsGroupIdMemberpreviewResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<MemberPreview>;
        meta?: MetaCount;
    };
};

export type GetGroupsGroupIdMemberpreviewResponse =
    GetGroupsGroupIdMemberpreviewResponses[keyof GetGroupsGroupIdMemberpreviewResponses];

export type GetAllGroupMembersData = {
    body?: never;
    path: {
        groupId: number;
    };
    query?: {
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Number of results per page.
         */
        limit?: number;
        /**
         * Array of roles to filter the members
         */
        'role_ids[]'?: Array<number>;
        /**
         * Array of person ids to filter the members
         */
        'person_id[]'?: Array<number>;
        /**
         * Array of group member statuses to filter the members
         */
        'group_member_statuses[]'?: Array<MemberStatus>;
        /**
         * If true, return only group members, that are allowed to chat in this group
         */
        allowed_chat_users_only?: boolean;
        /**
         * If true, return only group members that are allowed to write in the chat.
         */
        allowed_chat_writers_only?: boolean;
        /**
         * searches in first and second name of group member
         */
        query?: string;
        /**
         * Filter by comment
         */
        comment?: string;
        /**
         * Filter by whether the membership began after the given date.
         */
        member_start_date_after?: DateString;
        /**
         * Filter by whether the membership began before the given date.
         */
        member_start_date_before?: DateString;
        /**
         * The fields to order by. Person fields look like this: person_firstName. Group member fields look like this: member_groupTypeRoleId.
         */
        'orderFields[]'?: Array<string>;
        /**
         * The order directions for the fields. Must be the same length as orderFields. Default is ASC. Possible values are ASC and DESC.
         */
        'orderDirections[]'?: Array<'ASC' | 'DESC'>;
        /**
         * Additional person fields that should be returned by this endpoint. A person field is defined by its key. For example: firstName
         */
        'personFields[]'?: Array<string>;
        /**
         * Include additional information
         */
        include?: Array<'tags' | 'aggregations'>;
    };
    url: '/groups/{groupId}/members';
};

export type GetAllGroupMembersErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden to see group members
     */
    403: unknown;
};

export type GetAllGroupMembersResponses = {
    /**
     * The group members
     */
    200: {
        data?: Array<GroupMember>;
        meta?: {
            all?: number;
            count?: number;
            pagination?: MetaPagination;
        };
    };
};

export type GetAllGroupMembersResponse = GetAllGroupMembersResponses[keyof GetAllGroupMembersResponses];

export type GetGroupsGroupIdMembersExportData = {
    body?: never;
    path: {
        groupId: string;
    };
    query?: {
        /**
         * Type of export file
         */
        type?: 'xlsx' | 'csv';
    };
    url: '/groups/{groupId}/members/export';
};

export type GetGroupsGroupIdMembersExportErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupsGroupIdMembersExportError =
    GetGroupsGroupIdMembersExportErrors[keyof GetGroupsGroupIdMembersExportErrors];

export type GetGroupsGroupIdMembersExportConfigData = {
    body?: {
        config?: GroupMemberExportConfig;
    };
    path: {
        groupId: string;
    };
    query?: {
        /**
         * Type of export file
         */
        type?: 'xlsx' | 'csv';
    };
    url: '/groups/{groupId}/members/export';
};

export type GetGroupsGroupIdMembersExportConfigErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupsGroupIdMembersExportConfigError =
    GetGroupsGroupIdMembersExportConfigErrors[keyof GetGroupsGroupIdMembersExportConfigErrors];

export type GetGroupsGroupIdMembersHistoryData = {
    body?: never;
    path: {
        groupId: string;
    };
    query?: never;
    url: '/groups/{groupId}/members/history';
};

export type GetGroupsGroupIdMembersHistoryErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupsGroupIdMembersHistoryError =
    GetGroupsGroupIdMembersHistoryErrors[keyof GetGroupsGroupIdMembersHistoryErrors];

export type GetGroupsGroupIdMembersHistoryResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<GroupMemberHistoryEntry>;
        meta?: MetaCount;
    };
};

export type GetGroupsGroupIdMembersHistoryResponse =
    GetGroupsGroupIdMembersHistoryResponses[keyof GetGroupsGroupIdMembersHistoryResponses];

export type GetGroupsGroupIdMembersRoutinesData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/members/routines';
};

export type GetGroupsGroupIdMembersRoutinesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupsGroupIdMembersRoutinesError =
    GetGroupsGroupIdMembersRoutinesErrors[keyof GetGroupsGroupIdMembersRoutinesErrors];

export type GetGroupsGroupIdMembersRoutinesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<GroupMembershipRoutine>;
        meta?: MetaCount;
    };
};

export type GetGroupsGroupIdMembersRoutinesResponse =
    GetGroupsGroupIdMembersRoutinesResponses[keyof GetGroupsGroupIdMembersRoutinesResponses];

export type DeleteGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        /**
         * Status of a group membership
         */
        groupMemberStatus: 'active' | 'requested' | 'waiting' | 'to_delete';
        /**
         * ID of group role. This is not the group type role. The group role has a reference to the group type role and sets specific settings for the role in this group.
         */
        roleId: number;
    };
    query?: never;
    url: '/groups/{groupId}/members/routines/{roleId}/{groupMemberStatus}';
};

export type DeleteGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type DeleteGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusError =
    DeleteGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusErrors[keyof DeleteGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusErrors];

export type DeleteGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusResponse =
    DeleteGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusResponses[keyof DeleteGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusResponses];

export type PutGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusData = {
    body?: {
        routineId: number;
    };
    path: {
        /**
         * ID of group
         */
        groupId: number;
        /**
         * Status of a group membership
         */
        groupMemberStatus: 'active' | 'requested' | 'waiting' | 'to_delete';
        /**
         * ID of group role. This is not the group type role. The group role has a reference to the group type role and sets specific settings for the role in this group.
         */
        roleId: number;
    };
    query?: never;
    url: '/groups/{groupId}/members/routines/{roleId}/{groupMemberStatus}';
};

export type PutGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PutGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusError =
    PutGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusErrors[keyof PutGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusErrors];

export type PutGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusResponses = {
    /**
     * OK
     */
    200: GroupMembershipRoutine;
};

export type PutGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusResponse =
    PutGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusResponses[keyof PutGroupsGroupIdMembersRoutinesRoleIdGroupMemberStatusResponses];

export type GetGroupsGroupIdMembersStatisticsData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query: {
        'group_type_role_ids[]': Array<number>;
        /**
         * person field keys
         */
        'personFields[]'?: Array<string>;
        /**
         * group member field ids
         */
        'groupMemberFields[]'?: Array<number>;
    };
    url: '/groups/{groupId}/members/statistics';
};

export type GetGroupsGroupIdMembersStatisticsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<{
            data?: Array<{
                key?: string;
                value?: string;
            }>;
            fieldType?: string;
            key?: string;
        }>;
    };
};

export type GetGroupsGroupIdMembersStatisticsResponse =
    GetGroupsGroupIdMembersStatisticsResponses[keyof GetGroupsGroupIdMembersStatisticsResponses];

export type GetGroupsGroupIdDocumentDocumentIdData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        /**
         * ID of an HTML template
         */
        htmlTemplateId: number;
        memberId: number;
    };
    query?: never;
    url: '/groups/{groupId}/members/{memberId}/documents/{htmlTemplateId}';
};

export type GetGroupsGroupIdDocumentDocumentIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupsGroupIdDocumentDocumentIdError =
    GetGroupsGroupIdDocumentDocumentIdErrors[keyof GetGroupsGroupIdDocumentDocumentIdErrors];

export type DeleteGroupsGroupIdMembersPersonIdData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/groups/{groupId}/members/{personId}';
};

export type DeleteGroupsGroupIdMembersPersonIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type DeleteGroupsGroupIdMembersPersonIdError =
    DeleteGroupsGroupIdMembersPersonIdErrors[keyof DeleteGroupsGroupIdMembersPersonIdErrors];

export type DeleteGroupsGroupIdMembersPersonIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteGroupsGroupIdMembersPersonIdResponse =
    DeleteGroupsGroupIdMembersPersonIdResponses[keyof DeleteGroupsGroupIdMembersPersonIdResponses];

export type GetGroupsGroupIdMembersPersonIdData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/groups/{groupId}/members/{personId}';
};

export type GetGroupsGroupIdMembersPersonIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupsGroupIdMembersPersonIdError =
    GetGroupsGroupIdMembersPersonIdErrors[keyof GetGroupsGroupIdMembersPersonIdErrors];

export type GetGroupsGroupIdMembersPersonIdResponses = {
    /**
     * OK
     */
    200: {
        data?: GroupMember;
    };
};

export type GetGroupsGroupIdMembersPersonIdResponse =
    GetGroupsGroupIdMembersPersonIdResponses[keyof GetGroupsGroupIdMembersPersonIdResponses];

export type PatchGroupsGroupIdMembersPersonIdData = {
    /**
     * All fields are optional. Only updates properties provided.
     */
    body: MembershipUpdate;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/groups/{groupId}/members/{personId}';
};

export type PatchGroupsGroupIdMembersPersonIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PatchGroupsGroupIdMembersPersonIdError =
    PatchGroupsGroupIdMembersPersonIdErrors[keyof PatchGroupsGroupIdMembersPersonIdErrors];

export type PatchGroupsGroupIdMembersPersonIdResponses = {
    /**
     * OK
     */
    200: {
        data?: GroupMember;
    };
};

export type PatchGroupsGroupIdMembersPersonIdResponse =
    PatchGroupsGroupIdMembersPersonIdResponses[keyof PatchGroupsGroupIdMembersPersonIdResponses];

export type PutGroupsGroupIdMembersPersonIdData = {
    /**
     * All fields are optional. If not set, default values are used. groupTypeRoleId defaults to the standard role of the group's grouptype, groupMemberStatus to the active status, comment and member start/end dates default to null.
     */
    body: MembershipNew;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/groups/{groupId}/members/{personId}';
};

export type PutGroupsGroupIdMembersPersonIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PutGroupsGroupIdMembersPersonIdError =
    PutGroupsGroupIdMembersPersonIdErrors[keyof PutGroupsGroupIdMembersPersonIdErrors];

export type PutGroupsGroupIdMembersPersonIdResponses = {
    /**
     * Successfully created
     */
    200: {
        data?: GroupMember;
    };
};

export type PutGroupsGroupIdMembersPersonIdResponse =
    PutGroupsGroupIdMembersPersonIdResponses[keyof PutGroupsGroupIdMembersPersonIdResponses];

export type DeleteGroupsGroupIdMembersPersonIdFollowupData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        /**
         * ID of person
         */
        personId: number;
    };
    query: {
        /**
         * Comment
         */
        comment: string;
    };
    url: '/groups/{groupId}/members/{personId}/followup';
};

export type DeleteGroupsGroupIdMembersPersonIdFollowupResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeleteGroupsGroupIdMembersPersonIdFollowupResponse =
    DeleteGroupsGroupIdMembersPersonIdFollowupResponses[keyof DeleteGroupsGroupIdMembersPersonIdFollowupResponses];

export type PostGroupsGroupIdMembersPersonIdFollowupData = {
    body?: {
        addDiffDays?: number;
        comment: string;
        followUpSuccessful: boolean;
        targetGroupId?: number;
        targetRoleId?: number;
    };
    path: {
        /**
         * ID of group
         */
        groupId: number;
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/groups/{groupId}/members/{personId}/followup';
};

export type PostGroupsGroupIdMembersPersonIdFollowupResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PostGroupsGroupIdMembersPersonIdFollowupResponse =
    PostGroupsGroupIdMembersPersonIdFollowupResponses[keyof PostGroupsGroupIdMembersPersonIdFollowupResponses];

export type GetGroupsGroupIdMembersPersonIdFollowupsData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        /**
         * ID of person
         */
        personId: number;
    };
    query?: {
        /**
         * Filter for follow-ups.
         */
        filter?: Array<FollowUpFilter>;
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Number of results per page.
         */
        limit?: number;
    };
    url: '/groups/{groupId}/members/{personId}/followups';
};

export type GetGroupsGroupIdMembersPersonIdFollowupsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupsGroupIdMembersPersonIdFollowupsError =
    GetGroupsGroupIdMembersPersonIdFollowupsErrors[keyof GetGroupsGroupIdMembersPersonIdFollowupsErrors];

export type GetGroupsGroupIdMembersPersonIdFollowupsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<FollowUp2>;
        meta: MetaCount;
    };
};

export type GetGroupsGroupIdMembersPersonIdFollowupsResponse =
    GetGroupsGroupIdMembersPersonIdFollowupsResponses[keyof GetGroupsGroupIdMembersPersonIdFollowupsResponses];

export type GetGroupsGroupIdMembersPersonIdFollowupsStatisticsData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/groups/{groupId}/members/{personId}/followups/statistics';
};

export type GetGroupsGroupIdMembersPersonIdFollowupsStatisticsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupsGroupIdMembersPersonIdFollowupsStatisticsError =
    GetGroupsGroupIdMembersPersonIdFollowupsStatisticsErrors[keyof GetGroupsGroupIdMembersPersonIdFollowupsStatisticsErrors];

export type GetGroupsGroupIdMembersPersonIdFollowupsStatisticsResponses = {
    /**
     * OK
     */
    200: {
        data: FollowUpStatistics;
    };
};

export type GetGroupsGroupIdMembersPersonIdFollowupsStatisticsResponse =
    GetGroupsGroupIdMembersPersonIdFollowupsStatisticsResponses[keyof GetGroupsGroupIdMembersPersonIdFollowupsStatisticsResponses];

export type OptInsData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/optins';
};

export type OptInsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type OptInsError = OptInsErrors[keyof OptInsErrors];

export type OptInsResponses = {
    /**
     * Successful request
     */
    200: {
        data?: {
            newsletter?: {
                [key: string]: unknown;
            };
            persons?: {
                [key: string]: unknown;
            };
        };
    };
};

export type OptInsResponse = OptInsResponses[keyof OptInsResponses];

export type GetGroupsGroupIdParentsData = {
    body?: never;
    path: {
        groupId: string;
    };
    query?: {
        /**
         * Number of results per page.
         */
        limit?: number;
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Array of group ids
         */
        'ids[]'?: Array<number>;
        /**
         * Array of campus ids to filter the groups
         */
        'campus_ids[]'?: Array<number>;
        /**
         * Array of age group ids to filter the groups
         */
        'agegroup_ids[]'?: Array<number>;
        /**
         * Array of group status ids to filter the groups
         */
        'group_status_ids[]'?: Array<number>;
        /**
         * Array of group category ids to filter the groups
         */
        'group_category_ids[]'?: Array<number>;
        /**
         * Array of target group ids to filter the groups
         */
        'target_group_ids[]'?: Array<number>;
        /**
         * Array of weekdays to filter the groups. Sunday = 0, Monday = 1 ...
         */
        'weekdays[]'?: Array<number>;
        /**
         * Array of group type ids to filter the groups
         */
        'group_type_ids[]'?: Array<number>;
        /**
         * Array of group tag ids to filter the groups
         */
        'tag_ids[]'?: Array<number>;
        /**
         * Filters groups by its open status
         */
        is_open_for_members?: boolean;
        /**
         * Determines if groups should be omitted where I am in
         */
        without_my_groups?: boolean;
        /**
         * Determines if only groups where I am in should be returned
         */
        only_my_groups?: boolean;
        /**
         * Only show groups with meeting place
         */
        has_meeting_place?: boolean;
        /**
         * Only show groups where posting is allowed
         */
        allow_posts?: boolean;
        /**
         * Only show groups which has posts
         */
        has_posts?: boolean;
        query?: string;
        /**
         * Group visibility
         */
        visibility?: 'hidden' | 'public' | 'restricted' | 'intern';
    };
    url: '/groups/{groupId}/parents';
};

export type GetGroupsGroupIdParentsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupsGroupIdParentsError = GetGroupsGroupIdParentsErrors[keyof GetGroupsGroupIdParentsErrors];

export type GetGroupsGroupIdParentsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<DomainObjectGroup>;
        meta?: {
            count?: number;
            groupStatusIds?: {
                [key: string]: {
                    count?: number;
                    key?: string;
                };
            };
        };
    };
};

export type GetGroupsGroupIdParentsResponse = GetGroupsGroupIdParentsResponses[keyof GetGroupsGroupIdParentsResponses];

export type DeleteGroupsGroupIdParentsParentGroupIdData = {
    body?: never;
    path: {
        groupId: string;
        parentGroupId: string;
    };
    query?: never;
    url: '/groups/{groupId}/parents/{parentGroupId}';
};

export type DeleteGroupsGroupIdParentsParentGroupIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteGroupsGroupIdParentsParentGroupIdResponse =
    DeleteGroupsGroupIdParentsParentGroupIdResponses[keyof DeleteGroupsGroupIdParentsParentGroupIdResponses];

export type PutGroupsGroupIdParentsParentGroupIdData = {
    body?: never;
    path: {
        groupId: string;
        parentGroupId: string;
    };
    query?: never;
    url: '/groups/{groupId}/parents/{parentGroupId}';
};

export type PutGroupsGroupIdParentsParentGroupIdResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type GetGrupsIdPlacesData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/places';
};

export type GetGrupsIdPlacesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGrupsIdPlacesError = GetGrupsIdPlacesErrors[keyof GetGrupsIdPlacesErrors];

export type GetGrupsIdPlacesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Place>;
        meta?: MetaCount;
    };
};

export type GetGrupsIdPlacesResponse = GetGrupsIdPlacesResponses[keyof GetGrupsIdPlacesResponses];

export type PostGroupsGroupIdPlacesData = {
    body?: PlaceCreate;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/places';
};

export type PostGroupsGroupIdPlacesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostGroupsGroupIdPlacesError = PostGroupsGroupIdPlacesErrors[keyof PostGroupsGroupIdPlacesErrors];

export type PostGroupsGroupIdPlacesResponses = {
    /**
     * OK
     */
    201: {
        data?: Place;
    };
};

export type PostGroupsGroupIdPlacesResponse = PostGroupsGroupIdPlacesResponses[keyof PostGroupsGroupIdPlacesResponses];

export type DeleteGroupsGroupIdPlacesPlaceIdData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        placeId: number;
    };
    query?: never;
    url: '/groups/{groupId}/places/{placeId}';
};

export type DeleteGroupsGroupIdPlacesPlaceIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteGroupsGroupIdPlacesPlaceIdError =
    DeleteGroupsGroupIdPlacesPlaceIdErrors[keyof DeleteGroupsGroupIdPlacesPlaceIdErrors];

export type DeleteGroupsGroupIdPlacesPlaceIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteGroupsGroupIdPlacesPlaceIdResponse =
    DeleteGroupsGroupIdPlacesPlaceIdResponses[keyof DeleteGroupsGroupIdPlacesPlaceIdResponses];

export type PutGroupsGroupIdPlacesPlaceIdData = {
    body?: PlaceCreate;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        placeId: number;
    };
    query?: never;
    url: '/groups/{groupId}/places/{placeId}';
};

export type PutGroupsGroupIdPlacesPlaceIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutGroupsGroupIdPlacesPlaceIdError =
    PutGroupsGroupIdPlacesPlaceIdErrors[keyof PutGroupsGroupIdPlacesPlaceIdErrors];

export type PutGroupsGroupIdPlacesPlaceIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Place;
    };
};

export type PutGroupsGroupIdPlacesPlaceIdResponse =
    PutGroupsGroupIdPlacesPlaceIdResponses[keyof PutGroupsGroupIdPlacesPlaceIdResponses];

export type GetGroupsGroupIdPoststatisticsData = {
    body?: never;
    path: {
        groupId: string;
    };
    query?: never;
    url: '/groups/{groupId}/poststatistics';
};

export type GetGroupsGroupIdPoststatisticsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupsGroupIdPoststatisticsError =
    GetGroupsGroupIdPoststatisticsErrors[keyof GetGroupsGroupIdPoststatisticsErrors];

export type GetGroupsGroupIdPoststatisticsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<GroupPostStatistics>;
    };
};

export type GetGroupsGroupIdPoststatisticsResponse =
    GetGroupsGroupIdPoststatisticsResponses[keyof GetGroupsGroupIdPoststatisticsResponses];

export type GetGroupQrCodeCheckinData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/qrcodecheckin';
};

export type GetGroupQrCodeCheckinErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupQrCodeCheckinError = GetGroupQrCodeCheckinErrors[keyof GetGroupQrCodeCheckinErrors];

export type GetGroupQrCodeCheckinResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<GroupQrCodeCheckin>;
    };
};

export type GetGroupQrCodeCheckinResponse = GetGroupQrCodeCheckinResponses[keyof GetGroupQrCodeCheckinResponses];

export type GetGroupQrCodeCheckinPersonData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        personId: string;
    };
    query?: never;
    url: '/groups/{groupId}/qrcodecheckin/{personId}';
};

export type GetGroupQrCodeCheckinPersonErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetGroupQrCodeCheckinPersonError =
    GetGroupQrCodeCheckinPersonErrors[keyof GetGroupQrCodeCheckinPersonErrors];

export type GetGroupQrCodeCheckinPersonResponses = {
    /**
     * OK
     */
    200: {
        data?: GroupQrCodeCheckin;
    };
};

export type GetGroupQrCodeCheckinPersonResponse =
    GetGroupQrCodeCheckinPersonResponses[keyof GetGroupQrCodeCheckinPersonResponses];

export type GetQrCodeCheckinData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/groups/{groupId}/qrcodecheckin/{personId}/pdf';
};

export type GetQrCodeCheckinErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetQrCodeCheckinError = GetQrCodeCheckinErrors[keyof GetQrCodeCheckinErrors];

export type GetQrCodeCheckinResponses = {
    /**
     * Successfully created
     */
    200: {
        data?: {
            /**
             * download URL for the created QR code PDF
             */
            url?: string;
        };
    };
};

export type GetQrCodeCheckinResponse = GetQrCodeCheckinResponses[keyof GetQrCodeCheckinResponses];

export type PostGroupsGroupIdQrcodecheckinPersonIdSendData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        personId: string;
    };
    query?: never;
    url: '/groups/{groupId}/qrcodecheckin/{personId}/send';
};

export type PostGroupsGroupIdQrcodecheckinPersonIdSendErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostGroupsGroupIdQrcodecheckinPersonIdSendError =
    PostGroupsGroupIdQrcodecheckinPersonIdSendErrors[keyof PostGroupsGroupIdQrcodecheckinPersonIdSendErrors];

export type PostGroupsGroupIdQrcodecheckinPersonIdSendResponses = {
    /**
     * OK
     */
    200: {
        data?: GroupQrCodeCheckin;
    };
};

export type PostGroupsGroupIdQrcodecheckinPersonIdSendResponse =
    PostGroupsGroupIdQrcodecheckinPersonIdSendResponses[keyof PostGroupsGroupIdQrcodecheckinPersonIdSendResponses];

export type GetRolesOfGroupData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/roles';
};

export type GetRolesOfGroupResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<GroupRole>;
        meta?: MetaCount;
    };
};

export type GetRolesOfGroupResponse = GetRolesOfGroupResponses[keyof GetRolesOfGroupResponses];

export type PatchGroupsGroupIdRolesRoleIdData = {
    body?: GroupRoleUpdate;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        /**
         * ID of group role. This is not the group type role. The group role has a reference to the group type role and sets specific settings for the role in this group.
         */
        roleId: number;
    };
    query?: never;
    url: '/groups/{groupId}/roles/{roleId}';
};

export type PatchGroupsGroupIdRolesRoleIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetGroupStatisticsData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/statistics';
};

export type GetGroupStatisticsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetGroupStatisticsError = GetGroupStatisticsErrors[keyof GetGroupStatisticsErrors];

export type GetGroupStatisticsResponses = {
    /**
     * OK
     */
    200: {
        data?: GroupStatistics;
    };
};

export type GetGroupStatisticsResponse = GetGroupStatisticsResponses[keyof GetGroupStatisticsResponses];

export type GetGroupsGroupIdTagsData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/groups/{groupId}/tags';
};

export type GetGroupsGroupIdTagsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<{
            count?: number;
            id?: number;
            modifiedAt?: string;
            modifiedBy?: number;
            name?: string;
        }>;
    };
};

export type GetGroupsGroupIdTagsResponse = GetGroupsGroupIdTagsResponses[keyof GetGroupsGroupIdTagsResponses];

export type DeleteGroupsGroupIdTagsTagIdData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
        /**
         * ID of tag
         */
        tagId: number;
    };
    query?: never;
    url: '/groups/{groupId}/tags/{tagId}';
};

export type DeleteGroupsGroupIdTagsTagIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteGroupsGroupIdTagsTagIdResponse =
    DeleteGroupsGroupIdTagsTagIdResponses[keyof DeleteGroupsGroupIdTagsTagIdResponses];

export type GetAllHtmlTemplatesData = {
    body?: never;
    path?: never;
    query: {
        domain_type: 'email' | 'bulkletter';
    };
    url: '/htmltemplates';
};

export type GetAllHtmlTemplatesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<HtmlTemplate>;
        meta?: MetaCount;
    };
};

export type GetAllHtmlTemplatesResponse = GetAllHtmlTemplatesResponses[keyof GetAllHtmlTemplatesResponses];

export type CreateHtmlTemplateData = {
    body?: {
        domainType?: 'email' | 'bulkletter';
        html?: string;
        /**
         * Indicator if HTML template is globally available for all users.
         */
        isGlobal?: true | false;
        mjml?: string;
        /**
         * Name of HTML template
         */
        name?: string;
    };
    path?: never;
    query?: never;
    url: '/htmltemplates';
};

export type CreateHtmlTemplateResponses = {
    /**
     * OK
     */
    201: {
        data?: Array<HtmlTemplate>;
        meta?: MetaCount;
    };
};

export type CreateHtmlTemplateResponse = CreateHtmlTemplateResponses[keyof CreateHtmlTemplateResponses];

export type DeleteHtmlTemplateData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/htmltemplates/{id}';
};

export type DeleteHtmlTemplateErrors = {
    /**
     * Not Found
     */
    404: unknown;
};

export type DeleteHtmlTemplateResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteHtmlTemplateResponse = DeleteHtmlTemplateResponses[keyof DeleteHtmlTemplateResponses];

export type GetHtmlTemplateData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/htmltemplates/{id}';
};

export type GetHtmlTemplateErrors = {
    /**
     * Not Found
     */
    404: unknown;
};

export type GetHtmlTemplateResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<HtmlTemplate>;
    };
};

export type GetHtmlTemplateResponse = GetHtmlTemplateResponses[keyof GetHtmlTemplateResponses];

export type UpdateHtmlTemplateData = {
    body?: {
        html?: string;
        /**
         * Indicator if HTML template is globally available for all users.
         */
        isGlobal?: boolean;
        mjml?: string;
        /**
         * Name of HTML template
         */
        name?: string;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/htmltemplates/{id}';
};

export type UpdateHtmlTemplateResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<HtmlTemplate>;
        meta?: MetaCount;
    };
};

export type UpdateHtmlTemplateResponse = UpdateHtmlTemplateResponses[keyof UpdateHtmlTemplateResponses];

export type ExportHtmlTemplateData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/htmltemplates/{id}/export';
};

export type ExportHtmlTemplateErrors = {
    /**
     * Resource not found
     */
    404: unknown;
};

export type ExportHtmlTemplateResponses = {
    /**
     * OK
     */
    200: {
        data?: string;
    };
};

export type ExportHtmlTemplateResponse = ExportHtmlTemplateResponses[keyof ExportHtmlTemplateResponses];

export type GetHtmlTemplateHtmlContentData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/htmltemplates/{id}/html';
};

export type GetHtmlTemplateHtmlContentErrors = {
    /**
     * Not Found
     */
    404: unknown;
};

export type GetHtmlTemplateHtmlContentResponses = {
    /**
     * OK
     */
    200: {
        data?: string;
    };
};

export type GetHtmlTemplateHtmlContentResponse =
    GetHtmlTemplateHtmlContentResponses[keyof GetHtmlTemplateHtmlContentResponses];

export type GetHtmlTemplateMjmlContentData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/htmltemplates/{id}/mjml';
};

export type GetHtmlTemplateMjmlContentErrors = {
    /**
     * Not Found
     */
    404: unknown;
};

export type GetHtmlTemplateMjmlContentResponses = {
    /**
     * OK
     */
    200: {
        data?: string;
    };
};

export type GetHtmlTemplateMjmlContentResponse =
    GetHtmlTemplateMjmlContentResponses[keyof GetHtmlTemplateMjmlContentResponses];

export type PutImageOptionsData = {
    body?: {
        image_options?: string;
    };
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/images/{id}/options';
};

export type PutImageOptionsResponses = {
    /**
     * OK
     */
    200: {
        data?: {
            domainIdentifier?: string;
            domainType?: string;
            filename?: string;
            id?: number;
            name?: string;
            securityLevelId?: number;
            size?: number;
            url?: string;
        };
    };
};

export type PutImageOptionsResponse = PutImageOptionsResponses[keyof PutImageOptionsResponses];

export type GetApiInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/info';
};

export type GetApiInfoResponses = {
    /**
     * API Information
     */
    200: {
        address?: Address;
        /**
         * Database Build Version
         */
        build?: string;
        shortName?: string | null;
        siteName?: string;
        /**
         * ChurchTools Version
         */
        version?: string;
    };
};

export type GetApiInfoResponse = GetApiInfoResponses[keyof GetApiInfoResponses];

export type GetJobsData = {
    body?: never;
    path?: never;
    query?: {
        status?: Array<string>;
        identifier?: string;
        name?: string;
        'domain_ids[]'?: Array<number>;
        created_start_date?: string;
        created_end_date?: string;
        modified_start_date?: string;
        modified_end_date?: string;
    };
    url: '/jobs';
};

export type GetJobsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Job>;
        meta?: MetaCount;
    };
};

export type GetJobsResponse = GetJobsResponses[keyof GetJobsResponses];

export type PostJobLogsData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/jobs/{id}/logs';
};

export type PostJobLogsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostJobLogsError = PostJobLogsErrors[keyof PostJobLogsErrors];

export type PutJobStatusData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/jobs/{id}/status';
};

export type PutJobStatusErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutJobStatusError = PutJobStatusErrors[keyof PutJobStatusErrors];

export type PostLabelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/labels';
};

export type PostLabelsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostLabelsError = PostLabelsErrors[keyof PostLabelsErrors];

export type GetLabelsTotalData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/labels/totals';
};

export type GetLabelsTotalResponses = {
    /**
     * OK
     */
    200: {
        data?: {
            ignoreAddress?: {
                combinedLabels?: number;
                totalLabels?: number;
            };
            onlyCompleteAddress?: {
                combinedLabels?: number;
                totalLabels?: number;
            };
        };
    };
};

export type GetLabelsTotalResponse = GetLabelsTotalResponses[keyof GetLabelsTotalResponses];

export type GetLanguagesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Set to true if only active languages should be returned
         */
        only_active?: boolean;
    };
    url: '/languages';
};

export type GetLanguagesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetLanguagesError = GetLanguagesErrors[keyof GetLanguagesErrors];

export type GetLanguagesResponses = {
    /**
     * Successful request
     */
    200: {
        data?: Array<Language>;
    };
};

export type GetLanguagesResponse = GetLanguagesResponses[keyof GetLanguagesResponses];

export type FetchLicenseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/license/fetch';
};

export type FetchLicenseErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type FetchLicenseError = FetchLicenseErrors[keyof FetchLicenseErrors];

export type PostLoginData = {
    body?: {
        password: string;
        rememberMe?: boolean;
        /**
         * Can be username or email
         */
        username: string;
    };
    path?: never;
    query?: never;
    url: '/login';
};

export type PostLoginResponses = {
    /**
     * OK
     */
    200: {
        data: {
            location: string;
            message: string;
            personId: number;
            status: string;
        };
    };
};

export type PostLoginResponse = PostLoginResponses[keyof PostLoginResponses];

export type PostLoginTotpData = {
    body?: {
        /**
         * the 6-digit verification code
         */
        code: string;
        personId: number;
    };
    path?: never;
    query?: never;
    url: '/login/totp';
};

export type PostLoginTotpErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostLoginTotpError = PostLoginTotpErrors[keyof PostLoginTotpErrors];

export type PostLoginTotpResponses = {
    200: {
        data: {
            redirectTo?: string;
            status: 'success';
        };
    };
};

export type PostLoginTotpResponse = PostLoginTotpResponses[keyof PostLoginTotpResponses];

export type PostLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/logout';
};

export type PostLogoutResponses = {
    /**
     * User successfully logged out.
     */
    204: void;
};

export type PostLogoutResponse = PostLogoutResponses[keyof PostLogoutResponses];

export type GetAllLogsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by text
         */
        message?: string;
        /**
         * Filter by log level ID
         */
        'levels[]'?: Array<string>;
        /**
         * Filter log messages before that date. (Use ISO-Format)
         */
        before?: string;
        /**
         * Filter log messages after that date. (Use ISO-Format)
         */
        after?: string;
        /**
         * Filter by person
         */
        person_id?: number;
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Number of results per page.
         */
        limit?: number;
    };
    url: '/logs';
};

export type GetAllLogsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetAllLogsResponses = {
    /**
     * Successful request
     */
    200: {
        data?: Array<Log>;
        meta?: MetaPagination;
    };
};

export type GetAllLogsResponse = GetAllLogsResponses[keyof GetAllLogsResponses];

export type GetLoginStatisticsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Order the pagination result. Allowed values: `frequent` and `last`
         */
        order_by?: string;
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Number of results per page.
         */
        limit?: number;
    };
    url: '/logs/statistics/login';
};

export type GetLoginStatisticsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetLoginStatisticsResponses = {
    /**
     * Successful request
     */
    200: {
        data?: Array<{
            /**
             * Last time the user has logged in.
             */
            lastLogin?: string;
            person?: DomainObjectPerson;
            /**
             * Count of how many times a user has loged in.
             */
            totalLogins?: number;
        }>;
        meta?: MetaPagination;
    };
};

export type GetLoginStatisticsResponse = GetLoginStatisticsResponses[keyof GetLoginStatisticsResponses];

export type GetLogByIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/logs/{id}';
};

export type GetLogByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetLogByIdResponses = {
    /**
     * The log
     */
    200: {
        data?: Log;
    };
};

export type GetLogByIdResponse = GetLogByIdResponses[keyof GetLogByIdResponses];

export type FetchMasterDataPersonData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/masterdata/person';
};

export type FetchMasterDataPersonResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetMenuData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/menu';
};

export type GetMenuErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetMenuError = GetMenuErrors[keyof GetMenuErrors];

export type GetMenuResponses = {
    /**
     * OK
     */
    200: {
        admin?: {
            actions?: Array<{
                href?: string;
                icon?: string;
                key?: string;
                label?: string;
            }>;
            primary?: Array<{
                href?: string;
                icon?: string;
                label?: string;
            }>;
            secondary?: Array<{
                href?: string;
                icon?: string;
                label?: string;
            }>;
        };
        currentStation?: string | null;
        family?: Array<DomainObjectPerson>;
        help?: {
            actions?: Array<{
                icon?: string;
                key?: string;
                label?: string;
            }>;
            primary?: Array<{
                external?: boolean;
                href?: string;
                icon?: string;
                key?: string;
                label?: string;
            }>;
            secondary?: Array<{
                external?: boolean;
                href?: string;
                icon?: string;
                label?: string;
            }>;
            tertiary?: Array<{
                external?: boolean;
                href?: string;
                icon?: string;
                label?: string;
            }>;
        };
        logo?: string;
        modules?: Array<{
            href?: string;
            label?: string;
        }>;
        personal?: {
            actions?: Array<{
                href?: string;
                icon?: string;
                label?: string;
            }>;
            primary?: Array<{
                href?: string;
                icon?: string;
                label?: string;
            }>;
            secondary?: Array<{
                href?: string;
                icon?: string;
                label?: string;
            }>;
        };
        simulate?: boolean;
        siteName?: string;
        stations?: Array<{
            address_id?: string;
            association_id?: string;
            bezeichnung?: string;
            created_date?: string;
            created_pid?: string;
            denomination?: string;
            description?: string;
            email?: string | null;
            guid?: string;
            id?: string;
            is_published?: string;
            kuerzel?: string;
            modified_date?: string;
            modified_pid?: string;
            phone?: string | null;
            profile_type?: string;
            short_name?: string;
            sign_up_group_id?: number | null;
            slug?: string | null;
            social_media?: string;
            sortkey?: string;
            tags?: string;
            team_title?: string | null;
            visitors?: string;
            website?: string | null;
        }>;
        stationsCount?: string;
        user?: {
            firstname?: string;
            hasAdminRights?: boolean;
            id?: string;
            image?: string;
            imageId?: string;
            imageUrl?: string;
            lastname?: string;
            loggedIn?: boolean;
        };
    };
};

export type GetMenuResponse = GetMenuResponses[keyof GetMenuResponses];

export type GetNotesData = {
    body?: never;
    path: {
        /**
         * Domain types that notes can be used with
         */
        domainType: NoteDomainType;
        /**
         * the domain id
         */
        domainId: number;
    };
    query?: never;
    url: '/notes/{domainType}/{domainId}';
};

export type GetNotesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetNotesError = GetNotesErrors[keyof GetNotesErrors];

export type GetNotesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Note>;
        meta?: MetaCount;
    };
};

export type GetNotesResponse = GetNotesResponses[keyof GetNotesResponses];

export type CreateNoteData = {
    body?: NoteCreateOrUpdate;
    path: {
        /**
         * Domain types that notes can be used with
         */
        domainType: NoteDomainType;
        /**
         * the domain id
         */
        domainId: number;
    };
    query?: never;
    url: '/notes/{domainType}/{domainId}';
};

export type CreateNoteErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type CreateNoteError = CreateNoteErrors[keyof CreateNoteErrors];

export type CreateNoteResponses = {
    /**
     * OK
     */
    201: {
        data?: Note;
    };
};

export type CreateNoteResponse = CreateNoteResponses[keyof CreateNoteResponses];

export type DeleteNoteData = {
    body?: never;
    path: {
        /**
         * Domain types that notes can be used with
         */
        domainType: NoteDomainType;
        /**
         * the domain id
         */
        domainId: number;
        /**
         * ID of note
         */
        noteId: number;
    };
    query?: never;
    url: '/notes/{domainType}/{domainId}/{noteId}';
};

export type DeleteNoteErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteNoteError = DeleteNoteErrors[keyof DeleteNoteErrors];

export type DeleteNoteResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteNoteResponse = DeleteNoteResponses[keyof DeleteNoteResponses];

export type UpdateNoteData = {
    body?: NoteCreateOrUpdate;
    path: {
        /**
         * Domain types that notes can be used with
         */
        domainType: NoteDomainType;
        /**
         * the domain id
         */
        domainId: number;
        /**
         * ID of note
         */
        noteId: number;
    };
    query?: never;
    url: '/notes/{domainType}/{domainId}/{noteId}';
};

export type UpdateNoteErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type UpdateNoteError = UpdateNoteErrors[keyof UpdateNoteErrors];

export type UpdateNoteResponses = {
    /**
     * OK
     */
    200: {
        data?: Note;
    };
};

export type UpdateNoteResponse = UpdateNoteResponses[keyof UpdateNoteResponses];

export type DeleteNotesNoteIdData = {
    body?: never;
    path: {
        /**
         * ID of note
         */
        noteId: number;
    };
    query?: never;
    url: '/notes/{noteId}';
};

export type DeleteNotesNoteIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteNotesNoteIdError = DeleteNotesNoteIdErrors[keyof DeleteNotesNoteIdErrors];

export type DeleteNotesNoteIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteNotesNoteIdResponse = DeleteNotesNoteIdResponses[keyof DeleteNotesNoteIdResponses];

export type PostNpsData = {
    /**
     * A valid score between 1 and 10 is stored to the database. Any other number than that is intepreted as decline. Thas means, no score is saved but the user is marked as he has voted.
     */
    body?: {
        score: number;
    };
    path?: never;
    query?: never;
    url: '/nps';
};

export type PostNpsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden. A user can only submit a vote if he is allowed to.
     *
     * - If new: Last 4 chars of his GUID are hex->dec converted and that is the day of the year. He has 1 Week to submit
     * - If already voted: 420 days need to pass.
     */
    403: unknown;
};

export type PostNpsResponses = {
    /**
     * Created
     */
    201: {
        date?: string;
        score?: number;
    };
};

export type PostNpsResponse = PostNpsResponses[keyof PostNpsResponses];

export type GetOauthclientsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/oauthclients';
};

export type GetOauthclientsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<{
            identifier?: string;
            isConfidential?: boolean;
            name?: string;
            redirectUri?: string;
            visible?: boolean;
        }>;
        meta?: {
            count?: number;
        };
    };
};

export type GetOauthclientsResponse = GetOauthclientsResponses[keyof GetOauthclientsResponses];

export type PostOauthclientsData = {
    body?: {
        isConfidential?: boolean;
        name?: string;
        redirectUri?: string;
    };
    path?: never;
    query?: never;
    url: '/oauthclients';
};

export type PostOauthclientsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type PostOauthclientsResponses = {
    /**
     * OK
     */
    200: {
        data?: {
            identifier?: string;
            isConfidential?: boolean;
            name?: string;
            redirectUri?: string;
        };
    };
};

export type PostOauthclientsResponse = PostOauthclientsResponses[keyof PostOauthclientsResponses];

export type DeleteOauthclientsIdentifierData = {
    body?: never;
    path: {
        identifier: string;
    };
    query?: never;
    url: '/oauthclients/{identifier}';
};

export type DeleteOauthclientsIdentifierErrors = {
    /**
     * Not Found
     */
    404: unknown;
};

export type DeleteOauthclientsIdentifierResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteOauthclientsIdentifierResponse =
    DeleteOauthclientsIdentifierResponses[keyof DeleteOauthclientsIdentifierResponses];

export type PutOauthclientsIdentifierData = {
    body?: {
        isConfidential?: boolean;
        name?: string;
        redirectUri?: string;
    };
    path: {
        identifier: string;
    };
    query?: never;
    url: '/oauthclients/{identifier}';
};

export type PutOauthclientsIdentifierErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type PutOauthclientsIdentifierResponses = {
    /**
     * OK
     */
    200: {
        data?: {
            identifier?: string;
            isConfidential?: boolean;
            name?: string;
            redirectUri?: string;
        };
    };
};

export type PutOauthclientsIdentifierResponse =
    PutOauthclientsIdentifierResponses[keyof PutOauthclientsIdentifierResponses];

export type GetGlobalPermissionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/permissions/global';
};

export type GetGlobalPermissionsResponses = {
    /**
     * OK
     */
    200: {
        data?: GlobalPermissions;
    };
};

export type GetGlobalPermissionsResponse = GetGlobalPermissionsResponses[keyof GetGlobalPermissionsResponses];

export type GetPermissionsInternalGroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/permissions/internal/groups';
};

export type GetPermissionsInternalGroupsResponses = {
    /**
     * OK
     */
    200: {
        data?: InternalGroupPermissions;
    };
};

export type GetPermissionsInternalGroupsResponse =
    GetPermissionsInternalGroupsResponses[keyof GetPermissionsInternalGroupsResponses];

export type GetPermissionsInternalGroupsGroupIdData = {
    body?: never;
    path: {
        /**
         * ID of group
         */
        groupId: number;
    };
    query?: never;
    url: '/permissions/internal/groups/{groupId}';
};

export type GetPermissionsInternalGroupsGroupIdResponses = {
    /**
     * OK
     */
    200: {
        data?: InternalGroupPermissions;
    };
};

export type GetPermissionsInternalGroupsGroupIdResponse =
    GetPermissionsInternalGroupsGroupIdResponses[keyof GetPermissionsInternalGroupsGroupIdResponses];

export type GetInternalPermissionsForPersonData = {
    body?: never;
    path: {
        personId: string;
    };
    query?: never;
    url: '/permissions/internal/persons/{personId}';
};

export type GetInternalPermissionsForPersonResponses = {
    /**
     * OK
     */
    200: {
        data?: InternalGroupPermissions;
    };
};

export type GetInternalPermissionsForPersonResponse =
    GetInternalPermissionsForPersonResponses[keyof GetInternalPermissionsForPersonResponses];

export type GetPermissionsPermissionDomainTypeData = {
    body?: never;
    path: {
        permissionDomainType: 'status' | 'group_type_role' | 'group_role' | 'person';
    };
    query?: never;
    url: '/permissions/{permissionDomainType}';
};

export type GetPermissionsPermissionDomainTypeErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetPermissionsPermissionDomainTypeError =
    GetPermissionsPermissionDomainTypeErrors[keyof GetPermissionsPermissionDomainTypeErrors];

export type GetPermissionsPermissionDomainTypeResponses = {
    /**
     * OK
     */
    200: {
        data?: Permission;
        meta?: MetaCount;
    };
};

export type GetPermissionsPermissionDomainTypeResponse =
    GetPermissionsPermissionDomainTypeResponses[keyof GetPermissionsPermissionDomainTypeResponses];

export type GetPermissionsPermissionDomainTypePermissionDomainIdData = {
    body?: never;
    path: {
        permissionDomainType: 'status' | 'group_type_role' | 'group_role' | 'person';
        permissionDomainId: number;
    };
    query?: never;
    url: '/permissions/{permissionDomainType}/{permissionDomainId}';
};

export type GetPermissionsPermissionDomainTypePermissionDomainIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetPermissionsPermissionDomainTypePermissionDomainIdError =
    GetPermissionsPermissionDomainTypePermissionDomainIdErrors[keyof GetPermissionsPermissionDomainTypePermissionDomainIdErrors];

export type GetPermissionsPermissionDomainTypePermissionDomainIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Permission;
        meta?: MetaCount;
    };
};

export type GetPermissionsPermissionDomainTypePermissionDomainIdResponse =
    GetPermissionsPermissionDomainTypePermissionDomainIdResponses[keyof GetPermissionsPermissionDomainTypePermissionDomainIdResponses];

export type GetPersonMasterdataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/person/masterdata';
};

export type GetPersonMasterdataResponses = {
    /**
     * OK
     */
    200: {
        data?: PersonMasterData;
        meta?: {
            ageGroups?: number;
            campuses?: number;
            commentViewers?: number;
            contactLabels?: number;
            departments?: number;
            followUpIntervals?: number;
            followUps?: number;
            groupCategories?: number;
            groupMeetingTemplates?: number;
            groupStatuses?: number;
            groupTypes?: number;
            growPaths?: number;
            roles?: number;
            statuses?: number;
            targetGroups?: number;
        };
    };
};

export type GetPersonMasterdataResponse = GetPersonMasterdataResponses[keyof GetPersonMasterdataResponses];

export type GetAllPersonsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Array of person ids
         */
        'ids[]'?: Array<number>;
        /**
         * Filter by status id
         */
        'status_ids[]'?: Array<number>;
        /**
         * Filter by campus id
         */
        'campus_ids[]'?: Array<number>;
        /**
         * Filter by birthdays before that date (Format: YYYY-MM-DD)
         */
        birthday_before?: string;
        /**
         * Filter by birthdays after that date (Format: YYYY-MM-DD)
         */
        birthday_after?: string;
        /**
         * Show only archived or not archived people
         */
        is_archived?: boolean;
        /**
         * Show only persons with locked/not locked account
         */
        is_account_locked?: boolean;
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Number of results per page.
         */
        limit?: number;
        /**
         * Include additional information
         */
        include?: Array<'tags'>;
    };
    url: '/persons';
};

export type GetAllPersonsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetAllPersonsResponses = {
    /**
     * Successful request
     */
    200: {
        data?: Array<Person>;
        meta?: MetaPagination;
    };
};

export type GetAllPersonsResponse = GetAllPersonsResponses[keyof GetAllPersonsResponses];

export type CreatePersonData = {
    /**
     * The default values are used if no value is provides.
     */
    body: {
        addressAddition?: string;
        baptisedBy?: string;
        birthName?: string;
        birthday?: string | null;
        birthplace?: string;
        campusId?: number;
        city?: string;
        cmsUserId?: string;
        country?: string;
        dateOfBaptism?: string | null;
        dateOfBelonging?: string | null;
        dateOfDeath?: string | null;
        dateOfEntry?: string | null;
        dateOfResign?: string | null;
        /**
         * Department IDs. At least one department MUST be set for a person.
         */
        departmentIds?: Array<number>;
        email?: string;
        /**
         * Save many eMail addresses for person. If `emails` is present in request `email` is ignored.
         */
        emails?: Array<PersonEmail>;
        familyStatusId?: number | null;
        fax?: string;
        firstContact?: string | null;
        firstName?: string;
        growPathId?: number;
        job?: string;
        lastName?: string;
        mobile?: string;
        nationalityId?: number | null;
        nickname?: string;
        optigemId?: string;
        phonePrivate?: string;
        phoneWork?: string;
        placeOfBaptism?: string;
        /**
         * This object can be optional or required. Depending on your ChurchTools data security settings.
         */
        privacyPolicyAgreement?: {
            date?: string | null;
            typeId?: number | null;
            whoId?: number | null;
        };
        referredBy?: string;
        referredTo?: string;
        sexId?: number | null;
        statusId?: number;
        street?: string;
        title?: string;
        weddingDate?: string | null;
        zip?: string;
    };
    path?: never;
    query?: {
        /**
         * Force the action, which would otherwise fail.
         */
        force?: boolean;
        /**
         * If given fields for privacy policy agreements are not mandotory. Can only be used if setting is allowed in admin settings.
         */
        without_privacy_policy_agreement?: boolean;
    };
    url: '/persons';
};

export type CreatePersonErrors = {
    /**
     * Bad Request / Duplicate Person
     */
    400: {
        args?: Array<string>;
        errors?: Array<string>;
        message?: string;
        messageKey?: string;
        translatedMessage?: string;
    };
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Payment Required
     */
    402: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type CreatePersonError = CreatePersonErrors[keyof CreatePersonErrors];

export type CreatePersonResponses = {
    /**
     * New person
     */
    200: {
        data?: Person;
    };
};

export type CreatePersonResponse = CreatePersonResponses[keyof CreatePersonResponses];

export type GetPersonsBirthdaysData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Birthdays from that date on, defaults to yesterday
         */
        start_date?: string;
        /**
         * Birthdays up to that date, defaults to 30 days from now
         */
        end_date?: string;
        /**
         * The direction of the result set
         */
        direction?: 'forward' | 'backward';
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Number of results per page.
         */
        limit?: number;
        /**
         * Filter by campus ids
         */
        'campus_ids[]'?: Array<number>;
        /**
         * Filter by group ids
         */
        'group_ids[]'?: Array<number>;
        /**
         * Filter by people in my groups
         */
        my_groups?: boolean;
    };
    url: '/persons/birthdays';
};

export type GetPersonsBirthdaysErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetPersonsBirthdaysResponses = {
    200: {
        data: Array<{
            /**
             * Calculated age. (see note to that endpoint)
             */
            age: number;
            /**
             * Actually birthday
             */
            date: string;
            person?: {
                apiUrl: string;
                domainAttributes: {
                    firstName: string;
                    guid: string;
                    lastName: string;
                };
                domainIdentifier: string;
                domainType: string;
                frontendUrl: string;
                imageUrl: string;
                title: string;
            };
            /**
             * Type of Date
             */
            type: string;
        }>;
        meta: MetaCount;
    };
};

export type GetPersonsBirthdaysResponse = GetPersonsBirthdaysResponses[keyof GetPersonsBirthdaysResponses];

export type GetPersonsDuplicatesData = {
    body?: never;
    path?: never;
    query?: {
        reset_cache?: boolean;
    };
    url: '/persons/duplicates';
};

export type GetPersonsDuplicatesResponses = {
    /**
     * Ok
     */
    200: {
        data?: Array<{
            relationshipTypeId: number | null;
            relationships: Array<PersonDuplicate>;
        }>;
        meta?: {
            count?: number;
            duration?: number;
            evaluations?: number;
            memory_used?: string;
        };
    };
};

export type GetPersonsDuplicatesResponse = GetPersonsDuplicatesResponses[keyof GetPersonsDuplicatesResponses];

export type GetPersonsExportData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/persons/export';
};

export type GetPersonsExportErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetPersonsExportError = GetPersonsExportErrors[keyof GetPersonsExportErrors];

export type GetPersonPropertiesData = {
    /**
     * List all person IDs for which you want the property information. If empty, all person IDs are used
     */
    body?: {
        ids?: Array<number>;
    };
    path?: never;
    query?: never;
    url: '/persons/properties';
};

export type GetPersonPropertiesErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type GetPersonPropertiesResponses = {
    /**
     * Get properties for people. Key = Person ID, Value = Object with person properties
     */
    200: {
        data?: {
            [key: string]: PersonProperties;
        };
    };
};

export type GetPersonPropertiesResponse = GetPersonPropertiesResponses[keyof GetPersonPropertiesResponses];

export type GetPersonsRelationshipsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/persons/relationships';
};

export type GetPersonsRelationshipsErrors = {
    /**
     * Unauthorized
     */
    401: string;
};

export type GetPersonsRelationshipsError = GetPersonsRelationshipsErrors[keyof GetPersonsRelationshipsErrors];

export type GetPersonsRelationshipsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetPersonsRelationshipsResponse = GetPersonsRelationshipsResponses[keyof GetPersonsRelationshipsResponses];

export type GetPersonsSearchOldData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/persons/search_old';
};

export type GetPersonsSearchOldErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetPersonsSearchOldError = GetPersonsSearchOldErrors[keyof GetPersonsSearchOldErrors];

export type DeletePersonData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}';
};

export type DeletePersonErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type DeletePersonResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeletePersonResponse = DeletePersonResponses[keyof DeletePersonResponses];

export type GetPersonByIdData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}';
};

export type GetPersonByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetPersonByIdResponses = {
    /**
     * The person
     */
    200: {
        data?: Person;
    };
};

export type GetPersonByIdResponse = GetPersonByIdResponses[keyof GetPersonByIdResponses];

export type PatchPersonData = {
    /**
     * Include those fields you want to update and are allowed to write.
     */
    body: {
        addressAddition?: string;
        age?: number;
        baptisedBy?: string;
        birthName?: string;
        birthday?: string | null;
        birthplace?: string;
        campusId?: number;
        city?: string;
        cmsUserId?: string;
        country?: string;
        dateOfBaptism?: string | null;
        dateOfBelonging?: string | null;
        dateOfDeath?: string | null;
        dateOfEntry?: string | null;
        dateOfResign?: string | null;
        /**
         * Department IDs. At least one department MUST be set for a person. The last department ID cannot be deleted.
         */
        departmentIds?: Array<number>;
        email?: string;
        /**
         * Save many eMail addresses for person. If `emails` is present in request `email` is ignored.
         */
        emails?: Array<PersonEmail>;
        familyStatusId?: number | null;
        fax?: string;
        firstContact?: string | null;
        firstName?: string;
        growPathId?: number;
        job?: string;
        lastName?: string;
        mobile?: string;
        nationalityId?: number | null;
        nickname?: string;
        optigemId?: string;
        phonePrivate?: string;
        phoneWork?: string;
        placeOfBaptism?: string;
        /**
         * This object can be optional or required. Depending on your ChurchTools data security settings.
         */
        privacyPolicyAgreement?: {
            date?: string | null;
            typeId?: number | null;
            whoId?: number | null;
        };
        referredBy?: string;
        referredTo?: string;
        sexId?: number | null;
        statusId?: number;
        street?: string;
        title?: string;
        weddingDate?: string | null;
        zip?: string;
    };
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}';
};

export type PatchPersonErrors = {
    /**
     * Bad Request
     */
    400: {
        args?: Array<string>;
        errors?: Array<string>;
        message?: string;
        messageKey?: string;
        translatedMessage?: string;
    };
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PatchPersonError = PatchPersonErrors[keyof PatchPersonErrors];

export type PatchPersonResponses = {
    /**
     * The updated person
     */
    200: {
        data?: Person;
    };
};

export type PatchPersonResponse = PatchPersonResponses[keyof PatchPersonResponses];

export type GetPersonsAbsencesData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: {
        /**
         * Return entities starting from this date.
         */
        from?: DateString;
        /**
         * Return entities up to this date.
         */
        to?: DateString;
        order_direction?: 'ASC' | 'DESC';
    };
    url: '/persons/{personId}/absences';
};

export type GetPersonsAbsencesErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetPersonsAbsencesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Absence>;
        meta?: MetaCount;
    };
};

export type GetPersonsAbsencesResponse = GetPersonsAbsencesResponses[keyof GetPersonsAbsencesResponses];

export type PostPersonsAbsencesData = {
    /**
     * Absences can be all-day or with a specific time. Either `startDate`, `endDate`  or `startTime`, `endTime` MUST be present. If `*Time` is given, the `*Date` value will be ignored.
     */
    body?: {
        /**
         * ID of absence reason.
         */
        absenceReasonId: number;
        comment: string;
        /**
         * Date used for all-day absences. If endTime is present, endDate is ignored.
         */
        endDate?: string;
        endTime?: string;
        /**
         * Date used for all-day absences. If startTime is present, startDate is ignored.
         */
        startDate?: string;
        startTime?: string;
    };
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/absences';
};

export type PostPersonsAbsencesResponses = {
    /**
     * Created
     */
    201: {
        data?: Absence;
    };
};

export type PostPersonsAbsencesResponse = PostPersonsAbsencesResponses[keyof PostPersonsAbsencesResponses];

export type DeletePersonsAbsenceData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/persons/{personId}/absences/{id}';
};

export type DeletePersonsAbsenceErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type DeletePersonsAbsenceResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeletePersonsAbsenceResponse = DeletePersonsAbsenceResponses[keyof DeletePersonsAbsenceResponses];

export type GetPersonsAbsenceData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/persons/{personId}/absences/{id}';
};

export type GetPersonsAbsenceErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetPersonsAbsenceResponses = {
    /**
     * OK
     */
    200: {
        data?: Absence;
    };
};

export type GetPersonsAbsenceResponse = GetPersonsAbsenceResponses[keyof GetPersonsAbsenceResponses];

export type PutPersonsAbsenceData = {
    /**
     * Absences can be all-day or with a specific time. Either `startDate`, `endDate`  or `startTime`, `endTime` MUST be present. If `*Time` is given, the `*Date` value will be ignored.
     */
    body?: {
        absenceReasonId: number;
        comment: string;
        /**
         * If endTime is present, endDate is ignored.
         */
        endDate?: string;
        endTime?: string;
        /**
         * If startTime is present, startDate is ignored.
         */
        startDate?: string;
        startTime?: string;
    };
    path: {
        /**
         * ID of person
         */
        personId: number;
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/persons/{personId}/absences/{id}';
};

export type PutPersonsAbsenceErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type PutPersonsAbsenceResponses = {
    /**
     * OK
     */
    200: {
        data?: Absence;
    };
};

export type PutPersonsAbsenceResponse = PutPersonsAbsenceResponses[keyof PutPersonsAbsenceResponses];

export type PostPersonsPersonIdArchiveData = {
    body?: {
        /**
         * if true the person is archived, if false the archive operation is undone
         */
        archived?: boolean;
    };
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/archive';
};

export type PostPersonsPersonIdArchiveResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PostPersonsPersonIdArchiveResponse =
    PostPersonsPersonIdArchiveResponses[keyof PostPersonsPersonIdArchiveResponses];

export type GetPersonsPersonIdDevicesData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/devices';
};

export type GetPersonsPersonIdDevicesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetPersonsPersonIdDevicesError = GetPersonsPersonIdDevicesErrors[keyof GetPersonsPersonIdDevicesErrors];

export type GetPersonsPersonIdDevicesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Device>;
    };
};

export type GetPersonsPersonIdDevicesResponse =
    GetPersonsPersonIdDevicesResponses[keyof GetPersonsPersonIdDevicesResponses];

export type DeletePersonsPersonIdDevicesDeviceIdData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        deviceId: string;
    };
    query?: never;
    url: '/persons/{personId}/devices/{deviceId}';
};

export type DeletePersonsPersonIdDevicesDeviceIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type DeletePersonsPersonIdDevicesDeviceIdError =
    DeletePersonsPersonIdDevicesDeviceIdErrors[keyof DeletePersonsPersonIdDevicesDeviceIdErrors];

export type DeletePersonsPersonIdDevicesDeviceIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeletePersonsPersonIdDevicesDeviceIdResponse =
    DeletePersonsPersonIdDevicesDeviceIdResponses[keyof DeletePersonsPersonIdDevicesDeviceIdResponses];

export type GetDeviceForPersonData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        deviceId: string;
    };
    query?: never;
    url: '/persons/{personId}/devices/{deviceId}';
};

export type GetDeviceForPersonErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetDeviceForPersonResponses = {
    /**
     * OK
     */
    200: {
        data?: Device;
    };
};

export type GetDeviceForPersonResponse = GetDeviceForPersonResponses[keyof GetDeviceForPersonResponses];

export type PutPersonsPersonIdDevicesDeviceIdData = {
    /**
     * Device information.
     */
    body?: {
        /**
         * Push ID
         */
        pushId?: string;
        type: 'APN' | 'FCM';
        /**
         * App Version. (Semantic Versioning)
         */
        version?: string;
    };
    path: {
        /**
         * ID of person
         */
        personId: number;
        deviceId: string;
    };
    query?: never;
    url: '/persons/{personId}/devices/{deviceId}';
};

export type PutPersonsPersonIdDevicesDeviceIdErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PutPersonsPersonIdDevicesDeviceIdError =
    PutPersonsPersonIdDevicesDeviceIdErrors[keyof PutPersonsPersonIdDevicesDeviceIdErrors];

export type PutPersonsPersonIdDevicesDeviceIdResponses = {
    /**
     * All currently registered devices for that person.
     */
    200: {
        data?: Array<Device>;
        meta?: MetaCount;
    };
};

export type PutPersonsPersonIdDevicesDeviceIdResponse =
    PutPersonsPersonIdDevicesDeviceIdResponses[keyof PutPersonsPersonIdDevicesDeviceIdResponses];

export type GetPersonEventsData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/events';
};

export type GetPersonEventsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetPersonEventsError = GetPersonEventsErrors[keyof GetPersonEventsErrors];

export type GetPersonEventsResponses = {
    /**
     * Successful request
     */
    200: {
        data?: Event;
    };
};

export type GetPersonEventsResponse = GetPersonEventsResponses[keyof GetPersonEventsResponses];

export type GetPersonsEventServicesData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        /**
         * ID of Event
         */
        eventId: number;
    };
    query?: never;
    url: '/persons/{personId}/events/{eventId}/services';
};

export type GetPersonsEventServicesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetPersonsEventServicesError = GetPersonsEventServicesErrors[keyof GetPersonsEventServicesErrors];

export type GetAllForServiceData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        /**
         * ID of Event
         */
        eventId: number;
        serviceId: string;
    };
    query?: {
        /**
         * If set to true, service exchange requests from other users for the user are returned. Otherwise (default) requests from this user for other users are returned.
         */
        incoming?: boolean;
    };
    url: '/persons/{personId}/events/{eventId}/services/{serviceId}/exchangerequests';
};

export type GetAllForServiceResponses = {
    /**
     * OK
     */
    200: Array<ServiceExchangeRequest>;
};

export type GetAllForServiceResponse = GetAllForServiceResponses[keyof GetAllForServiceResponses];

export type PostPersonIdEventsEventIdServicesServiceIdExchangerequestsData = {
    body?: ServiceExchangeRequest;
    path: {
        /**
         * ID of person
         */
        personId: number;
        /**
         * ID of Event
         */
        eventId: number;
        serviceId: string;
    };
    query?: {
        /**
         * If set to true, service exchange requests from other users for the user are returned. Otherwise (default) requests from this user for other users are returned.
         */
        incoming?: boolean;
    };
    url: '/persons/{personId}/events/{eventId}/services/{serviceId}/exchangerequests';
};

export type PostPersonIdEventsEventIdServicesServiceIdExchangerequestsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetCandidatesData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        /**
         * ID of Event
         */
        eventId: number;
        serviceId: string;
    };
    query?: never;
    url: '/persons/{personId}/events/{eventId}/services/{serviceId}/exchangerequests/candidates';
};

export type GetCandidatesResponses = {
    /**
     * OK
     */
    200: {
        eventDate?: string;
        eventServiceId?: number;
        eventTitle?: string;
        /**
         * Person Domain Object
         */
        person?: {
            [key: string]: unknown;
        };
    };
};

export type GetCandidatesResponse = GetCandidatesResponses[keyof GetCandidatesResponses];

export type DeletePersonIdEventsEventIdServicesServiceIdExchangerequestsCopyData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        /**
         * ID of Event
         */
        eventId: number;
        serviceId: string;
        requestId: string;
    };
    query?: {
        /**
         * If set to true, the service exchange request gets deleted from database, otherwise (the default) it just gets a status of CANCELLED.
         */
        hardDelete?: boolean;
    };
    url: '/persons/{personId}/events/{eventId}/services/{serviceId}/exchangerequests/{requestId}';
};

export type DeletePersonIdEventsEventIdServicesServiceIdExchangerequestsCopyResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeletePersonIdEventsEventIdServicesServiceIdExchangerequestsCopyResponse =
    DeletePersonIdEventsEventIdServicesServiceIdExchangerequestsCopyResponses[keyof DeletePersonIdEventsEventIdServicesServiceIdExchangerequestsCopyResponses];

export type GetAllForPersonData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: {
        /**
         * If set to true, service exchange requests that the user requested are returned. Otherwise (default) requests from other users for the user are returned.
         */
        personIsRequester?: boolean;
    };
    url: '/persons/{personId}/exchangerequests';
};

export type GetAllForPersonResponses = {
    /**
     * OK
     */
    200: Array<ServiceExchangeRequest>;
};

export type GetAllForPersonResponse = GetAllForPersonResponses[keyof GetAllForPersonResponses];

export type DeletePersonIdExchangerequestsRequestIdData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        requestId: string;
    };
    query?: never;
    url: '/persons/{personId}/exchangerequests/{requestId}';
};

export type DeletePersonIdExchangerequestsRequestIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeletePersonIdExchangerequestsRequestIdResponse =
    DeletePersonIdExchangerequestsRequestIdResponses[keyof DeletePersonIdExchangerequestsRequestIdResponses];

export type PutPersonIdExchangerequestsRequestIdData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        requestId: string;
    };
    query?: never;
    url: '/persons/{personId}/exchangerequests/{requestId}';
};

export type PutPersonIdExchangerequestsRequestIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetPersonsPersonIdFollowupsData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: {
        /**
         * If set, the response will only include follow ups that have no done_date.
         */
        only_pending?: boolean;
    };
    url: '/persons/{personId}/followups';
};

export type GetPersonsPersonIdFollowupsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetPersonsPersonIdFollowupsError =
    GetPersonsPersonIdFollowupsErrors[keyof GetPersonsPersonIdFollowupsErrors];

export type GetPersonsPersonIdFollowupsResponses = {
    /**
     * All follow-ups of a person
     */
    200: {
        data?: Array<FollowUp2>;
        meta?: MetaCount;
    };
};

export type GetPersonsPersonIdFollowupsResponse =
    GetPersonsPersonIdFollowupsResponses[keyof GetPersonsPersonIdFollowupsResponses];

export type PostPersonsPersonIdFollowupsData = {
    body?: FollowUpCreate;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/followups';
};

export type PostPersonsPersonIdFollowupsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostPersonsPersonIdFollowupsError =
    PostPersonsPersonIdFollowupsErrors[keyof PostPersonsPersonIdFollowupsErrors];

export type PostPersonsPersonIdFollowupsResponses = {
    /**
     * OK
     */
    201: {
        data?: FollowUp2;
    };
};

export type PostPersonsPersonIdFollowupsResponse =
    PostPersonsPersonIdFollowupsResponses[keyof PostPersonsPersonIdFollowupsResponses];

export type GetPersonsPersonIdFollowupsStatisticsData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/followups/statistics';
};

export type GetPersonsPersonIdFollowupsStatisticsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetPersonsPersonIdFollowupsStatisticsError =
    GetPersonsPersonIdFollowupsStatisticsErrors[keyof GetPersonsPersonIdFollowupsStatisticsErrors];

export type GetPersonsPersonIdFollowupsStatisticsResponses = {
    /**
     * OK
     */
    200: {
        data: FollowUpStatistics;
    };
};

export type GetPersonsPersonIdFollowupsStatisticsResponse =
    GetPersonsPersonIdFollowupsStatisticsResponses[keyof GetPersonsPersonIdFollowupsStatisticsResponses];

export type GetAllGroupsForPersonData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: {
        /**
         * If set groups that reached their enddate +x days configured in the admin settings, are also shown.
         */
        show_overdue_groups?: boolean;
        /**
         * If set groups that have the status 'archived' are shown
         */
        show_inactive_groups?: boolean;
        /**
         * If set groups were the user has the group member status 'to_deleted' are shown.
         */
        show_to_delete_memberships?: boolean;
        /**
         * If set groups were the user has the group member status 'requested' or 'waiting' are shown.
         */
        show_requested_or_waiting_memberships?: boolean;
    };
    url: '/persons/{personId}/groups';
};

export type GetAllGroupsForPersonErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type GetAllGroupsForPersonResponses = {
    /**
     * The groups of the person
     */
    200: {
        data?: Array<GroupMember>;
        meta?: {
            count?: number;
        };
    };
};

export type GetAllGroupsForPersonResponse = GetAllGroupsForPersonResponses[keyof GetAllGroupsForPersonResponses];

export type InvitePersonData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: {
        /**
         * Url used in the mail sent to the user. Esample: https://homepage.de/$loginString/$userId
         */
        setPasswordUrlTemplate?: string;
    };
    url: '/persons/{personId}/invite';
};

export type InvitePersonErrors = {
    /**
     * Bad Request. Person has no eMail Adress.
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden. Permissions missing: global `invite person` or group internal `+invite persons`
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type InvitePersonResponses = {
    /**
     * Person successfully invited.
     */
    204: void;
};

export type InvitePersonResponse = InvitePersonResponses[keyof InvitePersonResponses];

export type GetPersonLoginstringData = {
    body?: never;
    path: {
        personId: string;
    };
    query?: never;
    url: '/persons/{personId}/loginstring';
};

export type GetPersonLoginstringErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetPersonLoginstringError = GetPersonLoginstringErrors[keyof GetPersonLoginstringErrors];

export type GetPersonLoginstringResponses = {
    /**
     * OK
     */
    200: {
        loginString?: string;
        personId?: string;
    };
};

export type GetPersonLoginstringResponse = GetPersonLoginstringResponses[keyof GetPersonLoginstringResponses];

export type DeletePersonLoginTokenData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/logintoken';
};

export type DeletePersonLoginTokenErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeletePersonLoginTokenError = DeletePersonLoginTokenErrors[keyof DeletePersonLoginTokenErrors];

export type DeletePersonLoginTokenResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeletePersonLoginTokenResponse = DeletePersonLoginTokenResponses[keyof DeletePersonLoginTokenResponses];

export type GetPersonsIdLogintokenData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/logintoken';
};

export type GetPersonsIdLogintokenErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Person Not Found
     */
    404: unknown;
};

export type GetPersonsIdLogintokenResponses = {
    200: {
        /**
         * Login Token
         */
        data: string;
    };
};

export type GetPersonsIdLogintokenResponse = GetPersonsIdLogintokenResponses[keyof GetPersonsIdLogintokenResponses];

export type GetPersonsPersonidMergeDuplicateidData = {
    body?: never;
    path: {
        /**
         * Id of the doublette person
         */
        duplicateId: string;
        /**
         * id of the original person
         */
        personId: string;
    };
    query?: never;
    url: '/persons/{personId}/merge/{duplicateId}';
};

export type GetPersonsPersonidMergeDuplicateidErrors = {
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Person not found
     */
    404: unknown;
};

export type GetPersonsPersonidMergeDuplicateidResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PatchPersonsPersonidMergeDuplicateidData = {
    /**
     * * the fields to be changed in the original person * see also `Patch: updatePerson`
     */
    body?: PersonUpdateable;
    path: {
        /**
         * Id of the doublette person
         */
        duplicateId: string;
        /**
         * id of the original person
         */
        personId: string;
    };
    query?: never;
    url: '/persons/{personId}/merge/{duplicateId}';
};

export type PatchPersonsPersonidMergeDuplicateidResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutPersonPasswordData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/password';
};

export type PutPersonPasswordErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutPersonPasswordError = PutPersonPasswordErrors[keyof PutPersonPasswordErrors];

export type GetPersonsPersonIdPostsData = {
    body?: never;
    path: {
        personId: string;
    };
    query?: {
        /**
         * Can only be used if the endpoint is called with the personId of the currently logged in user. If a different personId is used in combination with filter[] the result will be empty.
         */
        'filter[]'?: Array<PersonPostsFilterParam>;
        /**
         * Number of results per page.
         */
        limit?: number;
        /**
         * If set, only posts created before this date are returned. The date must be in RFC3339 format (Zulu-Date).
         */
        before?: ZuluDate;
        /**
         * If set, posts created at the "before" date are included in the result, if the guids of the posts are lexically smaller than the last_post_indentifier. Will be ignored if "before" is not set.
         */
        last_post_indentifier?: string;
        /**
         * If set, only posts created after this date are returned. The date must be in RFC3339 format (Zulu-Date).
         */
        after?: ZuluDate;
    };
    url: '/persons/{personId}/posts';
};

export type GetPersonsPersonIdPostsErrors = {
    /**
     * Unauthorized
     */
    401: string;
};

export type GetPersonsPersonIdPostsError = GetPersonsPersonIdPostsErrors[keyof GetPersonsPersonIdPostsErrors];

export type GetPersonsPersonIdPostsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Post>;
    };
};

export type GetPersonsPersonIdPostsResponse = GetPersonsPersonIdPostsResponses[keyof GetPersonsPersonIdPostsResponses];

export type GetPersonsPersonIdPoststatisticsData = {
    body?: never;
    path: {
        personId: string;
    };
    query?: never;
    url: '/persons/{personId}/poststatistics';
};

export type GetPersonsPersonIdPoststatisticsErrors = {
    /**
     * Unauthorized
     */
    401: string;
};

export type GetPersonsPersonIdPoststatisticsError =
    GetPersonsPersonIdPoststatisticsErrors[keyof GetPersonsPersonIdPoststatisticsErrors];

export type GetPersonsPersonIdPoststatisticsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<PersonPostStatistics>;
    };
};

export type GetPersonsPersonIdPoststatisticsResponse =
    GetPersonsPersonIdPoststatisticsResponses[keyof GetPersonsPersonIdPoststatisticsResponses];

export type DeletePersonPrivacyPolicyData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/privacypolicy';
};

export type DeletePersonPrivacyPolicyErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeletePersonPrivacyPolicyError = DeletePersonPrivacyPolicyErrors[keyof DeletePersonPrivacyPolicyErrors];

export type DeletePersonPrivacyPolicyResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeletePersonPrivacyPolicyResponse =
    DeletePersonPrivacyPolicyResponses[keyof DeletePersonPrivacyPolicyResponses];

export type GetPersonPrivacyPolicyData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/privacypolicy';
};

export type GetPersonPrivacyPolicyErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetPersonPrivacyPolicyError = GetPersonPrivacyPolicyErrors[keyof GetPersonPrivacyPolicyErrors];

export type GetPersonPrivacyPolicyResponses = {
    /**
     * OK
     */
    200: {
        data?: PersonPrivacyPolicy;
    };
};

export type GetPersonPrivacyPolicyResponse = GetPersonPrivacyPolicyResponses[keyof GetPersonPrivacyPolicyResponses];

export type PutPersonPrivacyPolicyData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/privacypolicy';
};

export type PutPersonPrivacyPolicyErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutPersonPrivacyPolicyError = PutPersonPrivacyPolicyErrors[keyof PutPersonPrivacyPolicyErrors];

export type GetPersonRelationshipsData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/relationships';
};

export type GetPersonRelationshipsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetPersonRelationshipsResponses = {
    /**
     * Relationships of person
     */
    200: {
        data?: Array<PersonRelationship>;
    };
};

export type GetPersonRelationshipsResponse = GetPersonRelationshipsResponses[keyof GetPersonRelationshipsResponses];

export type GetOpenServiceRequestsForPersonData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: {
        /**
         * If set to true, only service requests still future are returned (no matter which state). Otherwise (default), open requests from past and future are returned.
         */
        only_future?: boolean;
    };
    url: '/persons/{personId}/servicerequests';
};

export type GetOpenServiceRequestsForPersonErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetOpenServiceRequestsForPersonError =
    GetOpenServiceRequestsForPersonErrors[keyof GetOpenServiceRequestsForPersonErrors];

export type GetOpenServiceRequestsForPersonResponses = {
    /**
     * All service requests for this person
     */
    200: {
        data?: Array<ServiceRequest>;
    };
};

export type GetOpenServiceRequestsForPersonResponse =
    GetOpenServiceRequestsForPersonResponses[keyof GetOpenServiceRequestsForPersonResponses];

export type DeclineServiceRequestByIdData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        /**
         * ID of a service request
         */
        requestId: number;
    };
    query?: {
        /**
         * Comment
         */
        comment?: string;
    };
    url: '/persons/{personId}/servicerequests/{requestId}';
};

export type DeclineServiceRequestByIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type DeclineServiceRequestByIdError = DeclineServiceRequestByIdErrors[keyof DeclineServiceRequestByIdErrors];

export type DeclineServiceRequestByIdResponses = {
    /**
     * The service request has been declined.
     */
    204: void;
};

export type DeclineServiceRequestByIdResponse =
    DeclineServiceRequestByIdResponses[keyof DeclineServiceRequestByIdResponses];

export type GetServiceRequestByIdData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        /**
         * ID of a service request
         */
        requestId: number;
    };
    query?: never;
    url: '/persons/{personId}/servicerequests/{requestId}';
};

export type GetServiceRequestByIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetServiceRequestByIdError = GetServiceRequestByIdErrors[keyof GetServiceRequestByIdErrors];

export type GetServiceRequestByIdResponses = {
    /**
     * A specific service request for this person
     */
    200: {
        data?: ServiceRequest;
    };
};

export type GetServiceRequestByIdResponse = GetServiceRequestByIdResponses[keyof GetServiceRequestByIdResponses];

export type UpdateServiceRequestByIdData = {
    /**
     * Send the agreed state and optionally a comment.
     */
    body: {
        /**
         * Only true is allowed when updating.
         */
        agreed?: boolean;
        comment?: string;
    };
    path: {
        /**
         * ID of person
         */
        personId: number;
        /**
         * ID of a service request
         */
        requestId: number;
    };
    query?: never;
    url: '/persons/{personId}/servicerequests/{requestId}';
};

export type UpdateServiceRequestByIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type UpdateServiceRequestByIdError = UpdateServiceRequestByIdErrors[keyof UpdateServiceRequestByIdErrors];

export type UpdateServiceRequestByIdResponses = {
    /**
     * The updated service request.
     */
    200: {
        data?: ServiceRequest;
    };
};

export type UpdateServiceRequestByIdResponse =
    UpdateServiceRequestByIdResponses[keyof UpdateServiceRequestByIdResponses];

export type UndoServiceRequestByIdData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        /**
         * ID of a service request
         */
        requestId: number;
    };
    query?: never;
    url: '/persons/{personId}/servicerequests/{requestId}/undo';
};

export type UndoServiceRequestByIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type UndoServiceRequestByIdError = UndoServiceRequestByIdErrors[keyof UndoServiceRequestByIdErrors];

export type UndoServiceRequestByIdResponses = {
    /**
     * The updated service request.
     */
    200: {
        data?: ServiceRequest;
    };
};

export type UndoServiceRequestByIdResponse = UndoServiceRequestByIdResponses[keyof UndoServiceRequestByIdResponses];

export type GetAllPersonSettingsData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/settings';
};

export type GetAllPersonSettingsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllPersonSettingsError = GetAllPersonSettingsErrors[keyof GetAllPersonSettingsErrors];

export type GetAllPersonSettingsResponses = {
    /**
     * All person settings
     */
    200: {
        data?: Array<PersonSetting>;
    };
};

export type GetAllPersonSettingsResponse = GetAllPersonSettingsResponses[keyof GetAllPersonSettingsResponses];

export type DeletePersonTwofactorData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/settings/twofactor';
};

export type DeletePersonTwofactorErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeletePersonTwofactorError = DeletePersonTwofactorErrors[keyof DeletePersonTwofactorErrors];

export type DeletePersonTwofactorResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeletePersonTwofactorResponse = DeletePersonTwofactorResponses[keyof DeletePersonTwofactorResponses];

export type GetPersonTwofactorData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/settings/twofactor';
};

export type GetPersonTwofactorErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetPersonTwofactorError = GetPersonTwofactorErrors[keyof GetPersonTwofactorErrors];

export type PostPersonTwofactorData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/settings/twofactor';
};

export type PostPersonTwofactorErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostPersonTwofactorError = PostPersonTwofactorErrors[keyof PostPersonTwofactorErrors];

export type PutPersonTwofactorData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/settings/twofactor';
};

export type PutPersonTwofactorErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutPersonTwofactorError = PutPersonTwofactorErrors[keyof PutPersonTwofactorErrors];

export type GetPersonTwofactorForceData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/settings/twofactor/force';
};

export type GetPersonTwofactorForceErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetPersonTwofactorForceError = GetPersonTwofactorForceErrors[keyof GetPersonTwofactorForceErrors];

export type PutPersonTwofactorForceData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/settings/twofactor/force';
};

export type PutPersonTwofactorForceErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutPersonTwofactorForceError = PutPersonTwofactorForceErrors[keyof PutPersonTwofactorForceErrors];

export type GetPersonModuleSettingsData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        /**
         * Module name like `churchdb` or `churchservice`
         */
        module: string;
    };
    query?: never;
    url: '/persons/{personId}/settings/{module}';
};

export type GetPersonModuleSettingsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetPersonModuleSettingsError = GetPersonModuleSettingsErrors[keyof GetPersonModuleSettingsErrors];

export type GetPersonModuleSettingsResponses = {
    /**
     * Array of person settings for this module
     */
    200: {
        data?: Array<PersonSetting>;
    };
};

export type GetPersonModuleSettingsResponse = GetPersonModuleSettingsResponses[keyof GetPersonModuleSettingsResponses];

export type DeletePersonSettingData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        /**
         * Attribute name of setting
         */
        attribute: string;
        /**
         * Module name like `churchdb` or `churchservice`
         */
        module: string;
    };
    query?: never;
    url: '/persons/{personId}/settings/{module}/{attribute}';
};

export type DeletePersonSettingErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type DeletePersonSettingError = DeletePersonSettingErrors[keyof DeletePersonSettingErrors];

export type DeletePersonSettingResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeletePersonSettingResponse = DeletePersonSettingResponses[keyof DeletePersonSettingResponses];

export type GetPersonSettingData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        /**
         * Attribute name of setting
         */
        attribute: string;
        /**
         * Module name like `churchdb` or `churchservice`
         */
        module: string;
    };
    query?: never;
    url: '/persons/{personId}/settings/{module}/{attribute}';
};

export type GetPersonSettingErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetPersonSettingError = GetPersonSettingErrors[keyof GetPersonSettingErrors];

export type GetPersonSettingResponses = {
    /**
     * Successful request
     */
    200: {
        data?: PersonSetting;
    };
};

export type GetPersonSettingResponse = GetPersonSettingResponses[keyof GetPersonSettingResponses];

export type UpdatePersonSettingData = {
    body?: {
        value?: string;
    };
    path: {
        /**
         * ID of person
         */
        personId: number;
        /**
         * Attribute name of setting
         */
        attribute: string;
        /**
         * Module name like `churchdb` or `churchservice`
         */
        module: string;
    };
    query?: never;
    url: '/persons/{personId}/settings/{module}/{attribute}';
};

export type UpdatePersonSettingErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type UpdatePersonSettingError = UpdatePersonSettingErrors[keyof UpdatePersonSettingErrors];

export type UpdatePersonSettingResponses = {
    /**
     * Successfully created/updated
     */
    200: {
        data?: PersonSetting;
    };
};

export type UpdatePersonSettingResponse = UpdatePersonSettingResponses[keyof UpdatePersonSettingResponses];

export type GetPersonTagsData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/persons/{personId}/tags';
};

export type GetPersonTagsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetPersonTagsError = GetPersonTagsErrors[keyof GetPersonTagsErrors];

export type GetPersonTagsResponses = {
    /**
     * Tags of person
     */
    200: {
        data?: Array<Tag>;
    };
};

export type GetPersonTagsResponse = GetPersonTagsResponses[keyof GetPersonTagsResponses];

export type GetPostGroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/post/groups';
};

export type GetPostGroupsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetPostGroupsError = GetPostGroupsErrors[keyof GetPostGroupsErrors];

export type GetPostGroupsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<PossiblePostGroup>;
        meta?: MetaCount;
    };
};

export type GetPostGroupsResponse = GetPostGroupsResponses[keyof GetPostGroupsResponses];

export type GetPostHiddenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/post/hidden';
};

export type GetPostHiddenErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetPostHiddenError = GetPostHiddenErrors[keyof GetPostHiddenErrors];

export type GetPostHiddenResponses = {
    /**
     * OK
     */
    200: {
        data: Array<DomainObjectGroup | DomainObjectPerson | DomainObjectPost>;
    };
};

export type GetPostHiddenResponse = GetPostHiddenResponses[keyof GetPostHiddenResponses];

export type DeletePostHiddenDomaintypeDomainidData = {
    body?: never;
    path: {
        domainType: 'post' | 'actor' | 'group';
        domainId: number;
    };
    query?: never;
    url: '/post/hidden/{domainType}/{domainId}';
};

export type DeletePostHiddenDomaintypeDomainidErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type DeletePostHiddenDomaintypeDomainidError =
    DeletePostHiddenDomaintypeDomainidErrors[keyof DeletePostHiddenDomaintypeDomainidErrors];

export type DeletePostHiddenDomaintypeDomainidResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeletePostHiddenDomaintypeDomainidResponse =
    DeletePostHiddenDomaintypeDomainidResponses[keyof DeletePostHiddenDomaintypeDomainidResponses];

export type GetPostLinkingsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filters for which posts the linkings should be loaded.
         */
        'post_ids[]'?: Array<number>;
    };
    url: '/post/linkings';
};

export type GetPostLinkingsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetPostLinkingsError = GetPostLinkingsErrors[keyof GetPostLinkingsErrors];

export type GetPostLinkingsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Linking>;
        meta?: MetaCount;
    };
};

export type GetPostLinkingsResponse = GetPostLinkingsResponses[keyof GetPostLinkingsResponses];

export type GetPostReportsData = {
    body?: never;
    path?: never;
    query?: {
        domain_type?: 'post' | 'post_comment';
        domain_id?: number;
        status?: 'pending' | 'accepted' | 'declined' | 'pending-again';
    };
    url: '/post/reports';
};

export type GetPostReportsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetPostReportsError = GetPostReportsErrors[keyof GetPostReportsErrors];

export type GetPostReportsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<ReportObject>;
        meta?: MetaCount;
    };
};

export type GetPostReportsResponse = GetPostReportsResponses[keyof GetPostReportsResponses];

export type PostPostReportsData = {
    body?: ReportCreate;
    path?: never;
    query?: never;
    url: '/post/reports';
};

export type PostPostReportsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostPostReportsError = PostPostReportsErrors[keyof PostPostReportsErrors];

export type PostPostReportsResponses = {
    /**
     * OK
     */
    201: {
        data?: Report;
    };
};

export type PostPostReportsResponse = PostPostReportsResponses[keyof PostPostReportsResponses];

export type PutPostReportsAnswerData = {
    body?: ReportAnswer;
    path?: never;
    query?: never;
    url: '/post/reports/answer';
};

export type PutPostReportsAnswerErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PutPostReportsAnswerError = PutPostReportsAnswerErrors[keyof PutPostReportsAnswerErrors];

export type PutPostReportsAnswerResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PutPostReportsAnswerResponse = PutPostReportsAnswerResponses[keyof PutPostReportsAnswerResponses];

export type SearchPostsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The query string to search for in post title and content
         */
        query?: string;
        /**
         * The order the posts are returned in.
         */
        order_by?: 'publishedDate' | 'relevance';
        /**
         * The order direction. Only works for order_by publishedDate.
         */
        order_direction?: 'ASC' | 'DESC';
        /**
         * If set, only posts created before this date are returned. The date must be in RFC3339 format (Zulu-Date).
         */
        before?: ZuluDate;
        /**
         * If set, only posts created after this date are returned. The date must be in RFC3339 format (Zulu-Date).
         */
        after?: ZuluDate;
        /**
         * If set, only posts of these campuses are returned. If not set, posts of all campuses are returned.
         */
        'campus_ids[]'?: Array<number>;
        /**
         * If set, only posts by these persons are returned. If not set, posts by all persons are returned.
         */
        'actor_ids[]'?: Array<number>;
        /**
         * If set, only posts are returned that belong to groups with this visibility.
         */
        group_visibility?: 'hidden' | 'internal' | 'public' | 'restricted';
        /**
         * If set, only posts with that visibility are returned.
         */
        post_visibility?: 'group_intern' | 'group_visible';
        /**
         * If set, only posts of these groups are returned. If not set, posts of all groups are returned.
         */
        'group_ids[]'?: Array<number>;
        /**
         * If set, the response will include the specified data.
         */
        include?: Array<'comments' | 'reactions' | 'linkings'>;
        /**
         * If set to true, only posts of groups the user is member of are returned. If not set, posts of all groups are returned.
         */
        only_my_groups?: boolean;
    };
    url: '/post/search';
};

export type SearchPostsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type SearchPostsError = SearchPostsErrors[keyof SearchPostsErrors];

export type SearchPostsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Post>;
        meta?: MetaPagination;
    };
};

export type SearchPostsResponse = SearchPostsResponses[keyof SearchPostsResponses];

export type GetPostsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * If set, only posts created before this date are returned. The date must be in RFC3339 format (Zulu-Date).
         */
        before?: ZuluDate;
        /**
         * If set, posts created at the "before" date are included in the result, if the guids of the posts are lexically smaller than the last_post_indentifier. Will be ignored if "before" is not set.
         */
        last_post_indentifier?: string;
        /**
         * If set, only posts created after this date are returned. The date must be in RFC3339 format (Zulu-Date).
         */
        after?: ZuluDate;
        /**
         * If set, only posts of this campus are returned. If not set, posts of all campuses are returned.
         * @deprecated
         */
        campus_id?: number;
        /**
         * If set, only posts of these campuses are returned. If not set, posts of all campuses are returned.
         */
        'campus_ids[]'?: Array<number>;
        /**
         * If set, only posts by these persons are returned. If not set, posts by all persons are returned.
         */
        'actor_ids[]'?: Array<number>;
        /**
         * If set, only posts are returned that belong to groups with this visibility.
         */
        group_visibility?: 'hidden' | 'intern' | 'public' | 'restricted';
        /**
         * If set, only posts with that visibility are returned.
         */
        post_visibility?: 'group_intern' | 'group_visible';
        /**
         * If set, only posts of these groups are returned. If not set, posts of all groups are returned.
         */
        'group_ids[]'?: Array<number>;
        /**
         * If set, the response will include the specified data.
         */
        'include[]'?: Array<'comments' | 'reactions' | 'linkings'>;
        /**
         * Number of results per page.
         */
        limit?: number;
        /**
         * If set to true, only posts of groups the user is member of are returned. If not set, posts of all groups are returned.
         */
        only_my_groups?: boolean;
    };
    url: '/posts';
};

export type GetPostsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetPostsError = GetPostsErrors[keyof GetPostsErrors];

export type GetPostsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Post>;
        meta?: MetaCount;
    };
};

export type GetPostsResponse = GetPostsResponses[keyof GetPostsResponses];

export type PostPostsData = {
    body?: PostCreate;
    path?: never;
    query?: never;
    url: '/posts';
};

export type PostPostsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostPostsError = PostPostsErrors[keyof PostPostsErrors];

export type PostPostsResponses = {
    /**
     * OK
     */
    200: {
        data?: Post;
    };
};

export type PostPostsResponse = PostPostsResponses[keyof PostPostsResponses];

export type DeletePostsPostIdData = {
    body?: never;
    path: {
        /**
         * ID of post
         */
        postId: number;
    };
    query: {
        /**
         * If set to true, the post will not be deleted but the response will contain the result of the deletion.
         */
        dryRun: boolean;
    };
    url: '/posts/{postId}';
};

export type DeletePostsPostIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeletePostsPostIdError = DeletePostsPostIdErrors[keyof DeletePostsPostIdErrors];

export type DeletePostsPostIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeletePostsPostIdResponse = DeletePostsPostIdResponses[keyof DeletePostsPostIdResponses];

export type GetPostsPostIdData = {
    body?: never;
    path: {
        /**
         * ID of post
         */
        postId: number;
    };
    query?: {
        /**
         * If set, the response will include the specified data.
         */
        include?: Array<'comments' | 'reactions'>;
    };
    url: '/posts/{postId}';
};

export type GetPostsPostIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetPostsPostIdError = GetPostsPostIdErrors[keyof GetPostsPostIdErrors];

export type GetPostsPostIdResponses = {
    /**
     * Updated transaction
     */
    200: {
        data?: Post;
    };
};

export type GetPostsPostIdResponse = GetPostsPostIdResponses[keyof GetPostsPostIdResponses];

export type PatchPostsPostIdData = {
    body?: PostUpdate;
    path: {
        /**
         * ID of post
         */
        postId: number;
    };
    query?: never;
    url: '/posts/{postId}';
};

export type PatchPostsPostIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * A conflict occurred between the request and the current state of the resource.
     */
    409: unknown;
};

export type PatchPostsPostIdError = PatchPostsPostIdErrors[keyof PatchPostsPostIdErrors];

export type PatchPostsPostIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Post;
    };
};

export type PatchPostsPostIdResponse = PatchPostsPostIdResponses[keyof PatchPostsPostIdResponses];

export type GetPostsPostIdCommentsData = {
    body?: never;
    path: {
        /**
         * ID of post
         */
        postId: number;
    };
    query?: never;
    url: '/posts/{postId}/comments';
};

export type GetPostsPostIdCommentsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetPostsPostIdCommentsError = GetPostsPostIdCommentsErrors[keyof GetPostsPostIdCommentsErrors];

export type GetPostsPostIdCommentsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<PostComment>;
    };
};

export type GetPostsPostIdCommentsResponse = GetPostsPostIdCommentsResponses[keyof GetPostsPostIdCommentsResponses];

export type PostPostsPostIdCommentsData = {
    body?: PostCommentCreate;
    path: {
        /**
         * ID of post
         */
        postId: number;
    };
    query?: never;
    url: '/posts/{postId}/comments';
};

export type PostPostsPostIdCommentsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostPostsPostIdCommentsError = PostPostsPostIdCommentsErrors[keyof PostPostsPostIdCommentsErrors];

export type PostPostsPostIdCommentsResponses = {
    /**
     * OK
     */
    201: {
        data?: PostComment;
    };
};

export type PostPostsPostIdCommentsResponse = PostPostsPostIdCommentsResponses[keyof PostPostsPostIdCommentsResponses];

export type DeletePostsPostIdCommentsCommentIdData = {
    body?: never;
    path: {
        /**
         * ID of post
         */
        postId: number;
        commentId: number;
    };
    query?: never;
    url: '/posts/{postId}/comments/{commentId}';
};

export type DeletePostsPostIdCommentsCommentIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeletePostsPostIdCommentsCommentIdError =
    DeletePostsPostIdCommentsCommentIdErrors[keyof DeletePostsPostIdCommentsCommentIdErrors];

export type DeletePostsPostIdCommentsCommentIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeletePostsPostIdCommentsCommentIdResponse =
    DeletePostsPostIdCommentsCommentIdResponses[keyof DeletePostsPostIdCommentsCommentIdResponses];

export type PutPostsPostIdExpireData = {
    body?: never;
    path: {
        /**
         * ID of post
         */
        postId: number;
    };
    query?: never;
    url: '/posts/{postId}/expire';
};

export type PutPostsPostIdExpireErrors = {
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutPostsPostIdExpireResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PutPostsPostIdExpireResponse = PutPostsPostIdExpireResponses[keyof PutPostsPostIdExpireResponses];

export type PutPostsPostIdHiddenDomainTypeData = {
    body?: never;
    path: {
        /**
         * ID of post
         */
        postId: number;
        /**
         * The type of the domain where the post is hidden. This can be `actor`, `post`, or `group`.
         */
        domainType: 'post' | 'group' | 'actor';
    };
    query?: never;
    url: '/posts/{postId}/hidden/{domainType}';
};

export type PutPostsPostIdHiddenDomainTypeErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutPostsPostIdHiddenDomainTypeError =
    PutPostsPostIdHiddenDomainTypeErrors[keyof PutPostsPostIdHiddenDomainTypeErrors];

export type GetPostsPostIdReactionsData = {
    body?: never;
    path: {
        /**
         * ID of post
         */
        postId: number;
    };
    query?: never;
    url: '/posts/{postId}/reactions';
};

export type GetPostsPostIdReactionsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetPostsPostIdReactionsError = GetPostsPostIdReactionsErrors[keyof GetPostsPostIdReactionsErrors];

export type GetPostsPostIdReactionsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<PostReaction>;
    };
};

export type GetPostsPostIdReactionsResponse = GetPostsPostIdReactionsResponses[keyof GetPostsPostIdReactionsResponses];

export type DeletePostsPostIdReactionsEmojiPersonsPersonIdData = {
    body?: never;
    path: {
        /**
         * ID of post
         */
        postId: number;
        emoji: string;
        personId: string;
    };
    query?: never;
    url: '/posts/{postId}/reactions/{emoji}/persons/{personId}';
};

export type DeletePostsPostIdReactionsEmojiPersonsPersonIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeletePostsPostIdReactionsEmojiPersonsPersonIdError =
    DeletePostsPostIdReactionsEmojiPersonsPersonIdErrors[keyof DeletePostsPostIdReactionsEmojiPersonsPersonIdErrors];

export type DeletePostsPostIdReactionsEmojiPersonsPersonIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeletePostsPostIdReactionsEmojiPersonsPersonIdResponse =
    DeletePostsPostIdReactionsEmojiPersonsPersonIdResponses[keyof DeletePostsPostIdReactionsEmojiPersonsPersonIdResponses];

export type PutPostsPostIdReactionsEmojiPersonsPersonIdData = {
    body?: never;
    path: {
        /**
         * ID of post
         */
        postId: number;
        emoji: string;
        personId: string;
    };
    query?: never;
    url: '/posts/{postId}/reactions/{emoji}/persons/{personId}';
};

export type PutPostsPostIdReactionsEmojiPersonsPersonIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutPostsPostIdReactionsEmojiPersonsPersonIdError =
    PutPostsPostIdReactionsEmojiPersonsPersonIdErrors[keyof PutPostsPostIdReactionsEmojiPersonsPersonIdErrors];

export type PutPostsPostIdReactionsEmojiPersonsPersonIdResponses = {
    /**
     * OK
     */
    201: {
        data?: PostReaction;
    };
};

export type PutPostsPostIdReactionsEmojiPersonsPersonIdResponse =
    PutPostsPostIdReactionsEmojiPersonsPersonIdResponses[keyof PutPostsPostIdReactionsEmojiPersonsPersonIdResponses];

export type GetPrMasterdataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/pr/masterdata';
};

export type GetPrMasterdataErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetPrMasterdataError = GetPrMasterdataErrors[keyof GetPrMasterdataErrors];

export type GetPrMasterdataResponses = {
    /**
     * OK
     */
    201: {
        data?: PublicRelationsMasterData;
        meta?: {
            associations?: number;
            denominations?: number;
            groupHomepages?: number;
            socialMedia?: number;
            tags?: number;
        };
    };
};

export type GetPrMasterdataResponse = GetPrMasterdataResponses[keyof GetPrMasterdataResponses];

export type GetAllPrintersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/printers';
};

export type GetAllPrintersErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllPrintersError = GetAllPrintersErrors[keyof GetAllPrintersErrors];

export type GetAllPrintersResponses = {
    /**
     * Successful request
     */
    200: {
        data?: Array<Printer>;
        meta?: MetaPagination;
    };
};

export type GetAllPrintersResponse = GetAllPrintersResponses[keyof GetAllPrintersResponses];

export type GetApiProfilesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/profiles';
};

export type GetApiProfilesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Profile>;
        meta?: {
            churchGuid?: string;
            churchName?: string;
            churchSlug?: string;
            count?: number;
        };
    };
};

export type GetApiProfilesResponse = GetApiProfilesResponses[keyof GetApiProfilesResponses];

export type GetProfilesChurchData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/profiles/church';
};

export type GetProfilesChurchResponses = {
    /**
     * OK
     */
    200: {
        data?: Profile;
    };
};

export type GetProfilesChurchResponse = GetProfilesChurchResponses[keyof GetProfilesChurchResponses];

export type PutProfilesChurchData = {
    body?: ProfileUpdate;
    path?: never;
    query?: never;
    url: '/profiles/church';
};

export type PutProfilesChurchResponses = {
    /**
     * OK
     */
    200: {
        data?: Campus;
    };
};

export type PutProfilesChurchResponse = PutProfilesChurchResponses[keyof PutProfilesChurchResponses];

export type GetSlugcheckData = {
    body?: never;
    path: {
        /**
         * Slug to check
         */
        slug: string;
    };
    query?: never;
    url: '/profiles/slugcheck/{slug}';
};

export type GetSlugcheckErrors = {
    /**
     * Validation Error. Slugs can only use lower case characters [a-z], numbers [0-9] or hyphens [-].
     */
    400: unknown;
    /**
     * Conflict. Slug already in use
     */
    409: unknown;
};

export type GetSlugcheckResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetPublicgroupData = {
    body?: never;
    path: {
        groupId: string;
    };
    query?: never;
    url: '/publicgroups/{groupId}';
};

export type GetPublicgroupResponses = {
    /**
     * OK
     */
    200: {
        data?: {
            allowWaitinglist?: boolean;
            autoAccept?: boolean;
            canSignUp?: boolean;
            currentMemberCount?: number;
            id?: number;
            information?: {
                ageGroups?: Array<AgeGroup>;
                campus?: Campus;
                groupCategory?: {
                    id?: number;
                    name?: string;
                    nameTranslated?: string;
                    sortKey?: number;
                };
                groupPlaces?: Array<Place>;
                imageUrl?: string;
                meetingTime?: string;
                note?: string;
                targetGroup?: TargetGroup;
                weekday?: number | null;
            };
            maxMemberCount?: number;
            name?: string;
            requestedPlacesCount?: number;
            requestedWaitinglistPlacesCount?: number;
            settings?: {
                allowChildRegistration?: boolean;
                allowOtherRegistration?: boolean;
                allowSameemailRegistration?: boolean;
                allowSpouseRegistration?: boolean;
                hideContactLeader?: boolean;
                hideLogin?: boolean;
                showStreet?: boolean;
                signUpNotificationSent?: string | null;
            };
            signUpConditions?: {
                canContactLeader?: boolean;
                defaultRoleSetInGroup?: boolean;
                endDateNotPassed?: boolean;
                groupAllowsWaitinglist?: boolean;
                groupHasLeader?: boolean;
                groupHasSpaceForRequests?: boolean;
                groupHasSpaceOnWaitinglist?: boolean;
                groupIsActive?: boolean;
                groupIsNotFull?: boolean;
                groupIsNotHidden?: boolean;
                groupIsOpenForMembers?: boolean;
                groupIsPublic?: boolean;
                newPersonDepartmentIsSet?: boolean;
                newPersonStationIsSet?: boolean;
                newPersonStatusIsSet?: boolean;
            };
            signUpHeadline?: string;
            signUpPersons?: Array<{
                person?: DomainObjectPerson;
                status?: string;
            }>;
            waitinglistMaxPersons?: number | null;
        };
    };
};

export type GetPublicgroupResponse = GetPublicgroupResponses[keyof GetPublicgroupResponses];

export type GetPublicgroupsGroupIdFormData = {
    body?: never;
    path: {
        /**
         * Group ID of the public group
         */
        groupId: string;
    };
    query: {
        /**
         * Sign Up Token
         */
        token: string;
        /**
         * The name for which the signup should be made
         */
        personId: string;
    };
    url: '/publicgroups/{groupId}/form';
};

export type GetPublicgroupsGroupIdFormErrors = {
    /**
     * The sign up token was not found. Use /publicgroups/{groupId}/token to get a sign up token.
     */
    404: unknown;
};

export type GetPublicgroupsGroupIdFormResponses = {
    /**
     * OK
     */
    200: PublicGroupFormResult;
};

export type GetPublicgroupsGroupIdFormResponse =
    GetPublicgroupsGroupIdFormResponses[keyof GetPublicgroupsGroupIdFormResponses];

export type PostPublicgroupsGroupIdMailToLeadersData = {
    body?: {
        /**
         * E-Mail Address of the sender.
         */
        email: string;
        /**
         * Message to be sent.
         */
        message: string;
        /**
         * Name of the sender.
         */
        name: string;
    };
    path: {
        /**
         * Group ID of the public group
         */
        groupId: string;
    };
    query?: never;
    url: '/publicgroups/{groupId}/mailToLeaders';
};

export type PostPublicgroupsGroupIdMailToLeadersErrors = {
    /**
     * Bad Request
     */
    400: unknown;
};

export type PostPublicgroupsGroupIdMailToLeadersResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetPublicgroupsGroupIdPossiblerequestersData = {
    body?: never;
    path: {
        groupId: string;
    };
    query: {
        /**
         * The signup token for the registration
         */
        token: string;
    };
    url: '/publicgroups/{groupId}/possiblerequesters';
};

export type GetPublicgroupsGroupIdPossiblerequestersResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<DomainObjectPerson>;
    };
};

export type GetPublicgroupsGroupIdPossiblerequestersResponse =
    GetPublicgroupsGroupIdPossiblerequestersResponses[keyof GetPublicgroupsGroupIdPossiblerequestersResponses];

export type GetPublicGroupSignoutDataData = {
    body?: never;
    path: {
        groupId: string;
    };
    query?: never;
    url: '/publicgroups/{groupId}/signoutdata';
};

export type GetPublicGroupSignoutDataResponses = {
    /**
     * OK
     */
    200: {
        data?: PublicGroupSignoutData;
    };
};

export type GetPublicGroupSignoutDataResponse =
    GetPublicGroupSignoutDataResponses[keyof GetPublicGroupSignoutDataResponses];

export type PostPublicgroupsGroupIdSignupData = {
    body?: {
        /**
         * A list of form data containing a form object for each person that should be signed up.
         */
        forms: Array<{
            /**
             * The form data for the current person.
             */
            form: Array<{
                /**
                 * ID of the form field as returned from /publicgroups/{groupId}/form
                 */
                id: string;
                /**
                 * Type of the form field as returned from /publicgroups/{groupId}/form (should be one of: person, custom, relation, privacy, comment)
                 */
                type: string;
                /**
                 * The value the user provided.
                 */
                value: string;
            }>;
            /**
             * The person ID the current form applies to. Can be empty if a single new user is about to sign up.
             */
            personId?: number;
        }>;
        /**
         * Url used in the mail sent to the user.
         */
        signOutUrlTemplate?: string;
        /**
         * The sign up token.
         */
        token: string;
    };
    path: {
        /**
         * Group ID of the public group
         */
        groupId: string;
    };
    query?: never;
    url: '/publicgroups/{groupId}/signup';
};

export type PostPublicgroupsGroupIdSignupErrors = {
    /**
     * Bad Request
     */
    400: unknown;
};

export type PostPublicgroupsGroupIdSignupResponses = {
    /**
     * OK
     */
    200: {
        /**
         * The hash of the group homepage. This allows the client to return to the group homepage.
         */
        groupHomepageHash?: string;
    };
};

export type PostPublicgroupsGroupIdSignupResponse =
    PostPublicgroupsGroupIdSignupResponses[keyof PostPublicgroupsGroupIdSignupResponses];

export type IssueSignUpTokenData = {
    /**
     * You MUST provide either `personId` OR `email`. Both fields cannot be present at the same time.
     */
    body?: {
        /**
         * Array of person ids, which are clicked on group detail page. Those persons, will be also checked on the form site.
         * The `clicked` field will be saved only in combination with `personId`.
         */
        clicked?: Array<unknown>;
        /**
         * eMail address of not logged in user or new user.
         */
        email?: string;
        /**
         * The hash of the group homepage. If specified, the user can return to the group homepage after the sign up was successful.
         */
        groupHomepageHash?: string;
        /**
         * Person Id, which issues the token.
         */
        personId?: number;
        /**
         * Url used in the mail sent to the user.
         */
        signUpUrlTemplate?: string;
    };
    path: {
        /**
         * Group id of public group
         */
        groupId: number;
    };
    query?: never;
    url: '/publicgroups/{groupId}/token';
};

export type IssueSignUpTokenErrors = {
    /**
     * Bad Request. Validation errors.
     */
    400: {
        [key: string]: unknown;
    };
};

export type IssueSignUpTokenError = IssueSignUpTokenErrors[keyof IssueSignUpTokenErrors];

export type IssueSignUpTokenResponses = {
    /**
     * Token created.
     */
    200: {
        data?: {
            /**
             * Provide eMail
             */
            email?: string | null;
            /**
             * Basic Group Information
             */
            group?: {
                [key: string]: unknown;
            };
            /**
             * Provided PersonId
             */
            requesterId?: number | null;
            /**
             * Sign Up Token
             */
            token?: string;
            /**
             * Link To Sign Up Form
             */
            url?: string;
        };
    };
};

export type IssueSignUpTokenResponse = IssueSignUpTokenResponses[keyof IssueSignUpTokenResponses];

export type GetGroupForHomepageData = {
    body?: never;
    path: {
        /**
         * Group Homepage Hash
         */
        hash: string;
        /**
         * Group ID
         */
        groupId: string;
    };
    query?: never;
    url: '/publicgroups/{groupId}/{hash}';
};

export type GetGroupForHomepageErrors = {
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetGroupForHomepageResponses = {
    /**
     * OK
     */
    200: PublicGroup;
};

export type GetGroupForHomepageResponse = GetGroupForHomepageResponses[keyof GetGroupForHomepageResponses];

export type StartQueueWorkerData = {
    body?: never;
    path: {
        queue: 'default';
    };
    query?: never;
    url: '/queues/{queue}';
};

export type StartQueueWorkerResponses = {
    /**
     * OK
     */
    200: {
        data?: {
            /**
             * Messages from Worker
             */
            messages?: Array<string>;
            /**
             * Name of Queue
             */
            queue?: string;
        };
    };
};

export type StartQueueWorkerResponse = StartQueueWorkerResponses[keyof StartQueueWorkerResponses];

export type GetQueueJobGroupsStatusData = {
    body?: never;
    path: {
        /**
         * Limit result to this job group.
         */
        jobGroup: string;
        queue: string;
    };
    query?: never;
    url: '/queues/{queue}/jobgroups/{jobGroup}';
};

export type GetQueueJobGroupsStatusResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<JobGroupStatus>;
        meta?: MetaCount;
    };
};

export type GetQueueJobGroupsStatusResponse = GetQueueJobGroupsStatusResponses[keyof GetQueueJobGroupsStatusResponses];

export type GetRegistrationconfigIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/registrationconfig/{id}';
};

export type GetRegistrationconfigIdResponses = {
    /**
     * OK
     */
    200: {
        data?: RegistrationConfig;
    };
};

export type GetRegistrationconfigIdResponse = GetRegistrationconfigIdResponses[keyof GetRegistrationconfigIdResponses];

export type PatchRegistrationconfigIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/registrationconfig/{id}';
};

export type PatchRegistrationconfigIdResponses = {
    /**
     * OK
     */
    200: {
        data?: RegistrationConfigCreate;
    };
};

export type PatchRegistrationconfigIdResponse =
    PatchRegistrationconfigIdResponses[keyof PatchRegistrationconfigIdResponses];

export type PostRegistrationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/registrations';
};

export type PostRegistrationsResponses = {
    /**
     * OK
     */
    201: {
        data?: Registration;
    };
    /**
     * No Content
     */
    204: void;
};

export type PostRegistrationsResponse = PostRegistrationsResponses[keyof PostRegistrationsResponses];

export type DeleteRegistrationsGuidData = {
    body?: never;
    path: {
        /**
         * GUID for Entity
         */
        guid: string;
    };
    query?: never;
    url: '/registrations/{guid}';
};

export type DeleteRegistrationsGuidResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteRegistrationsGuidResponse = DeleteRegistrationsGuidResponses[keyof DeleteRegistrationsGuidResponses];

export type PostRegistrationsGuidConfirmTokenData = {
    body?: never;
    path: {
        /**
         * GUID for Entity
         */
        guid: string;
    };
    query: {
        token: string;
    };
    url: '/registrations/{guid}/confirm';
};

export type PostRegistrationsGuidConfirmTokenResponses = {
    /**
     * OK
     */
    200: {
        data?: Registration;
    };
};

export type PostRegistrationsGuidConfirmTokenResponse =
    PostRegistrationsGuidConfirmTokenResponses[keyof PostRegistrationsGuidConfirmTokenResponses];

export type PostRegistrationsGuidConvertData = {
    body?: {
        formData: Array<{
            [key: string]: unknown;
        }>;
        /**
         * If specified, this indicates with existing person the new account should be linked to.
         */
        personId?: number;
    };
    path: {
        /**
         * GUID for Entity
         */
        guid: string;
    };
    query: {
        token: string;
    };
    url: '/registrations/{guid}/convert';
};

export type PostRegistrationsGuidConvertResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PostRegistrationsGuidConvertResponse =
    PostRegistrationsGuidConvertResponses[keyof PostRegistrationsGuidConvertResponses];

export type PostRegistrationsGuidResendData = {
    body?: never;
    path: {
        /**
         * GUID for Entity
         */
        guid: string;
    };
    query?: never;
    url: '/registrations/{guid}/resend';
};

export type PostRegistrationsGuidResendResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PostRegistrationsGuidResendResponse =
    PostRegistrationsGuidResendResponses[keyof PostRegistrationsGuidResendResponses];

export type PostResetPasswordData = {
    body?: {
        emailOrUsername: string;
    };
    path?: never;
    query?: never;
    url: '/reset-password';
};

export type PostResetPasswordResponses = {
    /**
     * OK
     */
    200: {
        data: {
            infos: Array<string>;
        };
    };
};

export type PostResetPasswordResponse = PostResetPasswordResponses[keyof PostResetPasswordResponses];

export type GetResourceMasterdataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/resource/masterdata';
};

export type GetResourceMasterdataResponses = {
    /**
     * OK
     */
    200: {
        data?: ResourceMasterData;
    };
};

export type GetResourceMasterdataResponse = GetResourceMasterdataResponses[keyof GetResourceMasterdataResponses];

export type GetResourcesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/resources';
};

export type GetResourcesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetResourcesError = GetResourcesErrors[keyof GetResourcesErrors];

export type GetResourcesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Resource>;
        meta?: MetaCount;
    };
};

export type GetResourcesResponse = GetResourcesResponses[keyof GetResourcesResponses];

export type PostResourcesData = {
    body?: ResourceCreate;
    path?: never;
    query?: never;
    url: '/resources';
};

export type PostResourcesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostResourcesError = PostResourcesErrors[keyof PostResourcesErrors];

export type PostResourcesResponses = {
    /**
     * OK
     */
    201: {
        data?: Resource;
    };
};

export type PostResourcesResponse = PostResourcesResponses[keyof PostResourcesResponses];

export type DeleteResourcesResourceId2Data = {
    body?: never;
    path: {
        resourceId: number;
    };
    query?: never;
    url: '/resources/{resourceId}';
};

export type DeleteResourcesResourceId2Errors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteResourcesResourceId2Error = DeleteResourcesResourceId2Errors[keyof DeleteResourcesResourceId2Errors];

export type DeleteResourcesResourceId2Responses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteResourcesResourceId2Response =
    DeleteResourcesResourceId2Responses[keyof DeleteResourcesResourceId2Responses];

export type GetResourcesResourceIdData = {
    body?: never;
    path: {
        resourceId: number;
    };
    query?: never;
    url: '/resources/{resourceId}';
};

export type GetResourcesResourceIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetResourcesResourceIdError = GetResourcesResourceIdErrors[keyof GetResourcesResourceIdErrors];

export type GetResourcesResourceIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Resource;
    };
};

export type GetResourcesResourceIdResponse = GetResourcesResourceIdResponses[keyof GetResourcesResourceIdResponses];

export type PutResourcesResourceIdData = {
    body?: ResourceCreate;
    path: {
        resourceId: number;
    };
    query?: never;
    url: '/resources/{resourceId}';
};

export type PutResourcesResourceIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutResourcesResourceIdError = PutResourcesResourceIdErrors[keyof PutResourcesResourceIdErrors];

export type PutResourcesResourceIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Resource;
    };
};

export type PutResourcesResourceIdResponse = PutResourcesResourceIdResponses[keyof PutResourcesResourceIdResponses];

export type GetResourcesResourceIdStatisticsData = {
    body?: never;
    path: {
        resourceId: number;
    };
    query?: never;
    url: '/resources/{resourceId}/statistics';
};

export type GetResourcesResourceIdStatisticsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetResourcesResourceIdStatisticsError =
    GetResourcesResourceIdStatisticsErrors[keyof GetResourcesResourceIdStatisticsErrors];

export type GetResourcesResourceIdStatisticsResponses = {
    /**
     * OK
     */
    200: {
        data?: ResourceStatistics;
    };
};

export type GetResourcesResourceIdStatisticsResponse =
    GetResourcesResourceIdStatisticsResponses[keyof GetResourcesResourceIdStatisticsResponses];

export type GetResourcetypesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/resourcetypes';
};

export type GetResourcetypesErrors = {
    /**
     * Unauthorized
     */
    401: string;
};

export type GetResourcetypesError = GetResourcetypesErrors[keyof GetResourcetypesErrors];

export type GetResourcetypesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<ResourceType>;
        meta?: MetaCount;
    };
};

export type GetResourcetypesResponse = GetResourcetypesResponses[keyof GetResourcetypesResponses];

export type PostResourcetypesData = {
    body?: ResourceTypeCreate;
    path?: never;
    query?: never;
    url: '/resourcetypes';
};

export type PostResourcetypesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostResourcetypesError = PostResourcetypesErrors[keyof PostResourcetypesErrors];

export type PostResourcetypesResponses = {
    /**
     * OK
     */
    201: {
        data?: ResourceType;
    };
};

export type PostResourcetypesResponse = PostResourcetypesResponses[keyof PostResourcetypesResponses];

export type DeleteResourcetypesResourceTypeIdData = {
    body?: never;
    path: {
        resourceTypeId: number;
    };
    query?: never;
    url: '/resourcetypes/{resourceTypeId}';
};

export type DeleteResourcetypesResourceTypeIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteResourcetypesResourceTypeIdError =
    DeleteResourcetypesResourceTypeIdErrors[keyof DeleteResourcetypesResourceTypeIdErrors];

export type DeleteResourcetypesResourceTypeIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteResourcetypesResourceTypeIdResponse =
    DeleteResourcetypesResourceTypeIdResponses[keyof DeleteResourcetypesResourceTypeIdResponses];

export type GetResourcetypesResourceTypeIdData = {
    body?: never;
    path: {
        resourceTypeId: number;
    };
    query?: never;
    url: '/resourcetypes/{resourceTypeId}';
};

export type GetResourcetypesResourceTypeIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetResourcetypesResourceTypeIdError =
    GetResourcetypesResourceTypeIdErrors[keyof GetResourcetypesResourceTypeIdErrors];

export type GetResourcetypesResourceTypeIdResponses = {
    /**
     * OK
     */
    200: {
        data?: ResourceType;
    };
};

export type GetResourcetypesResourceTypeIdResponse =
    GetResourcetypesResourceTypeIdResponses[keyof GetResourcetypesResourceTypeIdResponses];

export type PutResourcetypesResourceTypeIdData = {
    body?: ResourceTypeCreate;
    path: {
        resourceTypeId: number;
    };
    query?: never;
    url: '/resourcetypes/{resourceTypeId}';
};

export type PutResourcetypesResourceTypeIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutResourcetypesResourceTypeIdError =
    PutResourcetypesResourceTypeIdErrors[keyof PutResourcetypesResourceTypeIdErrors];

export type PutResourcetypesResourceTypeIdResponses = {
    /**
     * OK
     */
    200: {
        data?: ResourceType;
    };
};

export type PutResourcetypesResourceTypeIdResponse =
    PutResourcetypesResourceTypeIdResponses[keyof PutResourcetypesResourceTypeIdResponses];

export type GetRoutinesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/routines';
};

export type GetRoutinesResponses = {
    /**
     * OK
     */
    200: {
        data: Array<Routine>;
        meta: MetaCount;
    };
};

export type GetRoutinesResponse = GetRoutinesResponses[keyof GetRoutinesResponses];

export type PostRoutinesData = {
    body: RoutineCreate;
    path?: never;
    query?: never;
    url: '/routines';
};

export type PostRoutinesErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostRoutinesError = PostRoutinesErrors[keyof PostRoutinesErrors];

export type PostRoutinesResponses = {
    /**
     * OK
     */
    201: {
        data: Routine;
    };
};

export type PostRoutinesResponse = PostRoutinesResponses[keyof PostRoutinesResponses];

export type PostRoutinesExecuteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/routines/execute';
};

export type PostRoutinesExecuteErrors = {
    /**
     * Unauthorized
     */
    401: string;
};

export type PostRoutinesExecuteError = PostRoutinesExecuteErrors[keyof PostRoutinesExecuteErrors];

export type PostRoutinesExecuteResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PostRoutinesExecuteResponse = PostRoutinesExecuteResponses[keyof PostRoutinesExecuteResponses];

export type DeleteRoutinesRoutineIdData = {
    body?: never;
    path: {
        /**
         * ID of a routine
         */
        routineId: number;
    };
    query?: never;
    url: '/routines/{routineId}';
};

export type DeleteRoutinesRoutineIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteRoutinesRoutineIdError = DeleteRoutinesRoutineIdErrors[keyof DeleteRoutinesRoutineIdErrors];

export type DeleteRoutinesRoutineIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteRoutinesRoutineIdResponse = DeleteRoutinesRoutineIdResponses[keyof DeleteRoutinesRoutineIdResponses];

export type GetRoutinesRoutineIdData = {
    body?: never;
    path: {
        /**
         * ID of a routine
         */
        routineId: number;
    };
    query?: never;
    url: '/routines/{routineId}';
};

export type GetRoutinesRoutineIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetRoutinesRoutineIdError = GetRoutinesRoutineIdErrors[keyof GetRoutinesRoutineIdErrors];

export type GetRoutinesRoutineIdResponses = {
    /**
     * OK
     */
    200: {
        data: Routine;
    };
};

export type GetRoutinesRoutineIdResponse = GetRoutinesRoutineIdResponses[keyof GetRoutinesRoutineIdResponses];

export type PatchRoutinesRoutineIdData = {
    body: RoutineUpdate;
    path: {
        /**
         * ID of a routine
         */
        routineId: number;
    };
    query?: {
        dry_run?: boolean;
    };
    url: '/routines/{routineId}';
};

export type PatchRoutinesRoutineIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PatchRoutinesRoutineIdError = PatchRoutinesRoutineIdErrors[keyof PatchRoutinesRoutineIdErrors];

export type PatchRoutinesRoutineIdResponses = {
    /**
     * OK
     */
    200: {
        data: Routine;
    };
};

export type PatchRoutinesRoutineIdResponse = PatchRoutinesRoutineIdResponses[keyof PatchRoutinesRoutineIdResponses];

export type GetRoutinesRoutineIdRunsData = {
    body?: never;
    path: {
        /**
         * ID of a routine
         */
        routineId: number;
    };
    query?: {
        /**
         * Include additional information
         */
        include?: Array<'domainObject'>;
        with_potential_domain_objects?: boolean;
    };
    url: '/routines/{routineId}/runs';
};

export type GetRoutinesRoutineIdRunsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetRoutinesRoutineIdRunsError = GetRoutinesRoutineIdRunsErrors[keyof GetRoutinesRoutineIdRunsErrors];

export type GetRoutinesRoutineIdRunsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<RoutineRun>;
        meta: MetaCount;
    };
};

export type GetRoutinesRoutineIdRunsResponse =
    GetRoutinesRoutineIdRunsResponses[keyof GetRoutinesRoutineIdRunsResponses];

export type GetRoutinesRoutineIdRunsRunIdRunActionData = {
    body?: never;
    path: {
        /**
         * ID of a routine
         */
        routineId: number;
        /**
         * ID of a routine run
         */
        runId: number;
        runAction: 'pause' | 'resume' | 'restart';
    };
    query?: never;
    url: '/routines/{routineId}/runs/{runId}/{runAction}';
};

export type GetRoutinesRoutineIdRunsRunIdRunActionErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetRoutinesRoutineIdRunsRunIdRunActionError =
    GetRoutinesRoutineIdRunsRunIdRunActionErrors[keyof GetRoutinesRoutineIdRunsRunIdRunActionErrors];

export type GetRoutinesRoutineIdRunsRunIdRunActionResponses = {
    /**
     * OK
     */
    201: {
        data?: RoutineRun;
    };
};

export type GetRoutinesRoutineIdRunsRunIdRunActionResponse =
    GetRoutinesRoutineIdRunsRunIdRunActionResponses[keyof GetRoutinesRoutineIdRunsRunIdRunActionResponses];

export type PostRoutinesRoutineIdStepsValidateData = {
    body: RoutineStepCreate;
    path: {
        routineId: number;
    };
    query?: never;
    url: '/routines/{routineId}/steps/validate';
};

export type PostRoutinesRoutineIdStepsValidateErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostRoutinesRoutineIdStepsValidateError =
    PostRoutinesRoutineIdStepsValidateErrors[keyof PostRoutinesRoutineIdStepsValidateErrors];

export type PostRoutinesRoutineIdStepsValidateResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type PostRoutinesRoutineIdStepsValidateResponse =
    PostRoutinesRoutineIdStepsValidateResponses[keyof PostRoutinesRoutineIdStepsValidateResponses];

export type PostSamlAcsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/saml/acs';
};

export type PostSamlAcsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostSamlAcsError = PostSamlAcsErrors[keyof PostSamlAcsErrors];

export type GetSamlLoginData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/saml/login';
};

export type GetSamlLoginErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetSamlLoginError = GetSamlLoginErrors[keyof GetSamlLoginErrors];

export type GetSamlMetadataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/saml/metadata';
};

export type GetSamlMetadataErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetSamlMetadataError = GetSamlMetadataErrors[keyof GetSamlMetadataErrors];

export type GetSearchData = {
    body?: never;
    path?: never;
    query: {
        query: string;
        'domain_types[]'?: Array<'person' | 'group' | 'song' | 'wiki_page' | 'action'>;
    };
    url: '/search';
};

export type GetSearchResponses = {
    /**
     * OK
     */
    200: {
        data: Array<
            SearchDomainObject & {
                type: 'action' | 'domainObject';
            }
        >;
        meta: MetaCount;
    };
};

export type GetSearchResponse = GetSearchResponses[keyof GetSearchResponses];

export type GetSecuritylevelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/securitylevels';
};

export type GetSecuritylevelsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<{
            id?: number;
            name?: string;
            sortkey?: string;
        }>;
        meta?: MetaCount;
    };
};

export type GetSecuritylevelsResponse = GetSecuritylevelsResponses[keyof GetSecuritylevelsResponses];

export type DeleteSecuritylevelIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/securitylevels/{id}';
};

export type DeleteSecuritylevelIdErrors = {
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type DeleteSecuritylevelIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteSecuritylevelIdResponse = DeleteSecuritylevelIdResponses[keyof DeleteSecuritylevelIdResponses];

export type GetSecuritylevelIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/securitylevels/{id}';
};

export type GetSecuritylevelIdErrors = {
    /**
     * Not Found
     */
    404: unknown;
};

export type GetSecuritylevelIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PatchSecuritylevelIdData = {
    /**
     * Information to patch the security level
     */
    body?: {
        forcereorder?: boolean;
        name?: string;
        newid?: number;
    };
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: {
        /**
         * Need to be true, if securitylevel shall be reordered
         */
        forcereorder?: boolean;
    };
    url: '/securitylevels/{id}';
};

export type PatchSecuritylevelIdErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Conflict there is alrady a security level with this id
     */
    409: unknown;
};

export type PatchSecuritylevelIdResponses = {
    /**
     * OK
     */
    200: {
        id?: number;
        name?: string;
    };
};

export type PatchSecuritylevelIdResponse = PatchSecuritylevelIdResponses[keyof PatchSecuritylevelIdResponses];

export type PostSecuritylevelIdData = {
    body?: {
        name?: string;
    };
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/securitylevels/{id}';
};

export type PostSecuritylevelIdErrors = {
    /**
     * Conflict - Security level wiht id already exists
     */
    409: unknown;
};

export type PostSecuritylevelIdResponses = {
    /**
     * OK
     */
    200: {
        id?: number;
        name?: string;
    };
};

export type PostSecuritylevelIdResponse = PostSecuritylevelIdResponses[keyof PostSecuritylevelIdResponses];

export type GetServiceGroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/servicegroups';
};

export type GetServiceGroupsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<ServiceGroup>;
        meta?: MetaCount;
    };
};

export type GetServiceGroupsResponse = GetServiceGroupsResponses[keyof GetServiceGroupsResponses];

export type GetServiceGroupData = {
    body?: never;
    path: {
        serviceGroupId: string;
    };
    query?: never;
    url: '/servicegroups/{serviceGroupId}';
};

export type GetServiceGroupResponses = {
    /**
     * OK
     */
    200: {
        data?: ServiceGroup;
    };
};

export type GetServiceGroupResponse = GetServiceGroupResponses[keyof GetServiceGroupResponses];

export type GetServicesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/services';
};

export type GetServicesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Service>;
        meta?: MetaCount;
    };
};

export type GetServicesResponse = GetServicesResponses[keyof GetServicesResponses];

export type GetServiceData = {
    body?: never;
    path: {
        serviceId: string;
    };
    query?: never;
    url: '/services/{serviceId}';
};

export type GetServiceResponses = {
    /**
     * OK
     */
    200: {
        data?: Service;
    };
};

export type GetServiceResponse = GetServiceResponses[keyof GetServiceResponses];

export type DeleteSimulateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/simulate';
};

export type DeleteSimulateResponses = {
    /**
     * OK
     */
    200: {
        data?: {
            redirect?: string;
        };
    };
};

export type DeleteSimulateResponse = DeleteSimulateResponses[keyof DeleteSimulateResponses];

export type PostSimulateData = {
    body?: {
        personId?: number;
    };
    path?: never;
    query?: never;
    url: '/simulate';
};

export type PostSimulateResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PostSimulateResponse = PostSimulateResponses[keyof PostSimulateResponses];

export type GetSongsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter response by category IDs.
         */
        'song_category_ids[]'?: Array<number>;
        /**
         * Filter by Song IDs.
         */
        'ids[]'?: Array<number>;
        /**
         * Filter by field `shouldPractice`.
         */
        practice?: boolean;
        /**
         * Filter by arrangement key. (Song plus all its arrangements are returned, if one arrangement meets the filter criterion)
         */
        key_of_arrangement?: ArrangementKey;
        /**
         * Search by song title
         */
        name?: string;
        /**
         * Search by song title or author
         */
        query?: string;
        /**
         * Include additional information
         */
        include?: Array<'arrangements' | 'tags'>;
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Number of results per page.
         */
        limit?: number;
    };
    url: '/songs';
};

export type GetSongsErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetSongsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Song>;
        meta?: MetaPagination;
    };
};

export type GetSongsResponse = GetSongsResponses[keyof GetSongsResponses];

export type PostSongsData = {
    body?: SongCreate;
    path?: never;
    query?: never;
    url: '/songs';
};

export type PostSongsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostSongsError = PostSongsErrors[keyof PostSongsErrors];

export type PostSongsResponses = {
    /**
     * OK
     */
    201: {
        data?: Song;
    };
};

export type PostSongsResponse = PostSongsResponses[keyof PostSongsResponses];

export type DeleteSongsSongIdData = {
    body?: never;
    path: {
        /**
         * ID of song
         */
        songId: number;
    };
    query?: never;
    url: '/songs/{songId}';
};

export type DeleteSongsSongIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteSongsSongIdError = DeleteSongsSongIdErrors[keyof DeleteSongsSongIdErrors];

export type DeleteSongsSongIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteSongsSongIdResponse = DeleteSongsSongIdResponses[keyof DeleteSongsSongIdResponses];

export type GetSongsSongIdData = {
    body?: never;
    path: {
        /**
         * ID of song
         */
        songId: number;
    };
    query?: {
        /**
         * Include additional information
         */
        include?: Array<'arrangements' | 'tags'>;
    };
    url: '/songs/{songId}';
};

export type GetSongsSongIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetSongsSongIdError = GetSongsSongIdErrors[keyof GetSongsSongIdErrors];

export type GetSongsSongIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Song;
    };
};

export type GetSongsSongIdResponse = GetSongsSongIdResponses[keyof GetSongsSongIdResponses];

export type PutSongsSongIdData = {
    body?: SongCreate;
    path: {
        /**
         * ID of song
         */
        songId: number;
    };
    query?: never;
    url: '/songs/{songId}';
};

export type PutSongsSongIdErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutSongsSongIdError = PutSongsSongIdErrors[keyof PutSongsSongIdErrors];

export type PutSongsSongIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Song;
    };
};

export type PutSongsSongIdResponse = PutSongsSongIdResponses[keyof PutSongsSongIdResponses];

export type GetSongsSongIdArrangementsData = {
    body?: never;
    path: {
        /**
         * ID of song
         */
        songId: number;
    };
    query?: never;
    url: '/songs/{songId}/arrangements';
};

export type GetSongsSongIdArrangementsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetSongsSongIdArrangementsError = GetSongsSongIdArrangementsErrors[keyof GetSongsSongIdArrangementsErrors];

export type GetSongsSongIdArrangementsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Arrangement>;
    };
};

export type GetSongsSongIdArrangementsResponse =
    GetSongsSongIdArrangementsResponses[keyof GetSongsSongIdArrangementsResponses];

export type PostSongsSongIdArrangementsData = {
    body?: ArrangementCreate;
    path: {
        /**
         * ID of song
         */
        songId: number;
    };
    query?: never;
    url: '/songs/{songId}/arrangements';
};

export type PostSongsSongIdArrangementsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostSongsSongIdArrangementsError =
    PostSongsSongIdArrangementsErrors[keyof PostSongsSongIdArrangementsErrors];

export type PostSongsSongIdArrangementsResponses = {
    /**
     * OK
     */
    201: {
        data?: Arrangement;
    };
};

export type PostSongsSongIdArrangementsResponse =
    PostSongsSongIdArrangementsResponses[keyof PostSongsSongIdArrangementsResponses];

export type DeleteSongsSongIdArrangementsArrangementIdData = {
    body?: never;
    path: {
        /**
         * ID of song
         */
        songId: number;
        /**
         * ID of arrangement
         */
        arrangementId: number;
    };
    query?: never;
    url: '/songs/{songId}/arrangements/{arrangementId}';
};

export type DeleteSongsSongIdArrangementsArrangementIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type DeleteSongsSongIdArrangementsArrangementIdError =
    DeleteSongsSongIdArrangementsArrangementIdErrors[keyof DeleteSongsSongIdArrangementsArrangementIdErrors];

export type DeleteSongsSongIdArrangementsArrangementIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteSongsSongIdArrangementsArrangementIdResponse =
    DeleteSongsSongIdArrangementsArrangementIdResponses[keyof DeleteSongsSongIdArrangementsArrangementIdResponses];

export type GetSongsSongIdArrangementsArrangementIdData = {
    body?: never;
    path: {
        /**
         * ID of song
         */
        songId: number;
        /**
         * ID of arrangement
         */
        arrangementId: number;
    };
    query?: never;
    url: '/songs/{songId}/arrangements/{arrangementId}';
};

export type GetSongsSongIdArrangementsArrangementIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetSongsSongIdArrangementsArrangementIdError =
    GetSongsSongIdArrangementsArrangementIdErrors[keyof GetSongsSongIdArrangementsArrangementIdErrors];

export type GetSongsSongIdArrangementsArrangementIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Arrangement;
    };
};

export type GetSongsSongIdArrangementsArrangementIdResponse =
    GetSongsSongIdArrangementsArrangementIdResponses[keyof GetSongsSongIdArrangementsArrangementIdResponses];

export type PutSongsSongIdArrangementsArrangementIdData = {
    body?: ArrangementCreate;
    path: {
        /**
         * ID of song
         */
        songId: number;
        /**
         * ID of arrangement
         */
        arrangementId: number;
    };
    query?: never;
    url: '/songs/{songId}/arrangements/{arrangementId}';
};

export type PutSongsSongIdArrangementsArrangementIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutSongsSongIdArrangementsArrangementIdError =
    PutSongsSongIdArrangementsArrangementIdErrors[keyof PutSongsSongIdArrangementsArrangementIdErrors];

export type PutSongsSongIdArrangementsArrangementIdResponses = {
    /**
     * OK
     */
    200: {
        data?: Arrangement;
    };
};

export type PutSongsSongIdArrangementsArrangementIdResponse =
    PutSongsSongIdArrangementsArrangementIdResponses[keyof PutSongsSongIdArrangementsArrangementIdResponses];

export type PatchSongsSongIdArrangementsArrangementIdDefaultData = {
    body?: never;
    path: {
        /**
         * ID of song
         */
        songId: number;
        /**
         * ID of arrangement
         */
        arrangementId: number;
    };
    query?: never;
    url: '/songs/{songId}/arrangements/{arrangementId}/default';
};

export type PatchSongsSongIdArrangementsArrangementIdDefaultErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PatchSongsSongIdArrangementsArrangementIdDefaultError =
    PatchSongsSongIdArrangementsArrangementIdDefaultErrors[keyof PatchSongsSongIdArrangementsArrangementIdDefaultErrors];

export type PatchSongsSongIdArrangementsArrangementIdDefaultResponses = {
    /**
     * No Content
     */
    204: void;
};

export type PatchSongsSongIdArrangementsArrangementIdDefaultResponse =
    PatchSongsSongIdArrangementsArrangementIdDefaultResponses[keyof PatchSongsSongIdArrangementsArrangementIdDefaultResponses];

export type GetSsoLoginsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sso-logins';
};

export type GetSsoLoginsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetSsoLoginsError = GetSsoLoginsErrors[keyof GetSsoLoginsErrors];

export type GetSsoLoginsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<SsoLogins>;
        meta?: MetaCount;
    };
};

export type GetSsoLoginsResponse = GetSsoLoginsResponses[keyof GetSsoLoginsResponses];

export type GetStartpageData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/startpage';
};

export type GetStartpageResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<Widget>;
        meta?: MetaCount;
    };
};

export type GetStartpageResponse = GetStartpageResponses[keyof GetStartpageResponses];

export type GetAllStatusesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/statuses';
};

export type GetAllStatusesErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden to see statuses
     */
    403: unknown;
};

export type GetAllStatusesResponses = {
    /**
     * All statuses
     */
    200: {
        data?: Array<Status>;
        meta?: {
            count?: number;
        };
    };
};

export type GetAllStatusesResponse = GetAllStatusesResponses[keyof GetAllStatusesResponses];

export type CreateNewStatusData = {
    /**
     * Status to add
     */
    body: StatusNew;
    path?: never;
    query?: never;
    url: '/statuses';
};

export type CreateNewStatusErrors = {
    /**
     * Validation error
     */
    400: unknown;
};

export type CreateNewStatusResponses = {
    /**
     * Successfuly created
     */
    201: {
        data?: Status;
        meta?: {
            count?: number;
        };
    };
};

export type CreateNewStatusResponse = CreateNewStatusResponses[keyof CreateNewStatusResponses];

export type DeleteStatusData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/statuses/{id}';
};

export type DeleteStatusErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type DeleteStatusResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteStatusResponse = DeleteStatusResponses[keyof DeleteStatusResponses];

export type GetStatusData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/statuses/{id}';
};

export type GetStatusErrors = {
    /**
     * Forbidden to see status
     */
    403: unknown;
    /**
     * Status not found
     */
    404: unknown;
};

export type GetStatusResponses = {
    /**
     * Successful Response
     */
    200: {
        data?: Status;
    };
};

export type GetStatusResponse = GetStatusResponses[keyof GetStatusResponses];

export type PutStatusData = {
    /**
     * New values for status
     */
    body: StatusUpdate;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/statuses/{id}';
};

export type PutStatusResponses = {
    /**
     * Successfully updated
     */
    200: {
        data?: Status;
    };
};

export type PutStatusResponse = PutStatusResponses[keyof PutStatusResponses];

export type GetSubscriptionsPersonIdData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
    };
    query?: never;
    url: '/subscriptions/{personId}';
};

export type GetSubscriptionsPersonIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetSubscriptionsPersonIdError = GetSubscriptionsPersonIdErrors[keyof GetSubscriptionsPersonIdErrors];

export type GetSubscriptionsPersonIdResponses = {
    /**
     * Tags of person
     */
    200: {
        data?: Array<Subscription>;
    };
};

export type GetSubscriptionsPersonIdResponse =
    GetSubscriptionsPersonIdResponses[keyof GetSubscriptionsPersonIdResponses];

export type GetSubscriptionsPersonIdSubjectData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        subject: 'post' | 'post_summary' | 'group' | 'public_channel';
    };
    query?: never;
    url: '/subscriptions/{personId}/{subject}';
};

export type GetSubscriptionsPersonIdSubjectErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetSubscriptionsPersonIdSubjectError =
    GetSubscriptionsPersonIdSubjectErrors[keyof GetSubscriptionsPersonIdSubjectErrors];

export type GetSubscriptionsPersonIdSubjectResponses = {
    /**
     * Tags of person
     */
    200: {
        data?: Array<Subscription>;
    };
};

export type GetSubscriptionsPersonIdSubjectResponse =
    GetSubscriptionsPersonIdSubjectResponses[keyof GetSubscriptionsPersonIdSubjectResponses];

export type DeleteSubscriptionsPersonIdSubjectSubjectIdentifierData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        subject: 'post' | 'post_summary' | 'group' | 'public_channel';
        subjectIdentifier: string;
    };
    query?: never;
    url: '/subscriptions/{personId}/{subject}/{subjectIdentifier}';
};

export type DeleteSubscriptionsPersonIdSubjectSubjectIdentifierErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type DeleteSubscriptionsPersonIdSubjectSubjectIdentifierError =
    DeleteSubscriptionsPersonIdSubjectSubjectIdentifierErrors[keyof DeleteSubscriptionsPersonIdSubjectSubjectIdentifierErrors];

export type DeleteSubscriptionsPersonIdSubjectSubjectIdentifierResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteSubscriptionsPersonIdSubjectSubjectIdentifierResponse =
    DeleteSubscriptionsPersonIdSubjectSubjectIdentifierResponses[keyof DeleteSubscriptionsPersonIdSubjectSubjectIdentifierResponses];

export type GetSubscriptionsPersonIdSubjectSubjectIdentifierData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        subject: 'post' | 'post_summary' | 'group' | 'public_channel';
        subjectIdentifier: string;
    };
    query?: never;
    url: '/subscriptions/{personId}/{subject}/{subjectIdentifier}';
};

export type GetSubscriptionsPersonIdSubjectSubjectIdentifierErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetSubscriptionsPersonIdSubjectSubjectIdentifierError =
    GetSubscriptionsPersonIdSubjectSubjectIdentifierErrors[keyof GetSubscriptionsPersonIdSubjectSubjectIdentifierErrors];

export type GetSubscriptionsPersonIdSubjectSubjectIdentifierResponses = {
    /**
     * Tags of person
     */
    200: {
        data?: Array<Subscription>;
    };
};

export type GetSubscriptionsPersonIdSubjectSubjectIdentifierResponse =
    GetSubscriptionsPersonIdSubjectSubjectIdentifierResponses[keyof GetSubscriptionsPersonIdSubjectSubjectIdentifierResponses];

export type PutSubscriptionsPersonIdSubjectSubjectIdentifierData = {
    body?: never;
    path: {
        /**
         * ID of person
         */
        personId: number;
        subject: 'post' | 'post_summary' | 'group' | 'public_channel';
        subjectIdentifier: string;
    };
    query?: never;
    url: '/subscriptions/{personId}/{subject}/{subjectIdentifier}';
};

export type PutSubscriptionsPersonIdSubjectSubjectIdentifierErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PutSubscriptionsPersonIdSubjectSubjectIdentifierError =
    PutSubscriptionsPersonIdSubjectSubjectIdentifierErrors[keyof PutSubscriptionsPersonIdSubjectSubjectIdentifierErrors];

export type PutSubscriptionsPersonIdSubjectSubjectIdentifierResponses = {
    /**
     * Tags of person
     */
    200: {
        data?: Array<Subscription>;
    };
};

export type PutSubscriptionsPersonIdSubjectSubjectIdentifierResponse =
    PutSubscriptionsPersonIdSubjectSubjectIdentifierResponses[keyof PutSubscriptionsPersonIdSubjectSubjectIdentifierResponses];

export type GetSyncAdaptersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sync/adapters';
};

export type GetSyncAdaptersResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<SyncAdapter>;
        meta?: MetaCount;
    };
};

export type GetSyncAdaptersResponse = GetSyncAdaptersResponses[keyof GetSyncAdaptersResponses];

export type PostSyncAdaptersData = {
    /**
     * the new sync adapter
     */
    body: SyncAdapterNew;
    path?: never;
    query?: never;
    url: '/sync/adapters';
};

export type PostSyncAdaptersErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostSyncAdaptersError = PostSyncAdaptersErrors[keyof PostSyncAdaptersErrors];

export type PostSyncAdaptersResponses = {
    /**
     * new sync adapter
     */
    201: {
        data?: SyncAdapter;
    };
};

export type PostSyncAdaptersResponse = PostSyncAdaptersResponses[keyof PostSyncAdaptersResponses];

export type DeleteSyncAdaptersIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/sync/adapters/{id}';
};

export type DeleteSyncAdaptersIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
    /**
     * Conflict during deletion attempt
     */
    409: {
        data?: {
            deleteable?: boolean;
            references?: Array<{
                /**
                 * Indicator if those references are blocking the deletion.
                 */
                blocksDeletion?: boolean;
                /**
                 * Column name of the reference / foreign key.
                 */
                columnName?: string;
                /**
                 * Number of references in that table.
                 */
                count?: number;
                /**
                 * Table name, with reference / foreign key constraint.
                 */
                tableName?: string;
                /**
                 * Type of reference. 'ENTRY' (entry links to this object) or 'REFERENCE' (this object has a foreign key to this table)
                 */
                type?: string;
            }>;
        };
    };
};

export type DeleteSyncAdaptersIdError = DeleteSyncAdaptersIdErrors[keyof DeleteSyncAdaptersIdErrors];

export type DeleteSyncAdaptersIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteSyncAdaptersIdResponse = DeleteSyncAdaptersIdResponses[keyof DeleteSyncAdaptersIdResponses];

export type GetSyncAdaptersIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/sync/adapters/{id}';
};

export type GetSyncAdaptersIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetSyncAdaptersIdError = GetSyncAdaptersIdErrors[keyof GetSyncAdaptersIdErrors];

export type GetSyncAdaptersIdResponses = {
    /**
     * get sync adapter
     */
    200: {
        data?: SyncAdapter;
    };
};

export type GetSyncAdaptersIdResponse = GetSyncAdaptersIdResponses[keyof GetSyncAdaptersIdResponses];

export type PutSyncAdaptersIdData = {
    /**
     * Sync adapter data
     */
    body: SyncAdapterNew;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/sync/adapters/{id}';
};

export type PutSyncAdaptersIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutSyncAdaptersIdError = PutSyncAdaptersIdErrors[keyof PutSyncAdaptersIdErrors];

export type PutSyncAdaptersIdResponses = {
    /**
     * Updated sync adapter
     */
    200: {
        data?: SyncAdapter;
    };
};

export type PutSyncAdaptersIdResponse = PutSyncAdaptersIdResponses[keyof PutSyncAdaptersIdResponses];

export type GetSyncConflictsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter Response by Conflict Type
         */
        'types[]'?: Array<
            'create' | 'update' | 'duplicate in CT' | 'link and update' | 'delete or create' | 'duplicate in source'
        >;
        /**
         * Filter Response by Domain Types of Related Entity Mappings
         */
        'domain_types[]'?: Array<string>;
        /**
         * Filter Response by Source Ids of Related Entity Mappings
         */
        'source_ids[]'?: Array<number>;
    };
    url: '/sync/conflicts';
};

export type GetSyncConflictsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden. Permission `administer persons` needed.
     */
    403: unknown;
};

export type GetSyncConflictsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<SyncConflicts>;
        meta?: MetaPagination;
    };
};

export type GetSyncConflictsResponse = GetSyncConflictsResponses[keyof GetSyncConflictsResponses];

export type SaveSyncConflictData = {
    /**
     *
     */
    body?: {
        data?: Array<{
            key?: string;
            value?: string;
        }>;
        /**
         * Entity Mapping Id
         */
        entityMappingId: number;
        /**
         * Job Identifier (usually GUID)
         */
        jobId: string;
        /**
         * Type of Conflict
         */
        type: 'create' | 'update' | 'duplicate in CT' | 'link and update' | 'delete or create' | 'duplicate in source';
    };
    path?: never;
    query?: never;
    url: '/sync/conflicts';
};

export type SaveSyncConflictErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden. Permission `administer persons` needed.
     */
    403: unknown;
};

export type SaveSyncConflictResponses = {
    /**
     * Created
     */
    201: {
        data?: SyncConflicts;
    };
};

export type SaveSyncConflictResponse = SaveSyncConflictResponses[keyof SaveSyncConflictResponses];

export type DeleteSyncConflictData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/sync/conflicts/{id}';
};

export type DeleteSyncConflictResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteSyncConflictResponse = DeleteSyncConflictResponses[keyof DeleteSyncConflictResponses];

export type GetSyncConflictData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/sync/conflicts/{id}';
};

export type GetSyncConflictErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden.
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetSyncConflictResponses = {
    /**
     * OK
     */
    200: {
        data?: SyncConflicts;
    };
};

export type GetSyncConflictResponse = GetSyncConflictResponses[keyof GetSyncConflictResponses];

export type UpdateSyncConflictData = {
    body?: {
        data?: Array<{
            key?: string;
            value?: string;
        }>;
        /**
         * Entity Mapping Id
         */
        entityMappingId: number;
        /**
         * GUID of Job
         */
        jobId: string;
        /**
         * Type of Conflict
         */
        type: 'create' | 'update' | 'duplicate in CT' | 'link an dupdate' | 'delete or create' | 'duplicate in source';
    };
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/sync/conflicts/{id}';
};

export type UpdateSyncConflictErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden. Permission `administer persons` needed.
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type UpdateSyncConflictResponses = {
    /**
     * OK
     */
    200: {
        data?: SyncConflicts;
    };
};

export type UpdateSyncConflictResponse = UpdateSyncConflictResponses[keyof UpdateSyncConflictResponses];

export type GetSyncMappingsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by Domain Types
         */
        domain_type?: Array<string>;
        /**
         * Filter by Domain Id
         */
        domain_id?: string;
        /**
         * Filter by Source Id
         */
        source_id?: string;
        /**
         * Filter by scope key
         */
        scope?: string;
    };
    url: '/sync/entitymappings';
};

export type GetSyncMappingsErrors = {
    /**
     * Validation Error
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden. Missing `administer persons` permission.
     */
    403: unknown;
};

export type GetSyncMappingsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<SyncEntityMapping>;
        meta?: MetaPagination;
    };
};

export type GetSyncMappingsResponse = GetSyncMappingsResponses[keyof GetSyncMappingsResponses];

export type CreateSyncMappingData = {
    /**
     * New Entity Mapping of a Person.
     */
    body?: {
        /**
         * Identifier of ChurchTools Entity
         */
        domainId: string | null;
        /**
         * ChurchTools Domain Type
         */
        domainType: string;
        /**
         * DateTime of Last Synchronisation in Zulu Format
         */
        lastSyncedDate: string | null;
        /**
         * scope key identifying the context of the entity mapping
         */
        scope?: string | null;
        /**
         * Identifier of Entity in Source System
         */
        sourceEntityId: string | null;
        /**
         * Identifier of Synchronisation Source
         */
        sourceId: number;
        /**
         * Status of Entity Mapping
         */
        status: 'synced' | 'conflict' | 'deleted in CT';
    };
    path?: never;
    query?: never;
    url: '/sync/entitymappings';
};

export type CreateSyncMappingResponses = {
    /**
     * Created
     */
    201: SyncEntityMapping;
};

export type CreateSyncMappingResponse = CreateSyncMappingResponses[keyof CreateSyncMappingResponses];

export type DeleteEntityMappingData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/sync/entitymappings/{id}';
};

export type DeleteEntityMappingErrors = {
    /**
     * Bad Request. Validation Errors.
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden. Missing permission `administer persons`.
     */
    403: unknown;
};

export type DeleteEntityMappingResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteEntityMappingResponse = DeleteEntityMappingResponses[keyof DeleteEntityMappingResponses];

export type GetEntityMappingData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/sync/entitymappings/{id}';
};

export type GetEntityMappingErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden. Missing permission `administer persons`.
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetEntityMappingResponses = {
    /**
     * Requested Entity Mapping
     */
    200: SyncEntityMapping;
};

export type GetEntityMappingResponse = GetEntityMappingResponses[keyof GetEntityMappingResponses];

export type UpdateEntityMappingData = {
    body?: {
        /**
         * Domain Id of ChurchTools Entity
         */
        domainId?: string | null;
        /**
         * ChurchTools Domain Type
         */
        domainType?: string;
        /**
         * DateTime of Last Synchronisation in Zulu Format
         */
        lastSyncedDate: string;
        /**
         * scope key identifying the context of the entity mapping
         */
        scope?: string | null;
        /**
         * Identifier of Synchronisation Source
         */
        sourceEntityId: string | null;
        /**
         * Id of Source
         */
        sourceId?: number;
        /**
         * Status of Entity Mapping
         */
        status: 'synced' | 'conflict' | 'deleted in CT';
    };
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/sync/entitymappings/{id}';
};

export type UpdateEntityMappingErrors = {
    /**
     * Bad Request. Validation Error
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden. Missing permission `administer persons`.
     */
    403: unknown;
};

export type UpdateEntityMappingResponses = {
    /**
     * Updated or Newly Created Entity Mapping
     */
    200: SyncEntityMapping;
};

export type UpdateEntityMappingResponse = UpdateEntityMappingResponses[keyof UpdateEntityMappingResponses];

export type GetSyncExecutionsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by external system
         */
        'es_ids[]'?: Array<number>;
        /**
         * Filter by sync job configuration
         */
        'job_ids[]'?: Array<number>;
        /**
         * Return executions after that date
         */
        start_date?: string;
        /**
         * Return executions before that date
         */
        end_date?: string;
        /**
         * Filter by status
         */
        statuses?: Array<string>;
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Number of results per page.
         */
        limit?: number;
        is_dry_run?: boolean;
    };
    url: '/sync/executions';
};

export type GetSyncExecutionsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetSyncExecutionsResponses = {
    200: {
        NOTICE: string;
        data: Array<{
            both?: {
                create: number;
                delete: number;
                link: number;
                update: number;
            };
            endDate: string;
            errorCount?: number | null;
            es?: {
                create: number;
                delete: number;
                update: number;
            };
            executionId: string;
            isDryRun?: boolean;
            jobId: number;
            master?: {
                create: number;
                delete: number;
                update: number;
            };
            startDate: string;
            status: string;
        }>;
        meta: {
            count: number;
            pagination: {
                current: number;
                lastPage: number;
                limit: number;
                total: number;
            };
        };
    };
};

export type GetSyncExecutionsResponse = GetSyncExecutionsResponses[keyof GetSyncExecutionsResponses];

export type GetSyncExternalsystemsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sync/externalsystems';
};

export type GetSyncExternalsystemsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<ExternalSystemReturn>;
        meta?: MetaCount;
    };
};

export type GetSyncExternalsystemsResponse = GetSyncExternalsystemsResponses[keyof GetSyncExternalsystemsResponses];

export type PostSyncExternalsystemsData = {
    body?: ExternalSystem;
    path?: never;
    query?: never;
    url: '/sync/externalsystems';
};

export type PostSyncExternalsystemsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteSyncFieldMappingsData = {
    body?: never;
    path: {
        /**
         * Domatin Type
         */
        domainType: string;
        externalSystemId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/fieldmappings/{domainType}';
};

export type DeleteSyncFieldMappingsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type DeleteSyncFieldMappingsResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteSyncFieldMappingsResponse = DeleteSyncFieldMappingsResponses[keyof DeleteSyncFieldMappingsResponses];

export type GetSyncFieldMappingsData = {
    body?: never;
    path: {
        /**
         * Domatin Type
         */
        domainType: string;
        externalSystemId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/fieldmappings/{domainType}';
};

export type GetSyncFieldMappingsErrors = {
    /**
     * Unauthorized.
     */
    401: unknown;
    /**
     * Forbidden. Missing Sync Auths
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetSyncFieldMappingsResponses = {
    /**
     * OK
     */
    200: {
        data?: FieldMapping;
    };
};

export type GetSyncFieldMappingsResponse = GetSyncFieldMappingsResponses[keyof GetSyncFieldMappingsResponses];

export type PutSyncFieldMappingsData = {
    body?: {
        propertyMappingsESToMaster?: Array<{
            from?: string;
            fromFilter?: string;
            others?: Array<unknown>;
            to?: string;
            toFilter?: string;
            valueMapping?: {
                [key: string]: unknown;
            };
        }>;
        propertyMappingsMasterToES?: Array<{
            from?: string;
            fromFilter?: string;
            others?: Array<unknown>;
            to?: string;
            toFilter?: string;
            valueMapping?: {
                [key: string]: unknown;
            };
        }>;
    };
    path: {
        /**
         * Domatin Type
         */
        domainType: string;
        externalSystemId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/fieldmappings/{domainType}';
};

export type PutSyncFieldMappingsErrors = {
    /**
     * Bad Request. Validation Error
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PutSyncFieldMappingsResponses = {
    /**
     * OK
     */
    200: {
        data?: FieldMapping;
        meta?: MetaCount;
    };
};

export type PutSyncFieldMappingsResponse = PutSyncFieldMappingsResponses[keyof PutSyncFieldMappingsResponses];

export type GetSyncFieldMappingsNoSuggestionsData = {
    body?: never;
    path: {
        /**
         * Domatin Type
         */
        domainType: string;
        externalSystemId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/fieldmappings/{domainType}/nosuggestions';
};

export type GetSyncFieldMappingsNoSuggestionsErrors = {
    /**
     * Unauthorized.
     */
    401: unknown;
    /**
     * Forbidden. Missing Sync Auths
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetSyncFieldMappingsNoSuggestionsResponses = {
    /**
     * OK
     */
    200: {
        data?: {
            [key: string]: unknown;
        };
    };
};

export type GetSyncFieldMappingsNoSuggestionsResponse =
    GetSyncFieldMappingsNoSuggestionsResponses[keyof GetSyncFieldMappingsNoSuggestionsResponses];

export type GetSyncExternalsystemsExternalSystemIdJobconfigurationsData = {
    body?: never;
    path: {
        externalSystemId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/jobconfigs';
};

export type GetSyncExternalsystemsExternalSystemIdJobconfigurationsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<JobConfigurationReturn>;
        meta?: MetaCount;
    };
};

export type GetSyncExternalsystemsExternalSystemIdJobconfigurationsResponse =
    GetSyncExternalsystemsExternalSystemIdJobconfigurationsResponses[keyof GetSyncExternalsystemsExternalSystemIdJobconfigurationsResponses];

export type PostSyncExternalsystemsExternalSystemIdJobconfigsData = {
    body?: JobConfiguration;
    path: {
        externalSystemId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/jobconfigs';
};

export type PostSyncExternalsystemsExternalSystemIdJobconfigsResponses = {
    /**
     * Created
     */
    201: {
        data?: JobConfigurationReturn;
    };
};

export type PostSyncExternalsystemsExternalSystemIdJobconfigsResponse =
    PostSyncExternalsystemsExternalSystemIdJobconfigsResponses[keyof PostSyncExternalsystemsExternalSystemIdJobconfigsResponses];

export type DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdData = {
    body?: never;
    path: {
        externalSystemId: string;
        jobId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/jobconfigs/{jobId}';
};

export type DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdResponse =
    DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdResponses[keyof DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdResponses];

export type GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdData = {
    body?: never;
    path: {
        externalSystemId: string;
        jobId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/jobconfigs/{jobId}';
};

export type GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdResponses = {
    /**
     * OK
     */
    200: {
        data?: JobConfigurationReturn;
    };
};

export type GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdResponse =
    GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdResponses[keyof GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdResponses];

export type PutSyncExternalsystemsExternalSystemIdJobconfigsData = {
    body?: JobConfiguration;
    path: {
        externalSystemId: string;
        jobId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/jobconfigs/{jobId}';
};

export type PutSyncExternalsystemsExternalSystemIdJobconfigsResponses = {
    /**
     * OK
     */
    200: {
        data?: JobConfigurationReturn;
    };
};

export type PutSyncExternalsystemsExternalSystemIdJobconfigsResponse =
    PutSyncExternalsystemsExternalSystemIdJobconfigsResponses[keyof PutSyncExternalsystemsExternalSystemIdJobconfigsResponses];

export type DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterData = {
    body?: never;
    path: {
        /**
         * External System ID
         */
        externalSystemId: string;
        /**
         * Job Configuration ID
         */
        jobId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/jobconfigs/{jobId}/filter';
};

export type DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterResponse =
    DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterResponses[keyof DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterResponses];

export type GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterData = {
    body?: never;
    path: {
        /**
         * External System ID
         */
        externalSystemId: string;
        /**
         * Job Configuration ID
         */
        jobId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/jobconfigs/{jobId}/filter';
};

export type GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterResponses = {
    200: {
        data: {
            es: Array<{
                field: string;
                system: string;
                values: {
                    [key: string]: unknown;
                };
            }>;
            master: Array<{
                field: string;
                system: string;
                values: {
                    [key: string]: unknown;
                };
            }>;
        };
    };
};

export type GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterResponse =
    GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterResponses[keyof GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterResponses];

export type PutSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterData = {
    body?: {
        es: Array<{
            field: string;
            system: string;
            values: {
                [key: string]: unknown;
            };
        }>;
        master: Array<{
            field: string;
            system: string;
            values: {
                [key: string]: unknown;
            };
        }>;
    };
    path: {
        /**
         * External System ID
         */
        externalSystemId: string;
        /**
         * Job Configuration ID
         */
        jobId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/jobconfigs/{jobId}/filter';
};

export type PutSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PutSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterResponses = {
    200: {
        data?: {
            es: Array<{
                field: string;
                system: string;
                values: {
                    [key: string]: unknown;
                };
            }>;
            master: Array<{
                field: string;
                system: string;
                values: {
                    [key: string]: unknown;
                };
            }>;
        };
    };
};

export type PutSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterResponse =
    PutSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterResponses[keyof PutSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilterResponses];

export type DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesData = {
    body?: never;
    path: {
        /**
         * External System ID
         */
        externalSystemId: string;
        /**
         * Job Configuration ID
         */
        jobId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/jobconfigs/{jobId}/properties';
};

export type DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesResponse =
    DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesResponses[keyof DeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesResponses];

export type GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesData = {
    body?: never;
    path: {
        /**
         * External System ID
         */
        externalSystemId: string;
        /**
         * Job Configuration ID
         */
        jobId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/jobconfigs/{jobId}/properties';
};

export type GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesResponses = {
    200: {
        data: {
            domainType: string;
            externalSystem: ExternalSystem;
            properties: {
                propertyMappingsESToMaster: Array<{
                    fieldMappingId: number;
                    from: string;
                    fromFilter: string;
                    system: string;
                    to: string;
                    toFilter: string;
                }>;
                propertyMappingsMasterToES: Array<{
                    fieldMappingId: number;
                    from: string;
                    fromFilter: string;
                    system: string;
                    to: string;
                    toFilter: string;
                }>;
            };
        };
    };
};

export type GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesResponse =
    GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesResponses[keyof GetSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesResponses];

export type PutSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesData = {
    body?: {
        propertyMappingsESToMaster: Array<{
            fieldMappingId: number;
            from: string;
            fromFilter: string;
            system: string;
            to: string;
            toFilter: string;
        }>;
        propertyMappingsMasterToES: Array<{
            fieldMappingId: number;
            from: string;
            fromFilter: string;
            system: string;
            to: string;
            toFilter: string;
        }>;
    };
    path: {
        /**
         * External System ID
         */
        externalSystemId: string;
        /**
         * Job Configuration ID
         */
        jobId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/jobconfigs/{jobId}/properties';
};

export type PutSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PutSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesResponses = {
    200: {
        data: {
            domainType: string;
            externalSystem: ExternalSystem;
            properties: {
                propertyMappingsESToMaster: Array<{
                    fieldMappingId: number;
                    from: string;
                    fromFilter: string;
                    system: string;
                    to: string;
                    toFilter: string;
                }>;
                propertyMappingsMasterToES: Array<{
                    fieldMappingId: number;
                    from: string;
                    fromFilter: string;
                    system: string;
                    to: string;
                    toFilter: string;
                }>;
            };
        };
    };
};

export type PutSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesResponse =
    PutSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesResponses[keyof PutSyncExternalsystemsExternalSystemIdJobconfigsJobIdPropertiesResponses];

export type PostSyncExternalsystemsExternalSystemIdJobconfigsJobIdStartData = {
    body?: {
        /**
         * If `true` no records will be changed, deleted, linked, created. Default: `false`
         */
        isDryRun?: boolean;
        /**
         * If `true` configuration is validated. Default: `false`
         */
        isValidationOnly?: boolean;
    };
    path: {
        externalSystemId: string;
        jobId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/jobconfigs/{jobId}/start';
};

export type PostSyncExternalsystemsExternalSystemIdJobconfigsJobIdStartErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PostSyncExternalsystemsExternalSystemIdJobconfigsJobIdStartResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type PostSyncExternalsystemsExternalSystemIdJobconfigsJobIdStartResponse =
    PostSyncExternalsystemsExternalSystemIdJobconfigsJobIdStartResponses[keyof PostSyncExternalsystemsExternalSystemIdJobconfigsJobIdStartResponses];

export type PostSyncExternalsystemsIdTestData = {
    body?: never;
    path: {
        externalSystemId: string;
    };
    query?: never;
    url: '/sync/externalsystems/{externalSystemId}/test';
};

export type PostSyncExternalsystemsIdTestErrors = {
    /**
     * Bad Request
     */
    400: {
        message?: string;
    };
};

export type PostSyncExternalsystemsIdTestError =
    PostSyncExternalsystemsIdTestErrors[keyof PostSyncExternalsystemsIdTestErrors];

export type PostSyncExternalsystemsIdTestResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type PostSyncExternalsystemsIdTestResponse =
    PostSyncExternalsystemsIdTestResponses[keyof PostSyncExternalsystemsIdTestResponses];

export type DeleteSyncExternalsystemsIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/sync/externalsystems/{id}';
};

export type DeleteSyncExternalsystemsIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteSyncExternalsystemsIdResponse =
    DeleteSyncExternalsystemsIdResponses[keyof DeleteSyncExternalsystemsIdResponses];

export type GetSyncExternalsystemsIdData = {
    body?: never;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/sync/externalsystems/{id}';
};

export type GetSyncExternalsystemsIdResponses = {
    /**
     * OK
     */
    200: {
        data?: ExternalSystemReturn;
    };
};

export type GetSyncExternalsystemsIdResponse =
    GetSyncExternalsystemsIdResponses[keyof GetSyncExternalsystemsIdResponses];

export type PutSyncExternalsystemsIdData = {
    body?: ExternalSystem;
    path: {
        /**
         * ID of Entity
         */
        id: number;
    };
    query?: never;
    url: '/sync/externalsystems/{id}';
};

export type PutSyncExternalsystemsIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetSyncJobconfigsData = {
    body?: never;
    path?: never;
    query?: {
        'external_system_ids[]'?: Array<number>;
    };
    url: '/sync/jobconfigs';
};

export type GetSyncJobconfigsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<JobConfigurationReturn>;
        meta?: MetaCount;
    };
};

export type GetSyncJobconfigsResponse = GetSyncJobconfigsResponses[keyof GetSyncJobconfigsResponses];

export type GetSyncLogsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number to show page in pagination. If empty, start at first page.
         */
        page?: number;
        /**
         * Number of results per page.
         */
        limit?: number;
        /**
         * Filter by External Systems
         */
        'es_ids[]'?: Array<number>;
        /**
         * Filter by Jobs
         */
        'job_ids[]'?: Array<number>;
        /**
         * Show Logs From This Date on
         */
        start_date?: string;
        /**
         * Show Logs Until This Date
         */
        end_date?: string;
        /**
         * Filter by Types
         */
        types?: Array<number>;
        /**
         * Search Through Log Messages
         */
        query?: string;
        /**
         * the log levels
         */
        levels?: Array<string>;
        is_dry_run?: boolean;
    };
    url: '/sync/logs';
};

export type GetSyncLogsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetSyncLogsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<SyncLog>;
        meta?: MetaPagination;
    };
};

export type GetSyncLogsResponse = GetSyncLogsResponses[keyof GetSyncLogsResponses];

export type PostSyncLogsData = {
    body?: {
        logs: Array<{
            /**
             * Arguments for Translation Key
             */
            args: {
                [key: string]: unknown;
            };
            changes?: Array<{
                /**
                 * Secondary value for FieldName. Used for Group Roles.
                 */
                fieldAttribute?: string | null;
                /**
                 * Name of field. Translation Key allowed
                 */
                fieldName?: string;
                newValue?: string;
                /**
                 * `null` if new
                 */
                oldValue?: string | null;
            }>;
            date: string;
            domainId: string | null;
            domainType: string | null;
            isDryRun: boolean;
            jobId: number;
            level: 'debug' | 'info' | 'notice' | 'warning' | 'error' | 'critical' | 'alert' | 'emergency';
            /**
             * Translation Key
             */
            messageKey: string;
            sourceEntityId: string | null;
            system: 'es' | 'master' | 'both';
            type: 'create' | 'update' | 'link' | 'delete' | 'execution';
        }>;
    };
    path?: never;
    query?: never;
    url: '/sync/logs';
};

export type PostSyncLogsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PostSyncLogsResponses = {
    /**
     * Created
     */
    201: {
        data?: {
            persisted?: number;
        };
    };
};

export type PostSyncLogsResponse = PostSyncLogsResponses[keyof PostSyncLogsResponses];

export type GetTagsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Use `GET /tags/{domainType}` instead
         */
        type: 'persons' | 'songs';
    };
    url: '/tags';
};

export type GetTagsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetTagsError = GetTagsErrors[keyof GetTagsErrors];

export type GetTagsResponses = {
    /**
     * Array with all tags of a type
     */
    200: {
        data?: Array<Tag>;
        meta?: MetaCount;
    };
};

export type GetTagsResponse = GetTagsResponses[keyof GetTagsResponses];

export type PostTagsData = {
    body?: {
        name?: string;
    };
    path?: never;
    query: {
        type: 'persons' | 'songs';
    };
    url: '/tags';
};

export type PostTagsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostTagsError = PostTagsErrors[keyof PostTagsErrors];

export type PostTagsResponses = {
    /**
     * The newly created tag
     */
    201: {
        data?: Tag;
    };
};

export type PostTagsResponse = PostTagsResponses[keyof PostTagsResponses];

export type GetTagsDomainTypeData = {
    body?: never;
    path: {
        /**
         * Domain types that tags can be used with
         */
        domainType: 'person' | 'group' | 'song';
    };
    query?: never;
    url: '/tags/{domainType}';
};

export type GetTagsDomainTypeResponses = {
    /**
     * The specified tags
     */
    200: {
        data?: Array<TagWithCount>;
        meta?: MetaCount;
    };
};

export type GetTagsDomainTypeResponse = GetTagsDomainTypeResponses[keyof GetTagsDomainTypeResponses];

export type PostTagsDomainTypeData = {
    body?: TagUpdate;
    path: {
        /**
         * Domain types that tags can be used with
         */
        domainType: 'person' | 'group' | 'song';
    };
    query?: never;
    url: '/tags/{domainType}';
};

export type PostTagsDomainTypeErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostTagsDomainTypeError = PostTagsDomainTypeErrors[keyof PostTagsDomainTypeErrors];

export type PostTagsDomainTypeResponses = {
    /**
     * The newly created tag
     */
    200: Tag;
};

export type PostTagsDomainTypeResponse = PostTagsDomainTypeResponses[keyof PostTagsDomainTypeResponses];

export type GetTagsDomainTypeDomainIdData = {
    body?: never;
    path: {
        /**
         * Domain types that tags can be used with
         */
        domainType: 'person' | 'group' | 'song';
        /**
         * the domain id
         */
        domainId: number;
    };
    query?: never;
    url: '/tags/{domainType}/{domainId}';
};

export type GetTagsDomainTypeDomainIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetTagsDomainTypeDomainIdError = GetTagsDomainTypeDomainIdErrors[keyof GetTagsDomainTypeDomainIdErrors];

export type GetTagsDomainTypeDomainIdResponses = {
    /**
     * The specified tag
     */
    200: {
        data?: Array<Tag>;
        meta?: MetaCount;
    };
};

export type GetTagsDomainTypeDomainIdResponse =
    GetTagsDomainTypeDomainIdResponses[keyof GetTagsDomainTypeDomainIdResponses];

export type PostTagsDomainTypeDomainIdData = {
    body?: {
        name?: string;
    };
    path: {
        /**
         * Domain types that tags can be used with
         */
        domainType: 'person' | 'group' | 'song';
        /**
         * the domain id
         */
        domainId: number;
    };
    query?: never;
    url: '/tags/{domainType}/{domainId}';
};

export type PostTagsDomainTypeDomainIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostTagsDomainTypeDomainIdError = PostTagsDomainTypeDomainIdErrors[keyof PostTagsDomainTypeDomainIdErrors];

export type PostTagsDomainTypeDomainIdResponses = {
    /**
     * The newly added tag
     */
    201: {
        data?: Tag;
    };
};

export type PostTagsDomainTypeDomainIdResponse =
    PostTagsDomainTypeDomainIdResponses[keyof PostTagsDomainTypeDomainIdResponses];

export type DeleteTagsDomainTypeDomainIdTagIdData = {
    body?: never;
    path: {
        /**
         * Domain types that tags can be used with
         */
        domainType: 'person' | 'group' | 'song';
        /**
         * the domain id
         */
        domainId: number;
        /**
         * ID of tag
         */
        tagId: number;
    };
    query?: never;
    url: '/tags/{domainType}/{domainId}/{tagId}';
};

export type DeleteTagsDomainTypeDomainIdTagIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteTagsDomainTypeDomainIdTagIdResponse =
    DeleteTagsDomainTypeDomainIdTagIdResponses[keyof DeleteTagsDomainTypeDomainIdTagIdResponses];

export type PutTagsDomainTypeDomainIdTagIdData = {
    body?: never;
    path: {
        /**
         * Domain types that tags can be used with
         */
        domainType: 'person' | 'group' | 'song';
        /**
         * the domain id
         */
        domainId: number;
        /**
         * ID of tag
         */
        tagId: number;
    };
    query?: never;
    url: '/tags/{domainType}/{domainId}/{tagId}';
};

export type PutTagsDomainTypeDomainIdTagIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PutTagsDomainTypeDomainIdTagIdError =
    PutTagsDomainTypeDomainIdTagIdErrors[keyof PutTagsDomainTypeDomainIdTagIdErrors];

export type PutTagsDomainTypeDomainIdTagIdResponses = {
    /**
     * The newly added tag
     */
    200: {
        data?: Tag;
    };
};

export type PutTagsDomainTypeDomainIdTagIdResponse =
    PutTagsDomainTypeDomainIdTagIdResponses[keyof PutTagsDomainTypeDomainIdTagIdResponses];

export type DeleteTagsTagIdData = {
    body?: never;
    path: {
        tagId: number;
    };
    query?: never;
    url: '/tags/{tagId}';
};

export type DeleteTagsTagIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type DeleteTagsTagIdError = DeleteTagsTagIdErrors[keyof DeleteTagsTagIdErrors];

export type DeleteTagsTagIdResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteTagsTagIdResponse = DeleteTagsTagIdResponses[keyof DeleteTagsTagIdResponses];

export type GetTagsTagIdData = {
    body?: never;
    path: {
        tagId: number;
    };
    query?: never;
    url: '/tags/{tagId}';
};

export type GetTagsTagIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetTagsTagIdError = GetTagsTagIdErrors[keyof GetTagsTagIdErrors];

export type GetTagsTagIdResponses = {
    /**
     * The created tag
     */
    200: Tag;
};

export type GetTagsTagIdResponse = GetTagsTagIdResponses[keyof GetTagsTagIdResponses];

export type PutTagsTagIdData = {
    body?: TagUpdate;
    path: {
        tagId: number;
    };
    query?: never;
    url: '/tags/{tagId}';
};

export type PutTagsTagIdErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutTagsTagIdError = PutTagsTagIdErrors[keyof PutTagsTagIdErrors];

export type PutTagsTagIdResponses = {
    /**
     * The updated tag
     */
    200: Tag;
};

export type PutTagsTagIdResponse = PutTagsTagIdResponses[keyof PutTagsTagIdResponses];

export type GetAllTranslationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter if church has updated this translation by themselves.
         */
        updated_by_church?: boolean;
        /**
         * Filter if translation has to be checked.
         */
        needs_check?: boolean;
    };
    url: '/translations';
};

export type GetAllTranslationsErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetAllTranslationsError = GetAllTranslationsErrors[keyof GetAllTranslationsErrors];

export type GetAllTranslationsResponses = {
    /**
     * Successful request
     */
    200: {
        data?: Array<TranslationKey>;
        meta?: MetaPagination;
    };
};

export type GetAllTranslationsResponse = GetAllTranslationsResponses[keyof GetAllTranslationsResponses];

export type GetKeysByTextData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Translated text string
         */
        query?: string;
    };
    url: '/translations/keysbytext';
};

export type GetKeysByTextErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type GetKeysByTextError = GetKeysByTextErrors[keyof GetKeysByTextErrors];

export type GetKeysByTextResponses = {
    /**
     * Successful request
     */
    200: {
        data?: Array<string>;
    };
};

export type GetKeysByTextResponse = GetKeysByTextResponses[keyof GetKeysByTextResponses];

export type DeleteTranslationKeyData = {
    body?: never;
    path: {
        /**
         * The key id to delete
         */
        keyId: number;
    };
    query?: never;
    url: '/translations/{keyId}';
};

export type DeleteTranslationKeyErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type DeleteTranslationKeyError = DeleteTranslationKeyErrors[keyof DeleteTranslationKeyErrors];

export type DeleteTranslationKeyResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteTranslationKeyResponse = DeleteTranslationKeyResponses[keyof DeleteTranslationKeyResponses];

export type UpdateTranslationKeyData = {
    body: TranslationKey;
    path: {
        /**
         * The key id to delete
         */
        keyId: number;
    };
    query?: never;
    url: '/translations/{keyId}';
};

export type UpdateTranslationKeyErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type UpdateTranslationKeyError = UpdateTranslationKeyErrors[keyof UpdateTranslationKeyErrors];

export type UpdateTranslationKeyResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type UpdateTranslationKeyResponse = UpdateTranslationKeyResponses[keyof UpdateTranslationKeyResponses];

export type DeleteTranslationLanguageData = {
    body?: never;
    path: {
        /**
         * The key id to delete
         */
        keyId: number;
        /**
         * The language id to delete
         */
        languageId: number;
    };
    query?: never;
    url: '/translations/{keyId}/languages/{languageId}';
};

export type DeleteTranslationLanguageErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type DeleteTranslationLanguageError = DeleteTranslationLanguageErrors[keyof DeleteTranslationLanguageErrors];

export type DeleteTranslationLanguageResponses = {
    /**
     * Successfully deleted
     */
    204: void;
};

export type DeleteTranslationLanguageResponse =
    DeleteTranslationLanguageResponses[keyof DeleteTranslationLanguageResponses];

export type PostTwofactorTotpData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/twofactor/totp';
};

export type PostTwofactorTotpErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostTwofactorTotpError = PostTwofactorTotpErrors[keyof PostTwofactorTotpErrors];

export type GetWebsiteDataData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include additional information
         */
        'include[]'?: Array<'domainData'>;
    };
    url: '/website/data';
};

export type GetWebsiteDataResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<WebsiteData>;
        meta?: MetaCount;
    };
};

export type GetWebsiteDataResponse = GetWebsiteDataResponses[keyof GetWebsiteDataResponses];

export type PostWebsiteDataData = {
    body: WebsiteDataCreate;
    path?: never;
    query?: never;
    url: '/website/data';
};

export type PostWebsiteDataErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
};

export type PostWebsiteDataError = PostWebsiteDataErrors[keyof PostWebsiteDataErrors];

export type PostWebsiteDataResponses = {
    /**
     * return new tag with ID
     */
    200: {
        data?: WebsiteDataWithoutInclude;
    };
};

export type PostWebsiteDataResponse = PostWebsiteDataResponses[keyof PostWebsiteDataResponses];

export type DeleteWebsiteDataData = {
    body?: never;
    path: {
        /**
         * ID of a WebsiteData item
         */
        id: number;
    };
    query?: never;
    url: '/website/data/{id}';
};

export type DeleteWebsiteDataResponses = {
    /**
     * Successfully deleted WebsiteData item
     */
    204: void;
};

export type DeleteWebsiteDataResponse = DeleteWebsiteDataResponses[keyof DeleteWebsiteDataResponses];

export type GetWebsiteStarttestData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/website/starttest';
};

export type GetWebsiteStarttestErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type GetWebsiteStarttestError = GetWebsiteStarttestErrors[keyof GetWebsiteStarttestErrors];

export type GetWebsiteStarttestResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetWhoamiData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * If set to `true` the route will return 401 Unauthorized if the user is not logged in.
         */
        only_allow_authenticated?: boolean;
    };
    url: '/whoami';
};

export type GetWhoamiErrors = {
    /**
     * Unauthenticated
     */
    401: unknown;
};

export type GetWhoamiResponses = {
    /**
     * Current user
     */
    200: {
        data: Person;
        meta: {
            simulatingUserId?: number | null;
        };
    };
};

export type GetWhoamiResponse = GetWhoamiResponses[keyof GetWhoamiResponses];

export type GetWidgetBlogData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/widgets/blog';
};

export type GetWidgetBlogResponses = {
    /**
     * OK
     */
    200: {
        data?: {
            description?: string;
            items?: Array<BlogItem>;
            link?: string;
            title?: string;
            totalCount?: number;
        };
    };
};

export type GetWidgetBlogResponse = GetWidgetBlogResponses[keyof GetWidgetBlogResponses];

export type GetWidgetRssData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/widgets/rss';
};

export type GetWidgetRssResponses = {
    /**
     * OK
     */
    200: {
        data?: RssFeed;
    };
};

export type GetWidgetRssResponse = GetWidgetRssResponses[keyof GetWidgetRssResponses];

export type GetWikiCategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/wiki/categories';
};

export type GetWikiCategoriesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<WikiCategory>;
        meta?: MetaCount;
        permissions?: {
            editMasterData?: boolean;
        };
    };
};

export type GetWikiCategoriesResponse = GetWikiCategoriesResponses[keyof GetWikiCategoriesResponses];

export type PostWikiCategoryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/wiki/categories';
};

export type PostWikiCategoryErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PostWikiCategoryError = PostWikiCategoryErrors[keyof PostWikiCategoryErrors];

export type PostWikiCategoryResponses = {
    /**
     * OK
     */
    200: {
        data?: WikiCategory;
    };
};

export type PostWikiCategoryResponse = PostWikiCategoryResponses[keyof PostWikiCategoryResponses];

export type PutWikiCategoryData = {
    body?: never;
    path: {
        /**
         * ID of WikiCategory
         */
        wikiCategoryId: number;
    };
    query?: never;
    url: '/wiki/categories/{wikiCategoryId}';
};

export type PutWikiCategoryErrors = {
    /**
     * Unauthorized
     */
    401: string;
    /**
     * Forbidden to see, create, update, or delete resource
     */
    403: unknown;
    /**
     * Resource not found
     */
    404: unknown;
};

export type PutWikiCategoryError = PutWikiCategoryErrors[keyof PutWikiCategoryErrors];

export type PutWikiCategoryResponses = {
    /**
     * OK
     */
    200: {
        data?: WikiCategory;
    };
};

export type PutWikiCategoryResponse = PutWikiCategoryResponses[keyof PutWikiCategoryResponses];

export type GetWikiCategoriesWikiCategoryIdPagesData = {
    body?: never;
    path: {
        /**
         * ID of WikiCategory
         */
        wikiCategoryId: number;
    };
    query?: never;
    url: '/wiki/categories/{wikiCategoryId}/pages';
};

export type GetWikiCategoriesWikiCategoryIdPagesResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<SimpleWikiPage>;
        meta?: MetaCount;
    };
};

export type GetWikiCategoriesWikiCategoryIdPagesResponse =
    GetWikiCategoriesWikiCategoryIdPagesResponses[keyof GetWikiCategoriesWikiCategoryIdPagesResponses];

export type GetWikiCategoriesWikiCategoryIdPagesIdentifierData = {
    body?: never;
    path: {
        /**
         * ID of WikiCategory
         */
        wikiCategoryId: number;
        /**
         * Can either be the pages identifier or its title
         */
        identifier: string;
    };
    query?: never;
    url: '/wiki/categories/{wikiCategoryId}/pages/{identifier}';
};

export type GetWikiCategoriesWikiCategoryIdPagesIdentifierResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<WikiPage>;
        meta?: MetaCount;
    };
};

export type GetWikiCategoriesWikiCategoryIdPagesIdentifierResponse =
    GetWikiCategoriesWikiCategoryIdPagesIdentifierResponses[keyof GetWikiCategoriesWikiCategoryIdPagesIdentifierResponses];

export type GetWikiCategoriesWikiCategoryIdPagesIdentifierVersionsData = {
    body?: never;
    path: {
        /**
         * ID of WikiCategory
         */
        wikiCategoryId: number;
        /**
         * Can either be the pages identifier or its title
         */
        identifier: string;
    };
    query?: never;
    url: '/wiki/categories/{wikiCategoryId}/pages/{identifier}/versions';
};

export type GetWikiCategoriesWikiCategoryIdPagesIdentifierVersionsResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<WikiPage>;
        meta?: MetaCount;
    };
};

export type GetWikiCategoriesWikiCategoryIdPagesIdentifierVersionsResponse =
    GetWikiCategoriesWikiCategoryIdPagesIdentifierVersionsResponses[keyof GetWikiCategoriesWikiCategoryIdPagesIdentifierVersionsResponses];

export type GetWikiCategoriesWikiCategoryIdPagesVersionsVersionData = {
    body?: never;
    path: {
        /**
         * ID of WikiCategory
         */
        wikiCategoryId: number;
        version: string;
        /**
         * Can either be the pages identifier or its title
         */
        identifier: string;
    };
    query?: never;
    url: '/wiki/categories/{wikiCategoryId}/pages/{identifier}/versions/{version}';
};

export type GetWikiCategoriesWikiCategoryIdPagesVersionsVersionResponses = {
    /**
     * OK
     */
    200: {
        data?: WikiPage;
    };
};

export type GetWikiCategoriesWikiCategoryIdPagesVersionsVersionResponse =
    GetWikiCategoriesWikiCategoryIdPagesVersionsVersionResponses[keyof GetWikiCategoriesWikiCategoryIdPagesVersionsVersionResponses];

export type GetWikiCategoriesWikiCategoryIdSearchData = {
    body?: never;
    path?: never;
    query?: {
        query?: string;
        /**
         * wiki categories that should be searched. if noone is given all categories are searched
         */
        'wiki_category_ids[]'?: Array<number>;
    };
    url: '/wiki/search';
};

export type GetWikiCategoriesWikiCategoryIdSearchResponses = {
    /**
     * OK
     */
    200: {
        data?: Array<SearchResult>;
        meta?: MetaCount;
    };
};

export type GetWikiCategoriesWikiCategoryIdSearchResponse =
    GetWikiCategoriesWikiCategoryIdSearchResponses[keyof GetWikiCategoriesWikiCategoryIdSearchResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}/api` | 'http://churchtools.test/api' | (string & {});
};
